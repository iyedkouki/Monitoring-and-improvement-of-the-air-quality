
peoject iot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afa8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800b138  0800b138  0001b138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b270  0800b270  00020250  2**0
                  CONTENTS
  4 .ARM          00000008  0800b270  0800b270  0001b270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b278  0800b278  00020250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b278  0800b278  0001b278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b27c  0800b27c  0001b27c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  0800b280  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006bc  20000250  0800b4d0  00020250  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000090c  0800b4d0  0002090c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d8be  00000000  00000000  000202c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b37  00000000  00000000  0003db81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a30  00000000  00000000  000416b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001469  00000000  00000000  000430e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ad6b  00000000  00000000  00044551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020349  00000000  00000000  0006f2bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010ca9d  00000000  00000000  0008f605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000799c  00000000  00000000  0019c0a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001a3a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000250 	.word	0x20000250
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b120 	.word	0x0800b120

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000254 	.word	0x20000254
 80001cc:	0800b120 	.word	0x0800b120

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	0000      	movs	r0, r0
	...

08000f48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	ed2d 8b02 	vpush	{d8}
 8000f4e:	b092      	sub	sp, #72	; 0x48
 8000f50:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f52:	f001 fc9c 	bl	800288e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f56:	f000 fa49 	bl	80013ec <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f5a:	f000 fa99 	bl	8001490 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f5e:	f000 fc5f 	bl	8001820 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000f62:	f000 fb5f 	bl	8001624 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000f66:	f000 fbc3 	bl	80016f0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000f6a:	f000 fc21 	bl	80017b0 <MX_USART3_UART_Init>
  MX_QUADSPI_Init();
 8000f6e:	f000 fb99 	bl	80016a4 <MX_QUADSPI_Init>
  MX_USB_OTG_FS_USB_Init();
 8000f72:	f000 fc4d 	bl	8001810 <MX_USB_OTG_FS_USB_Init>
  MX_USART2_UART_Init();
 8000f76:	f000 fbeb 	bl	8001750 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f7a:	f000 fab7 	bl	80014ec <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */


  HAL_UART_Transmit(&huart1,msg1,sizeof(msg1),1000);
 8000f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f82:	2230      	movs	r2, #48	; 0x30
 8000f84:	49ce      	ldr	r1, [pc, #824]	; (80012c0 <main+0x378>)
 8000f86:	48cf      	ldr	r0, [pc, #828]	; (80012c4 <main+0x37c>)
 8000f88:	f007 fbd2 	bl	8008730 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,msg2,sizeof(msg2),1000);
 8000f8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f90:	222f      	movs	r2, #47	; 0x2f
 8000f92:	49cd      	ldr	r1, [pc, #820]	; (80012c8 <main+0x380>)
 8000f94:	48cb      	ldr	r0, [pc, #812]	; (80012c4 <main+0x37c>)
 8000f96:	f007 fbcb 	bl	8008730 <HAL_UART_Transmit>
  BSP_TSENSOR_Init();
 8000f9a:	f001 f9fb 	bl	8002394 <BSP_TSENSOR_Init>
  HAL_UART_Transmit(&huart1,msg3,sizeof(msg3),1000);
 8000f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa2:	2231      	movs	r2, #49	; 0x31
 8000fa4:	49c9      	ldr	r1, [pc, #804]	; (80012cc <main+0x384>)
 8000fa6:	48c7      	ldr	r0, [pc, #796]	; (80012c4 <main+0x37c>)
 8000fa8:	f007 fbc2 	bl	8008730 <HAL_UART_Transmit>

  HAL_UART_Transmit(&huart1,msg4,sizeof(msg4),1000);
 8000fac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb0:	222d      	movs	r2, #45	; 0x2d
 8000fb2:	49c7      	ldr	r1, [pc, #796]	; (80012d0 <main+0x388>)
 8000fb4:	48c3      	ldr	r0, [pc, #780]	; (80012c4 <main+0x37c>)
 8000fb6:	f007 fbbb 	bl	8008730 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,msg5,sizeof(msg5),1000);
 8000fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fbe:	222c      	movs	r2, #44	; 0x2c
 8000fc0:	49c4      	ldr	r1, [pc, #784]	; (80012d4 <main+0x38c>)
 8000fc2:	48c0      	ldr	r0, [pc, #768]	; (80012c4 <main+0x37c>)
 8000fc4:	f007 fbb4 	bl	8008730 <HAL_UART_Transmit>
  BSP_HSENSOR_Init();
 8000fc8:	f001 f988 	bl	80022dc <BSP_HSENSOR_Init>
  HAL_UART_Transmit(&huart1,msg6,sizeof(msg6),1000);
 8000fcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd0:	222e      	movs	r2, #46	; 0x2e
 8000fd2:	49c1      	ldr	r1, [pc, #772]	; (80012d8 <main+0x390>)
 8000fd4:	48bb      	ldr	r0, [pc, #748]	; (80012c4 <main+0x37c>)
 8000fd6:	f007 fbab 	bl	8008730 <HAL_UART_Transmit>

  HAL_UART_Transmit(&huart1,msg7,sizeof(msg7),1000);
 8000fda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fde:	222d      	movs	r2, #45	; 0x2d
 8000fe0:	49be      	ldr	r1, [pc, #760]	; (80012dc <main+0x394>)
 8000fe2:	48b8      	ldr	r0, [pc, #736]	; (80012c4 <main+0x37c>)
 8000fe4:	f007 fba4 	bl	8008730 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,msg8,sizeof(msg8),1000);
 8000fe8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fec:	222d      	movs	r2, #45	; 0x2d
 8000fee:	49bc      	ldr	r1, [pc, #752]	; (80012e0 <main+0x398>)
 8000ff0:	48b4      	ldr	r0, [pc, #720]	; (80012c4 <main+0x37c>)
 8000ff2:	f007 fb9d 	bl	8008730 <HAL_UART_Transmit>
  BSP_PSENSOR_Init();
 8000ff6:	f001 f99f 	bl	8002338 <BSP_PSENSOR_Init>
  HAL_UART_Transmit(&huart1,msg9,sizeof(msg9),1000);
 8000ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffe:	222f      	movs	r2, #47	; 0x2f
 8001000:	49b8      	ldr	r1, [pc, #736]	; (80012e4 <main+0x39c>)
 8001002:	48b0      	ldr	r0, [pc, #704]	; (80012c4 <main+0x37c>)
 8001004:	f007 fb94 	bl	8008730 <HAL_UART_Transmit>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


 	    temp_value  = BSP_TSENSOR_ReadTemp();
 8001008:	f001 f9e0 	bl	80023cc <BSP_TSENSOR_ReadTemp>
 800100c:	eef0 7a40 	vmov.f32	s15, s0
 8001010:	4bb5      	ldr	r3, [pc, #724]	; (80012e8 <main+0x3a0>)
 8001012:	edc3 7a00 	vstr	s15, [r3]
 	    humid_value = BSP_HSENSOR_ReadHumidity();
 8001016:	f001 f981 	bl	800231c <BSP_HSENSOR_ReadHumidity>
 800101a:	eef0 7a40 	vmov.f32	s15, s0
 800101e:	4bb3      	ldr	r3, [pc, #716]	; (80012ec <main+0x3a4>)
 8001020:	edc3 7a00 	vstr	s15, [r3]
 	    press_value = BSP_PSENSOR_ReadPressure();
 8001024:	f001 f9a8 	bl	8002378 <BSP_PSENSOR_ReadPressure>
 8001028:	eef0 7a40 	vmov.f32	s15, s0
 800102c:	4bb0      	ldr	r3, [pc, #704]	; (80012f0 <main+0x3a8>)
 800102e:	edc3 7a00 	vstr	s15, [r3]

 	         HAL_ADC_Start(&hadc1);
 8001032:	48b0      	ldr	r0, [pc, #704]	; (80012f4 <main+0x3ac>)
 8001034:	f002 f8a6 	bl	8003184 <HAL_ADC_Start>
 	        HAL_ADC_PollForConversion(&hadc1, 500);
 8001038:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800103c:	48ad      	ldr	r0, [pc, #692]	; (80012f4 <main+0x3ac>)
 800103e:	f002 f95b 	bl	80032f8 <HAL_ADC_PollForConversion>

 	        voltage_sensor = HAL_ADC_GetValue(&hadc1);
 8001042:	48ac      	ldr	r0, [pc, #688]	; (80012f4 <main+0x3ac>)
 8001044:	f002 fa30 	bl	80034a8 <HAL_ADC_GetValue>
 8001048:	ee07 0a90 	vmov	s15, r0
 800104c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001050:	4ba9      	ldr	r3, [pc, #676]	; (80012f8 <main+0x3b0>)
 8001052:	edc3 7a00 	vstr	s15, [r3]
 	        voltage_sensor=(voltage_sensor/4095)*5;
 8001056:	4ba8      	ldr	r3, [pc, #672]	; (80012f8 <main+0x3b0>)
 8001058:	ed93 7a00 	vldr	s14, [r3]
 800105c:	eddf 6aa7 	vldr	s13, [pc, #668]	; 80012fc <main+0x3b4>
 8001060:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001064:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001068:	ee67 7a87 	vmul.f32	s15, s15, s14
 800106c:	4ba2      	ldr	r3, [pc, #648]	; (80012f8 <main+0x3b0>)
 800106e:	edc3 7a00 	vstr	s15, [r3]
 	  		voltage_sensor=(voltage_sensor*1.515151515151515);
 8001072:	4ba1      	ldr	r3, [pc, #644]	; (80012f8 <main+0x3b0>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fa66 	bl	8000548 <__aeabi_f2d>
 800107c:	a38a      	add	r3, pc, #552	; (adr r3, 80012a8 <main+0x360>)
 800107e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001082:	f7ff fab9 	bl	80005f8 <__aeabi_dmul>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	4610      	mov	r0, r2
 800108c:	4619      	mov	r1, r3
 800108e:	f7ff fd8b 	bl	8000ba8 <__aeabi_d2f>
 8001092:	4603      	mov	r3, r0
 8001094:	4a98      	ldr	r2, [pc, #608]	; (80012f8 <main+0x3b0>)
 8001096:	6013      	str	r3, [r2, #0]
 	  		co_value=3.027*(pow(e_number , (1.0698*voltage_sensor)));
 8001098:	4b99      	ldr	r3, [pc, #612]	; (8001300 <main+0x3b8>)
 800109a:	ed93 8b00 	vldr	d8, [r3]
 800109e:	4b96      	ldr	r3, [pc, #600]	; (80012f8 <main+0x3b0>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fa50 	bl	8000548 <__aeabi_f2d>
 80010a8:	a381      	add	r3, pc, #516	; (adr r3, 80012b0 <main+0x368>)
 80010aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ae:	f7ff faa3 	bl	80005f8 <__aeabi_dmul>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	ec43 2b17 	vmov	d7, r2, r3
 80010ba:	eeb0 1a47 	vmov.f32	s2, s14
 80010be:	eef0 1a67 	vmov.f32	s3, s15
 80010c2:	eeb0 0a48 	vmov.f32	s0, s16
 80010c6:	eef0 0a68 	vmov.f32	s1, s17
 80010ca:	f009 f8b7 	bl	800a23c <pow>
 80010ce:	ec51 0b10 	vmov	r0, r1, d0
 80010d2:	a379      	add	r3, pc, #484	; (adr r3, 80012b8 <main+0x370>)
 80010d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d8:	f7ff fa8e 	bl	80005f8 <__aeabi_dmul>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	4610      	mov	r0, r2
 80010e2:	4619      	mov	r1, r3
 80010e4:	f7ff fd60 	bl	8000ba8 <__aeabi_d2f>
 80010e8:	4603      	mov	r3, r0
 80010ea:	4a86      	ldr	r2, [pc, #536]	; (8001304 <main+0x3bc>)
 80010ec:	6013      	str	r3, [r2, #0]
 	  	     coInt1 = (int)co_value;
 80010ee:	4b85      	ldr	r3, [pc, #532]	; (8001304 <main+0x3bc>)
 80010f0:	edd3 7a00 	vldr	s15, [r3]
 80010f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010f8:	ee17 2a90 	vmov	r2, s15
 80010fc:	4b82      	ldr	r3, [pc, #520]	; (8001308 <main+0x3c0>)
 80010fe:	601a      	str	r2, [r3, #0]
 		    float coFrac = co_value - coInt1;
 8001100:	4b80      	ldr	r3, [pc, #512]	; (8001304 <main+0x3bc>)
 8001102:	ed93 7a00 	vldr	s14, [r3]
 8001106:	4b80      	ldr	r3, [pc, #512]	; (8001308 <main+0x3c0>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	ee07 3a90 	vmov	s15, r3
 800110e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001112:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001116:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 	         coInt2 = (int)(coFrac * 100);
 800111a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800111e:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 800130c <main+0x3c4>
 8001122:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001126:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800112a:	ee17 2a90 	vmov	r2, s15
 800112e:	4b78      	ldr	r3, [pc, #480]	; (8001310 <main+0x3c8>)
 8001130:	601a      	str	r2, [r3, #0]


 	  		 	       // Use the concentration value as needed
 	        snprintf(str_co, 100, "CO2 Value: %d.%02d ppm\n\r", coInt1, coInt2);
 8001132:	4b75      	ldr	r3, [pc, #468]	; (8001308 <main+0x3c0>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	4b76      	ldr	r3, [pc, #472]	; (8001310 <main+0x3c8>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	4613      	mov	r3, r2
 800113e:	4a75      	ldr	r2, [pc, #468]	; (8001314 <main+0x3cc>)
 8001140:	2164      	movs	r1, #100	; 0x64
 8001142:	4875      	ldr	r0, [pc, #468]	; (8001318 <main+0x3d0>)
 8001144:	f008 fbc2 	bl	80098cc <sniprintf>
 	  	    HAL_UART_Transmit(&huart1, (uint8_t *)str_co, strlen(str_co), 1000);
 8001148:	4873      	ldr	r0, [pc, #460]	; (8001318 <main+0x3d0>)
 800114a:	f7ff f841 	bl	80001d0 <strlen>
 800114e:	4603      	mov	r3, r0
 8001150:	b29a      	uxth	r2, r3
 8001152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001156:	4970      	ldr	r1, [pc, #448]	; (8001318 <main+0x3d0>)
 8001158:	485a      	ldr	r0, [pc, #360]	; (80012c4 <main+0x37c>)
 800115a:	f007 fae9 	bl	8008730 <HAL_UART_Transmit>




 	    /*Process temperature value */
 	    int tmpInt1 = temp_value;
 800115e:	4b62      	ldr	r3, [pc, #392]	; (80012e8 <main+0x3a0>)
 8001160:	edd3 7a00 	vldr	s15, [r3]
 8001164:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001168:	ee17 3a90 	vmov	r3, s15
 800116c:	623b      	str	r3, [r7, #32]
 	    float tmpFrac = temp_value - tmpInt1;
 800116e:	4b5e      	ldr	r3, [pc, #376]	; (80012e8 <main+0x3a0>)
 8001170:	ed93 7a00 	vldr	s14, [r3]
 8001174:	6a3b      	ldr	r3, [r7, #32]
 8001176:	ee07 3a90 	vmov	s15, r3
 800117a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800117e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001182:	edc7 7a07 	vstr	s15, [r7, #28]
 	    int tmpInt2 = trunc(tmpFrac * 100);
 8001186:	edd7 7a07 	vldr	s15, [r7, #28]
 800118a:	ed9f 7a60 	vldr	s14, [pc, #384]	; 800130c <main+0x3c4>
 800118e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001192:	ee17 0a90 	vmov	r0, s15
 8001196:	f7ff f9d7 	bl	8000548 <__aeabi_f2d>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	ec43 2b10 	vmov	d0, r2, r3
 80011a2:	f009 f8c7 	bl	800a334 <trunc>
 80011a6:	ec53 2b10 	vmov	r2, r3, d0
 80011aa:	4610      	mov	r0, r2
 80011ac:	4619      	mov	r1, r3
 80011ae:	f7ff fcd3 	bl	8000b58 <__aeabi_d2iz>
 80011b2:	4603      	mov	r3, r0
 80011b4:	61bb      	str	r3, [r7, #24]
 	    snprintf(str_tmp, 100, "TEMPERATURE = %d.%02d\n\r", tmpInt1, tmpInt2);
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	6a3b      	ldr	r3, [r7, #32]
 80011bc:	4a57      	ldr	r2, [pc, #348]	; (800131c <main+0x3d4>)
 80011be:	2164      	movs	r1, #100	; 0x64
 80011c0:	4857      	ldr	r0, [pc, #348]	; (8001320 <main+0x3d8>)
 80011c2:	f008 fb83 	bl	80098cc <sniprintf>
 	    HAL_UART_Transmit(&huart1, (uint8_t *)str_tmp, strlen(str_tmp), 1000);
 80011c6:	4856      	ldr	r0, [pc, #344]	; (8001320 <main+0x3d8>)
 80011c8:	f7ff f802 	bl	80001d0 <strlen>
 80011cc:	4603      	mov	r3, r0
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d4:	4952      	ldr	r1, [pc, #328]	; (8001320 <main+0x3d8>)
 80011d6:	483b      	ldr	r0, [pc, #236]	; (80012c4 <main+0x37c>)
 80011d8:	f007 faaa 	bl	8008730 <HAL_UART_Transmit>

 	    /* Process humidity value */
 	    int humInt1 = humid_value;
 80011dc:	4b43      	ldr	r3, [pc, #268]	; (80012ec <main+0x3a4>)
 80011de:	edd3 7a00 	vldr	s15, [r3]
 80011e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011e6:	ee17 3a90 	vmov	r3, s15
 80011ea:	617b      	str	r3, [r7, #20]
 	    float humFrac = humid_value - humInt1;
 80011ec:	4b3f      	ldr	r3, [pc, #252]	; (80012ec <main+0x3a4>)
 80011ee:	ed93 7a00 	vldr	s14, [r3]
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	ee07 3a90 	vmov	s15, r3
 80011f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001200:	edc7 7a04 	vstr	s15, [r7, #16]
 	    int humInt2 = trunc(humFrac * 100);
 8001204:	edd7 7a04 	vldr	s15, [r7, #16]
 8001208:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800130c <main+0x3c4>
 800120c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001210:	ee17 0a90 	vmov	r0, s15
 8001214:	f7ff f998 	bl	8000548 <__aeabi_f2d>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	ec43 2b10 	vmov	d0, r2, r3
 8001220:	f009 f888 	bl	800a334 <trunc>
 8001224:	ec53 2b10 	vmov	r2, r3, d0
 8001228:	4610      	mov	r0, r2
 800122a:	4619      	mov	r1, r3
 800122c:	f7ff fc94 	bl	8000b58 <__aeabi_d2iz>
 8001230:	4603      	mov	r3, r0
 8001232:	60fb      	str	r3, [r7, #12]
 	    snprintf(str_humid, 100, "HUMIDITY = %d.%02d\n\r", humInt1, humInt2);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	4a3a      	ldr	r2, [pc, #232]	; (8001324 <main+0x3dc>)
 800123c:	2164      	movs	r1, #100	; 0x64
 800123e:	483a      	ldr	r0, [pc, #232]	; (8001328 <main+0x3e0>)
 8001240:	f008 fb44 	bl	80098cc <sniprintf>
 	    HAL_UART_Transmit(&huart1, (uint8_t *)str_humid, strlen(str_humid), 1000);
 8001244:	4838      	ldr	r0, [pc, #224]	; (8001328 <main+0x3e0>)
 8001246:	f7fe ffc3 	bl	80001d0 <strlen>
 800124a:	4603      	mov	r3, r0
 800124c:	b29a      	uxth	r2, r3
 800124e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001252:	4935      	ldr	r1, [pc, #212]	; (8001328 <main+0x3e0>)
 8001254:	481b      	ldr	r0, [pc, #108]	; (80012c4 <main+0x37c>)
 8001256:	f007 fa6b 	bl	8008730 <HAL_UART_Transmit>

 	    int pressInt1 = press_value;
 800125a:	4b25      	ldr	r3, [pc, #148]	; (80012f0 <main+0x3a8>)
 800125c:	edd3 7a00 	vldr	s15, [r3]
 8001260:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001264:	ee17 3a90 	vmov	r3, s15
 8001268:	60bb      	str	r3, [r7, #8]
 	    float pressFrac = press_value - pressInt1;
 800126a:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <main+0x3a8>)
 800126c:	ed93 7a00 	vldr	s14, [r3]
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	ee07 3a90 	vmov	s15, r3
 8001276:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800127a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800127e:	edc7 7a01 	vstr	s15, [r7, #4]
 	    int pressInt2 = trunc(pressFrac * 100);
 8001282:	edd7 7a01 	vldr	s15, [r7, #4]
 8001286:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800130c <main+0x3c4>
 800128a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800128e:	ee17 0a90 	vmov	r0, s15
 8001292:	f7ff f959 	bl	8000548 <__aeabi_f2d>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	ec43 2b10 	vmov	d0, r2, r3
 800129e:	f009 f849 	bl	800a334 <trunc>
 80012a2:	e043      	b.n	800132c <main+0x3e4>
 80012a4:	f3af 8000 	nop.w
 80012a8:	83e0f83d 	.word	0x83e0f83d
 80012ac:	3ff83e0f 	.word	0x3ff83e0f
 80012b0:	9ad42c3d 	.word	0x9ad42c3d
 80012b4:	3ff11de6 	.word	0x3ff11de6
 80012b8:	c6a7ef9e 	.word	0xc6a7ef9e
 80012bc:	4008374b 	.word	0x4008374b
 80012c0:	20000008 	.word	0x20000008
 80012c4:	20000368 	.word	0x20000368
 80012c8:	20000038 	.word	0x20000038
 80012cc:	20000068 	.word	0x20000068
 80012d0:	2000009c 	.word	0x2000009c
 80012d4:	200000cc 	.word	0x200000cc
 80012d8:	200000f8 	.word	0x200000f8
 80012dc:	20000128 	.word	0x20000128
 80012e0:	20000158 	.word	0x20000158
 80012e4:	20000188 	.word	0x20000188
 80012e8:	20000500 	.word	0x20000500
 80012ec:	20000504 	.word	0x20000504
 80012f0:	20000508 	.word	0x20000508
 80012f4:	2000026c 	.word	0x2000026c
 80012f8:	20000518 	.word	0x20000518
 80012fc:	457ff000 	.word	0x457ff000
 8001300:	20000000 	.word	0x20000000
 8001304:	2000050c 	.word	0x2000050c
 8001308:	20000510 	.word	0x20000510
 800130c:	42c80000 	.word	0x42c80000
 8001310:	20000514 	.word	0x20000514
 8001314:	0800b138 	.word	0x0800b138
 8001318:	2000051c 	.word	0x2000051c
 800131c:	0800b154 	.word	0x0800b154
 8001320:	20000580 	.word	0x20000580
 8001324:	0800b16c 	.word	0x0800b16c
 8001328:	200005e4 	.word	0x200005e4
 800132c:	ec53 2b10 	vmov	r2, r3, d0
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f7ff fc10 	bl	8000b58 <__aeabi_d2iz>
 8001338:	4603      	mov	r3, r0
 800133a:	603b      	str	r3, [r7, #0]
 	    snprintf(str_press,100," PRESSURE = %d.%02d\n\r", pressInt1, pressInt2);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	4a20      	ldr	r2, [pc, #128]	; (80013c4 <main+0x47c>)
 8001344:	2164      	movs	r1, #100	; 0x64
 8001346:	4820      	ldr	r0, [pc, #128]	; (80013c8 <main+0x480>)
 8001348:	f008 fac0 	bl	80098cc <sniprintf>

 	    HAL_UART_Transmit(&huart1,( uint8_t *)str_tmp,sizeof(str_tmp),1000);
 800134c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001350:	2264      	movs	r2, #100	; 0x64
 8001352:	491e      	ldr	r1, [pc, #120]	; (80013cc <main+0x484>)
 8001354:	481e      	ldr	r0, [pc, #120]	; (80013d0 <main+0x488>)
 8001356:	f007 f9eb 	bl	8008730 <HAL_UART_Transmit>
 	    HAL_UART_Transmit(&huart1,( uint8_t *)str_humid,sizeof(str_humid),1000);
 800135a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135e:	2264      	movs	r2, #100	; 0x64
 8001360:	491c      	ldr	r1, [pc, #112]	; (80013d4 <main+0x48c>)
 8001362:	481b      	ldr	r0, [pc, #108]	; (80013d0 <main+0x488>)
 8001364:	f007 f9e4 	bl	8008730 <HAL_UART_Transmit>
 	    HAL_UART_Transmit(&huart1,( uint8_t *)str_press,sizeof(str_press),1000);
 8001368:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136c:	2264      	movs	r2, #100	; 0x64
 800136e:	4916      	ldr	r1, [pc, #88]	; (80013c8 <main+0x480>)
 8001370:	4817      	ldr	r0, [pc, #92]	; (80013d0 <main+0x488>)
 8001372:	f007 f9dd 	bl	8008730 <HAL_UART_Transmit>

 	    snprintf(str_transmise, 100, "%d.%02d %d.%02d %d.%02d %d.%02d\n\r", tmpInt1, tmpInt2,humInt1, humInt2,pressInt1, pressInt2, coInt1, coInt2);
 8001376:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <main+0x490>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a18      	ldr	r2, [pc, #96]	; (80013dc <main+0x494>)
 800137c:	6812      	ldr	r2, [r2, #0]
 800137e:	9206      	str	r2, [sp, #24]
 8001380:	9305      	str	r3, [sp, #20]
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	9304      	str	r3, [sp, #16]
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	9303      	str	r3, [sp, #12]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	9302      	str	r3, [sp, #8]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	9301      	str	r3, [sp, #4]
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	9300      	str	r3, [sp, #0]
 8001396:	6a3b      	ldr	r3, [r7, #32]
 8001398:	4a11      	ldr	r2, [pc, #68]	; (80013e0 <main+0x498>)
 800139a:	2164      	movs	r1, #100	; 0x64
 800139c:	4811      	ldr	r0, [pc, #68]	; (80013e4 <main+0x49c>)
 800139e:	f008 fa95 	bl	80098cc <sniprintf>


 	    HAL_UART_Transmit(&huart3, (uint8_t*)str_transmise, strlen(str_transmise), HAL_MAX_DELAY);
 80013a2:	4810      	ldr	r0, [pc, #64]	; (80013e4 <main+0x49c>)
 80013a4:	f7fe ff14 	bl	80001d0 <strlen>
 80013a8:	4603      	mov	r3, r0
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	f04f 33ff 	mov.w	r3, #4294967295
 80013b0:	490c      	ldr	r1, [pc, #48]	; (80013e4 <main+0x49c>)
 80013b2:	480d      	ldr	r0, [pc, #52]	; (80013e8 <main+0x4a0>)
 80013b4:	f007 f9bc 	bl	8008730 <HAL_UART_Transmit>
 	    HAL_Delay(1000);
 80013b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013bc:	f001 faa0 	bl	8002900 <HAL_Delay>
   {
 80013c0:	e622      	b.n	8001008 <main+0xc0>
 80013c2:	bf00      	nop
 80013c4:	0800b184 	.word	0x0800b184
 80013c8:	20000648 	.word	0x20000648
 80013cc:	20000580 	.word	0x20000580
 80013d0:	20000368 	.word	0x20000368
 80013d4:	200005e4 	.word	0x200005e4
 80013d8:	20000510 	.word	0x20000510
 80013dc:	20000514 	.word	0x20000514
 80013e0:	0800b19c 	.word	0x0800b19c
 80013e4:	200006ac 	.word	0x200006ac
 80013e8:	20000478 	.word	0x20000478

080013ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b096      	sub	sp, #88	; 0x58
 80013f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	2244      	movs	r2, #68	; 0x44
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f008 fa9a 	bl	8009934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001400:	463b      	mov	r3, r7
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	60da      	str	r2, [r3, #12]
 800140c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800140e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001412:	f005 fa79 	bl	8006908 <HAL_PWREx_ControlVoltageScaling>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800141c:	f000 fa71 	bl	8001902 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001420:	2310      	movs	r3, #16
 8001422:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001424:	2301      	movs	r3, #1
 8001426:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800142c:	2360      	movs	r3, #96	; 0x60
 800142e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001430:	2302      	movs	r3, #2
 8001432:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001434:	2301      	movs	r3, #1
 8001436:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001438:	2301      	movs	r3, #1
 800143a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800143c:	2328      	movs	r3, #40	; 0x28
 800143e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001440:	2307      	movs	r3, #7
 8001442:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001444:	2302      	movs	r3, #2
 8001446:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001448:	2302      	movs	r3, #2
 800144a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	4618      	mov	r0, r3
 8001452:	f005 fb6b 	bl	8006b2c <HAL_RCC_OscConfig>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800145c:	f000 fa51 	bl	8001902 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001460:	230f      	movs	r3, #15
 8001462:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001464:	2303      	movs	r3, #3
 8001466:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001468:	2300      	movs	r3, #0
 800146a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001470:	2300      	movs	r3, #0
 8001472:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001474:	463b      	mov	r3, r7
 8001476:	2104      	movs	r1, #4
 8001478:	4618      	mov	r0, r3
 800147a:	f005 ff33 	bl	80072e4 <HAL_RCC_ClockConfig>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001484:	f000 fa3d 	bl	8001902 <Error_Handler>
  }
}
 8001488:	bf00      	nop
 800148a:	3758      	adds	r7, #88	; 0x58
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b0a2      	sub	sp, #136	; 0x88
 8001494:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001496:	463b      	mov	r3, r7
 8001498:	2288      	movs	r2, #136	; 0x88
 800149a:	2100      	movs	r1, #0
 800149c:	4618      	mov	r0, r3
 800149e:	f008 fa49 	bl	8009934 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 80014a2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80014a6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80014a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80014ac:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80014ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80014b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80014b4:	2301      	movs	r3, #1
 80014b6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80014b8:	2301      	movs	r3, #1
 80014ba:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80014bc:	2318      	movs	r3, #24
 80014be:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80014c0:	2307      	movs	r3, #7
 80014c2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80014c4:	2302      	movs	r3, #2
 80014c6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80014c8:	2302      	movs	r3, #2
 80014ca:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80014cc:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80014d0:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d2:	463b      	mov	r3, r7
 80014d4:	4618      	mov	r0, r3
 80014d6:	f006 f95b 	bl	8007790 <HAL_RCCEx_PeriphCLKConfig>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 80014e0:	f000 fa0f 	bl	8001902 <Error_Handler>
  }
}
 80014e4:	bf00      	nop
 80014e6:	3788      	adds	r7, #136	; 0x88
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b090      	sub	sp, #64	; 0x40
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80014f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80014fe:	f107 031c 	add.w	r3, r7, #28
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]
 800150c:	611a      	str	r2, [r3, #16]
 800150e:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	611a      	str	r2, [r3, #16]
 800151e:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001520:	4b3b      	ldr	r3, [pc, #236]	; (8001610 <MX_ADC1_Init+0x124>)
 8001522:	4a3c      	ldr	r2, [pc, #240]	; (8001614 <MX_ADC1_Init+0x128>)
 8001524:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001526:	4b3a      	ldr	r3, [pc, #232]	; (8001610 <MX_ADC1_Init+0x124>)
 8001528:	2200      	movs	r2, #0
 800152a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800152c:	4b38      	ldr	r3, [pc, #224]	; (8001610 <MX_ADC1_Init+0x124>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001532:	4b37      	ldr	r3, [pc, #220]	; (8001610 <MX_ADC1_Init+0x124>)
 8001534:	2200      	movs	r2, #0
 8001536:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001538:	4b35      	ldr	r3, [pc, #212]	; (8001610 <MX_ADC1_Init+0x124>)
 800153a:	2200      	movs	r2, #0
 800153c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800153e:	4b34      	ldr	r3, [pc, #208]	; (8001610 <MX_ADC1_Init+0x124>)
 8001540:	2204      	movs	r2, #4
 8001542:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001544:	4b32      	ldr	r3, [pc, #200]	; (8001610 <MX_ADC1_Init+0x124>)
 8001546:	2200      	movs	r2, #0
 8001548:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800154a:	4b31      	ldr	r3, [pc, #196]	; (8001610 <MX_ADC1_Init+0x124>)
 800154c:	2200      	movs	r2, #0
 800154e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001550:	4b2f      	ldr	r3, [pc, #188]	; (8001610 <MX_ADC1_Init+0x124>)
 8001552:	2201      	movs	r2, #1
 8001554:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001556:	4b2e      	ldr	r3, [pc, #184]	; (8001610 <MX_ADC1_Init+0x124>)
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800155e:	4b2c      	ldr	r3, [pc, #176]	; (8001610 <MX_ADC1_Init+0x124>)
 8001560:	2200      	movs	r2, #0
 8001562:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001564:	4b2a      	ldr	r3, [pc, #168]	; (8001610 <MX_ADC1_Init+0x124>)
 8001566:	2200      	movs	r2, #0
 8001568:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800156a:	4b29      	ldr	r3, [pc, #164]	; (8001610 <MX_ADC1_Init+0x124>)
 800156c:	2200      	movs	r2, #0
 800156e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001572:	4b27      	ldr	r3, [pc, #156]	; (8001610 <MX_ADC1_Init+0x124>)
 8001574:	2200      	movs	r2, #0
 8001576:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001578:	4b25      	ldr	r3, [pc, #148]	; (8001610 <MX_ADC1_Init+0x124>)
 800157a:	2200      	movs	r2, #0
 800157c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001580:	4823      	ldr	r0, [pc, #140]	; (8001610 <MX_ADC1_Init+0x124>)
 8001582:	f001 fcaf 	bl	8002ee4 <HAL_ADC_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 800158c:	f000 f9b9 	bl	8001902 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001590:	2300      	movs	r3, #0
 8001592:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001594:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001598:	4619      	mov	r1, r3
 800159a:	481d      	ldr	r0, [pc, #116]	; (8001610 <MX_ADC1_Init+0x124>)
 800159c:	f003 f8a6 	bl	80046ec <HAL_ADCEx_MultiModeConfigChannel>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 80015a6:	f000 f9ac 	bl	8001902 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 80015aa:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <MX_ADC1_Init+0x12c>)
 80015ac:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80015ae:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 80015b2:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.Channel = ADC_CHANNEL_1;
 80015b4:	4b19      	ldr	r3, [pc, #100]	; (800161c <MX_ADC1_Init+0x130>)
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.ITMode = DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.HighThreshold = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.LowThreshold = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80015c6:	f107 031c 	add.w	r3, r7, #28
 80015ca:	4619      	mov	r1, r3
 80015cc:	4810      	ldr	r0, [pc, #64]	; (8001610 <MX_ADC1_Init+0x124>)
 80015ce:	f002 fda3 	bl	8004118 <HAL_ADC_AnalogWDGConfig>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 80015d8:	f000 f993 	bl	8001902 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <MX_ADC1_Init+0x130>)
 80015de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015e0:	2306      	movs	r3, #6
 80015e2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80015e8:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <MX_ADC1_Init+0x134>)
 80015ea:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015ec:	2304      	movs	r3, #4
 80015ee:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	4619      	mov	r1, r3
 80015f8:	4805      	ldr	r0, [pc, #20]	; (8001610 <MX_ADC1_Init+0x124>)
 80015fa:	f002 f99b 	bl	8003934 <HAL_ADC_ConfigChannel>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001604:	f000 f97d 	bl	8001902 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001608:	bf00      	nop
 800160a:	3740      	adds	r7, #64	; 0x40
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	2000026c 	.word	0x2000026c
 8001614:	50040000 	.word	0x50040000
 8001618:	7dc00000 	.word	0x7dc00000
 800161c:	04300002 	.word	0x04300002
 8001620:	407f0000 	.word	0x407f0000

08001624 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001628:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <MX_I2C2_Init+0x74>)
 800162a:	4a1c      	ldr	r2, [pc, #112]	; (800169c <MX_I2C2_Init+0x78>)
 800162c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800162e:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <MX_I2C2_Init+0x74>)
 8001630:	4a1b      	ldr	r2, [pc, #108]	; (80016a0 <MX_I2C2_Init+0x7c>)
 8001632:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001634:	4b18      	ldr	r3, [pc, #96]	; (8001698 <MX_I2C2_Init+0x74>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800163a:	4b17      	ldr	r3, [pc, #92]	; (8001698 <MX_I2C2_Init+0x74>)
 800163c:	2201      	movs	r2, #1
 800163e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001640:	4b15      	ldr	r3, [pc, #84]	; (8001698 <MX_I2C2_Init+0x74>)
 8001642:	2200      	movs	r2, #0
 8001644:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001646:	4b14      	ldr	r3, [pc, #80]	; (8001698 <MX_I2C2_Init+0x74>)
 8001648:	2200      	movs	r2, #0
 800164a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800164c:	4b12      	ldr	r3, [pc, #72]	; (8001698 <MX_I2C2_Init+0x74>)
 800164e:	2200      	movs	r2, #0
 8001650:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001652:	4b11      	ldr	r3, [pc, #68]	; (8001698 <MX_I2C2_Init+0x74>)
 8001654:	2200      	movs	r2, #0
 8001656:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001658:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <MX_I2C2_Init+0x74>)
 800165a:	2200      	movs	r2, #0
 800165c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800165e:	480e      	ldr	r0, [pc, #56]	; (8001698 <MX_I2C2_Init+0x74>)
 8001660:	f003 fd34 	bl	80050cc <HAL_I2C_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800166a:	f000 f94a 	bl	8001902 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800166e:	2100      	movs	r1, #0
 8001670:	4809      	ldr	r0, [pc, #36]	; (8001698 <MX_I2C2_Init+0x74>)
 8001672:	f005 f8a3 	bl	80067bc <HAL_I2CEx_ConfigAnalogFilter>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800167c:	f000 f941 	bl	8001902 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001680:	2100      	movs	r1, #0
 8001682:	4805      	ldr	r0, [pc, #20]	; (8001698 <MX_I2C2_Init+0x74>)
 8001684:	f005 f8e5 	bl	8006852 <HAL_I2CEx_ConfigDigitalFilter>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800168e:	f000 f938 	bl	8001902 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200002d0 	.word	0x200002d0
 800169c:	40005800 	.word	0x40005800
 80016a0:	10909cec 	.word	0x10909cec

080016a4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80016a8:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <MX_QUADSPI_Init+0x44>)
 80016aa:	4a10      	ldr	r2, [pc, #64]	; (80016ec <MX_QUADSPI_Init+0x48>)
 80016ac:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80016ae:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <MX_QUADSPI_Init+0x44>)
 80016b0:	22ff      	movs	r2, #255	; 0xff
 80016b2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <MX_QUADSPI_Init+0x44>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80016ba:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <MX_QUADSPI_Init+0x44>)
 80016bc:	2200      	movs	r2, #0
 80016be:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80016c0:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <MX_QUADSPI_Init+0x44>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80016c6:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <MX_QUADSPI_Init+0x44>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <MX_QUADSPI_Init+0x44>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80016d2:	4805      	ldr	r0, [pc, #20]	; (80016e8 <MX_QUADSPI_Init+0x44>)
 80016d4:	f005 f96e 	bl	80069b4 <HAL_QSPI_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80016de:	f000 f910 	bl	8001902 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000324 	.word	0x20000324
 80016ec:	a0001000 	.word	0xa0001000

080016f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016f4:	4b14      	ldr	r3, [pc, #80]	; (8001748 <MX_USART1_UART_Init+0x58>)
 80016f6:	4a15      	ldr	r2, [pc, #84]	; (800174c <MX_USART1_UART_Init+0x5c>)
 80016f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016fa:	4b13      	ldr	r3, [pc, #76]	; (8001748 <MX_USART1_UART_Init+0x58>)
 80016fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001700:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <MX_USART1_UART_Init+0x58>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <MX_USART1_UART_Init+0x58>)
 800170a:	2200      	movs	r2, #0
 800170c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <MX_USART1_UART_Init+0x58>)
 8001710:	2200      	movs	r2, #0
 8001712:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <MX_USART1_UART_Init+0x58>)
 8001716:	220c      	movs	r2, #12
 8001718:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <MX_USART1_UART_Init+0x58>)
 800171c:	2200      	movs	r2, #0
 800171e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001720:	4b09      	ldr	r3, [pc, #36]	; (8001748 <MX_USART1_UART_Init+0x58>)
 8001722:	2200      	movs	r2, #0
 8001724:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <MX_USART1_UART_Init+0x58>)
 8001728:	2200      	movs	r2, #0
 800172a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <MX_USART1_UART_Init+0x58>)
 800172e:	2200      	movs	r2, #0
 8001730:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001732:	4805      	ldr	r0, [pc, #20]	; (8001748 <MX_USART1_UART_Init+0x58>)
 8001734:	f006 ffae 	bl	8008694 <HAL_UART_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800173e:	f000 f8e0 	bl	8001902 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000368 	.word	0x20000368
 800174c:	40013800 	.word	0x40013800

08001750 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001754:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <MX_USART2_UART_Init+0x58>)
 8001756:	4a15      	ldr	r2, [pc, #84]	; (80017ac <MX_USART2_UART_Init+0x5c>)
 8001758:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800175a:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <MX_USART2_UART_Init+0x58>)
 800175c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001760:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001762:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <MX_USART2_UART_Init+0x58>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001768:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <MX_USART2_UART_Init+0x58>)
 800176a:	2200      	movs	r2, #0
 800176c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800176e:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <MX_USART2_UART_Init+0x58>)
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <MX_USART2_UART_Init+0x58>)
 8001776:	220c      	movs	r2, #12
 8001778:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800177a:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <MX_USART2_UART_Init+0x58>)
 800177c:	2200      	movs	r2, #0
 800177e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001780:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <MX_USART2_UART_Init+0x58>)
 8001782:	2200      	movs	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001786:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <MX_USART2_UART_Init+0x58>)
 8001788:	2200      	movs	r2, #0
 800178a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <MX_USART2_UART_Init+0x58>)
 800178e:	2200      	movs	r2, #0
 8001790:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001792:	4805      	ldr	r0, [pc, #20]	; (80017a8 <MX_USART2_UART_Init+0x58>)
 8001794:	f006 ff7e 	bl	8008694 <HAL_UART_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800179e:	f000 f8b0 	bl	8001902 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	200003f0 	.word	0x200003f0
 80017ac:	40004400 	.word	0x40004400

080017b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017b4:	4b14      	ldr	r3, [pc, #80]	; (8001808 <MX_USART3_UART_Init+0x58>)
 80017b6:	4a15      	ldr	r2, [pc, #84]	; (800180c <MX_USART3_UART_Init+0x5c>)
 80017b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017ba:	4b13      	ldr	r3, [pc, #76]	; (8001808 <MX_USART3_UART_Init+0x58>)
 80017bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <MX_USART3_UART_Init+0x58>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017c8:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <MX_USART3_UART_Init+0x58>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <MX_USART3_UART_Init+0x58>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <MX_USART3_UART_Init+0x58>)
 80017d6:	220c      	movs	r2, #12
 80017d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <MX_USART3_UART_Init+0x58>)
 80017dc:	2200      	movs	r2, #0
 80017de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e0:	4b09      	ldr	r3, [pc, #36]	; (8001808 <MX_USART3_UART_Init+0x58>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017e6:	4b08      	ldr	r3, [pc, #32]	; (8001808 <MX_USART3_UART_Init+0x58>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <MX_USART3_UART_Init+0x58>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017f2:	4805      	ldr	r0, [pc, #20]	; (8001808 <MX_USART3_UART_Init+0x58>)
 80017f4:	f006 ff4e 	bl	8008694 <HAL_UART_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80017fe:	f000 f880 	bl	8001902 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000478 	.word	0x20000478
 800180c:	40004800 	.word	0x40004800

08001810 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
	...

08001820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	; 0x28
 8001824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	60da      	str	r2, [r3, #12]
 8001834:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001836:	4b2a      	ldr	r3, [pc, #168]	; (80018e0 <MX_GPIO_Init+0xc0>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183a:	4a29      	ldr	r2, [pc, #164]	; (80018e0 <MX_GPIO_Init+0xc0>)
 800183c:	f043 0304 	orr.w	r3, r3, #4
 8001840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001842:	4b27      	ldr	r3, [pc, #156]	; (80018e0 <MX_GPIO_Init+0xc0>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	4b24      	ldr	r3, [pc, #144]	; (80018e0 <MX_GPIO_Init+0xc0>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001852:	4a23      	ldr	r2, [pc, #140]	; (80018e0 <MX_GPIO_Init+0xc0>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800185a:	4b21      	ldr	r3, [pc, #132]	; (80018e0 <MX_GPIO_Init+0xc0>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001866:	4b1e      	ldr	r3, [pc, #120]	; (80018e0 <MX_GPIO_Init+0xc0>)
 8001868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186a:	4a1d      	ldr	r2, [pc, #116]	; (80018e0 <MX_GPIO_Init+0xc0>)
 800186c:	f043 0302 	orr.w	r3, r3, #2
 8001870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001872:	4b1b      	ldr	r3, [pc, #108]	; (80018e0 <MX_GPIO_Init+0xc0>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800187e:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <MX_GPIO_Init+0xc0>)
 8001880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001882:	4a17      	ldr	r2, [pc, #92]	; (80018e0 <MX_GPIO_Init+0xc0>)
 8001884:	f043 0310 	orr.w	r3, r3, #16
 8001888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <MX_GPIO_Init+0xc0>)
 800188c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188e:	f003 0310 	and.w	r3, r3, #16
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001896:	f44f 7300 	mov.w	r3, #512	; 0x200
 800189a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800189c:	2300      	movs	r3, #0
 800189e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	4619      	mov	r1, r3
 80018aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ae:	f003 f96f 	bl	8004b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80018b2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80018b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b8:	2302      	movs	r3, #2
 80018ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c0:	2303      	movs	r3, #3
 80018c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018c4:	230a      	movs	r3, #10
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	4619      	mov	r1, r3
 80018ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d2:	f003 f95d 	bl	8004b90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018d6:	bf00      	nop
 80018d8:	3728      	adds	r7, #40	; 0x28
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40021000 	.word	0x40021000

080018e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018f4:	d101      	bne.n	80018fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018f6:	f000 ffe3 	bl	80028c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001906:	b672      	cpsid	i
}
 8001908:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800190a:	e7fe      	b.n	800190a <Error_Handler+0x8>

0800190c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001912:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <HAL_MspInit+0x44>)
 8001914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001916:	4a0e      	ldr	r2, [pc, #56]	; (8001950 <HAL_MspInit+0x44>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6613      	str	r3, [r2, #96]	; 0x60
 800191e:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <HAL_MspInit+0x44>)
 8001920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	607b      	str	r3, [r7, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800192a:	4b09      	ldr	r3, [pc, #36]	; (8001950 <HAL_MspInit+0x44>)
 800192c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192e:	4a08      	ldr	r2, [pc, #32]	; (8001950 <HAL_MspInit+0x44>)
 8001930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001934:	6593      	str	r3, [r2, #88]	; 0x58
 8001936:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_MspInit+0x44>)
 8001938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	40021000 	.word	0x40021000

08001954 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08a      	sub	sp, #40	; 0x28
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a19      	ldr	r2, [pc, #100]	; (80019d8 <HAL_ADC_MspInit+0x84>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d12b      	bne.n	80019ce <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001976:	4b19      	ldr	r3, [pc, #100]	; (80019dc <HAL_ADC_MspInit+0x88>)
 8001978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197a:	4a18      	ldr	r2, [pc, #96]	; (80019dc <HAL_ADC_MspInit+0x88>)
 800197c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001982:	4b16      	ldr	r3, [pc, #88]	; (80019dc <HAL_ADC_MspInit+0x88>)
 8001984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001986:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800198e:	4b13      	ldr	r3, [pc, #76]	; (80019dc <HAL_ADC_MspInit+0x88>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	4a12      	ldr	r2, [pc, #72]	; (80019dc <HAL_ADC_MspInit+0x88>)
 8001994:	f043 0304 	orr.w	r3, r3, #4
 8001998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <HAL_ADC_MspInit+0x88>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199e:	f003 0304 	and.w	r3, r3, #4
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019a6:	2303      	movs	r3, #3
 80019a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80019aa:	230b      	movs	r3, #11
 80019ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	4619      	mov	r1, r3
 80019b8:	4809      	ldr	r0, [pc, #36]	; (80019e0 <HAL_ADC_MspInit+0x8c>)
 80019ba:	f003 f8e9 	bl	8004b90 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80019be:	2200      	movs	r2, #0
 80019c0:	2100      	movs	r1, #0
 80019c2:	2012      	movs	r0, #18
 80019c4:	f003 f81e 	bl	8004a04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80019c8:	2012      	movs	r0, #18
 80019ca:	f003 f837 	bl	8004a3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019ce:	bf00      	nop
 80019d0:	3728      	adds	r7, #40	; 0x28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	50040000 	.word	0x50040000
 80019dc:	40021000 	.word	0x40021000
 80019e0:	48000800 	.word	0x48000800

080019e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b0ac      	sub	sp, #176	; 0xb0
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	2288      	movs	r2, #136	; 0x88
 8001a02:	2100      	movs	r1, #0
 8001a04:	4618      	mov	r0, r3
 8001a06:	f007 ff95 	bl	8009934 <memset>
  if(hi2c->Instance==I2C2)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a25      	ldr	r2, [pc, #148]	; (8001aa4 <HAL_I2C_MspInit+0xc0>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d143      	bne.n	8001a9c <HAL_I2C_MspInit+0xb8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001a14:	2380      	movs	r3, #128	; 0x80
 8001a16:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	4618      	mov	r0, r3
 8001a22:	f005 feb5 	bl	8007790 <HAL_RCCEx_PeriphCLKConfig>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001a2c:	f7ff ff69 	bl	8001902 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a30:	4b1d      	ldr	r3, [pc, #116]	; (8001aa8 <HAL_I2C_MspInit+0xc4>)
 8001a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a34:	4a1c      	ldr	r2, [pc, #112]	; (8001aa8 <HAL_I2C_MspInit+0xc4>)
 8001a36:	f043 0302 	orr.w	r3, r3, #2
 8001a3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a3c:	4b1a      	ldr	r3, [pc, #104]	; (8001aa8 <HAL_I2C_MspInit+0xc4>)
 8001a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a48:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a50:	2312      	movs	r3, #18
 8001a52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a62:	2304      	movs	r3, #4
 8001a64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a68:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	480f      	ldr	r0, [pc, #60]	; (8001aac <HAL_I2C_MspInit+0xc8>)
 8001a70:	f003 f88e 	bl	8004b90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <HAL_I2C_MspInit+0xc4>)
 8001a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a78:	4a0b      	ldr	r2, [pc, #44]	; (8001aa8 <HAL_I2C_MspInit+0xc4>)
 8001a7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a7e:	6593      	str	r3, [r2, #88]	; 0x58
 8001a80:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <HAL_I2C_MspInit+0xc4>)
 8001a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2100      	movs	r1, #0
 8001a90:	2022      	movs	r0, #34	; 0x22
 8001a92:	f002 ffb7 	bl	8004a04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001a96:	2022      	movs	r0, #34	; 0x22
 8001a98:	f002 ffd0 	bl	8004a3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a9c:	bf00      	nop
 8001a9e:	37b0      	adds	r7, #176	; 0xb0
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40005800 	.word	0x40005800
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	48000400 	.word	0x48000400

08001ab0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a0c      	ldr	r2, [pc, #48]	; (8001af0 <HAL_I2C_MspDeInit+0x40>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d112      	bne.n	8001ae8 <HAL_I2C_MspDeInit+0x38>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001ac2:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <HAL_I2C_MspDeInit+0x44>)
 8001ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac6:	4a0b      	ldr	r2, [pc, #44]	; (8001af4 <HAL_I2C_MspDeInit+0x44>)
 8001ac8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001acc:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8001ace:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ad2:	4809      	ldr	r0, [pc, #36]	; (8001af8 <HAL_I2C_MspDeInit+0x48>)
 8001ad4:	f003 fa06 	bl	8004ee4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8001ad8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001adc:	4806      	ldr	r0, [pc, #24]	; (8001af8 <HAL_I2C_MspDeInit+0x48>)
 8001ade:	f003 fa01 	bl	8004ee4 <HAL_GPIO_DeInit>

    /* I2C2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8001ae2:	2022      	movs	r0, #34	; 0x22
 8001ae4:	f002 ffb8 	bl	8004a58 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40005800 	.word	0x40005800
 8001af4:	40021000 	.word	0x40021000
 8001af8:	48000400 	.word	0x48000400

08001afc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	; 0x28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a25      	ldr	r2, [pc, #148]	; (8001bb0 <HAL_QSPI_MspInit+0xb4>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d144      	bne.n	8001ba8 <HAL_QSPI_MspInit+0xac>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001b1e:	4b25      	ldr	r3, [pc, #148]	; (8001bb4 <HAL_QSPI_MspInit+0xb8>)
 8001b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b22:	4a24      	ldr	r2, [pc, #144]	; (8001bb4 <HAL_QSPI_MspInit+0xb8>)
 8001b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b28:	6513      	str	r3, [r2, #80]	; 0x50
 8001b2a:	4b22      	ldr	r3, [pc, #136]	; (8001bb4 <HAL_QSPI_MspInit+0xb8>)
 8001b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b36:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <HAL_QSPI_MspInit+0xb8>)
 8001b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3a:	4a1e      	ldr	r2, [pc, #120]	; (8001bb4 <HAL_QSPI_MspInit+0xb8>)
 8001b3c:	f043 0302 	orr.w	r3, r3, #2
 8001b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b42:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <HAL_QSPI_MspInit+0xb8>)
 8001b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b4e:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <HAL_QSPI_MspInit+0xb8>)
 8001b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b52:	4a18      	ldr	r2, [pc, #96]	; (8001bb4 <HAL_QSPI_MspInit+0xb8>)
 8001b54:	f043 0310 	orr.w	r3, r3, #16
 8001b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b5a:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <HAL_QSPI_MspInit+0xb8>)
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5e:	f003 0310 	and.w	r3, r3, #16
 8001b62:	60bb      	str	r3, [r7, #8]
 8001b64:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> QUADSPI_BK1_IO1
    PB1     ------> QUADSPI_BK1_IO0
    PE10     ------> QUADSPI_CLK
    PE11     ------> QUADSPI_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b66:	2303      	movs	r3, #3
 8001b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b72:	2303      	movs	r3, #3
 8001b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001b76:	230a      	movs	r3, #10
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7a:	f107 0314 	add.w	r3, r7, #20
 8001b7e:	4619      	mov	r1, r3
 8001b80:	480d      	ldr	r0, [pc, #52]	; (8001bb8 <HAL_QSPI_MspInit+0xbc>)
 8001b82:	f003 f805 	bl	8004b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b86:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b94:	2303      	movs	r3, #3
 8001b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001b98:	230a      	movs	r3, #10
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4806      	ldr	r0, [pc, #24]	; (8001bbc <HAL_QSPI_MspInit+0xc0>)
 8001ba4:	f002 fff4 	bl	8004b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001ba8:	bf00      	nop
 8001baa:	3728      	adds	r7, #40	; 0x28
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	a0001000 	.word	0xa0001000
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	48000400 	.word	0x48000400
 8001bbc:	48001000 	.word	0x48001000

08001bc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b0b0      	sub	sp, #192	; 0xc0
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bdc:	2288      	movs	r2, #136	; 0x88
 8001bde:	2100      	movs	r1, #0
 8001be0:	4618      	mov	r0, r3
 8001be2:	f007 fea7 	bl	8009934 <memset>
  if(huart->Instance==USART1)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a6a      	ldr	r2, [pc, #424]	; (8001d94 <HAL_UART_MspInit+0x1d4>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d143      	bne.n	8001c78 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f005 fdc7 	bl	8007790 <HAL_RCCEx_PeriphCLKConfig>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c08:	f7ff fe7b 	bl	8001902 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c0c:	4b62      	ldr	r3, [pc, #392]	; (8001d98 <HAL_UART_MspInit+0x1d8>)
 8001c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c10:	4a61      	ldr	r2, [pc, #388]	; (8001d98 <HAL_UART_MspInit+0x1d8>)
 8001c12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c16:	6613      	str	r3, [r2, #96]	; 0x60
 8001c18:	4b5f      	ldr	r3, [pc, #380]	; (8001d98 <HAL_UART_MspInit+0x1d8>)
 8001c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c20:	623b      	str	r3, [r7, #32]
 8001c22:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c24:	4b5c      	ldr	r3, [pc, #368]	; (8001d98 <HAL_UART_MspInit+0x1d8>)
 8001c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c28:	4a5b      	ldr	r2, [pc, #364]	; (8001d98 <HAL_UART_MspInit+0x1d8>)
 8001c2a:	f043 0302 	orr.w	r3, r3, #2
 8001c2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c30:	4b59      	ldr	r3, [pc, #356]	; (8001d98 <HAL_UART_MspInit+0x1d8>)
 8001c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	61fb      	str	r3, [r7, #28]
 8001c3a:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c3c:	23c0      	movs	r3, #192	; 0xc0
 8001c3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c42:	2302      	movs	r3, #2
 8001c44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c54:	2307      	movs	r3, #7
 8001c56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c5e:	4619      	mov	r1, r3
 8001c60:	484e      	ldr	r0, [pc, #312]	; (8001d9c <HAL_UART_MspInit+0x1dc>)
 8001c62:	f002 ff95 	bl	8004b90 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2100      	movs	r1, #0
 8001c6a:	2025      	movs	r0, #37	; 0x25
 8001c6c:	f002 feca 	bl	8004a04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c70:	2025      	movs	r0, #37	; 0x25
 8001c72:	f002 fee3 	bl	8004a3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c76:	e089      	b.n	8001d8c <HAL_UART_MspInit+0x1cc>
  else if(huart->Instance==USART2)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a48      	ldr	r2, [pc, #288]	; (8001da0 <HAL_UART_MspInit+0x1e0>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d13c      	bne.n	8001cfc <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c82:	2302      	movs	r3, #2
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c86:	2300      	movs	r3, #0
 8001c88:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f005 fd7e 	bl	8007790 <HAL_RCCEx_PeriphCLKConfig>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <HAL_UART_MspInit+0xde>
      Error_Handler();
 8001c9a:	f7ff fe32 	bl	8001902 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c9e:	4b3e      	ldr	r3, [pc, #248]	; (8001d98 <HAL_UART_MspInit+0x1d8>)
 8001ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca2:	4a3d      	ldr	r2, [pc, #244]	; (8001d98 <HAL_UART_MspInit+0x1d8>)
 8001ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca8:	6593      	str	r3, [r2, #88]	; 0x58
 8001caa:	4b3b      	ldr	r3, [pc, #236]	; (8001d98 <HAL_UART_MspInit+0x1d8>)
 8001cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb2:	61bb      	str	r3, [r7, #24]
 8001cb4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb6:	4b38      	ldr	r3, [pc, #224]	; (8001d98 <HAL_UART_MspInit+0x1d8>)
 8001cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cba:	4a37      	ldr	r2, [pc, #220]	; (8001d98 <HAL_UART_MspInit+0x1d8>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cc2:	4b35      	ldr	r3, [pc, #212]	; (8001d98 <HAL_UART_MspInit+0x1d8>)
 8001cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001cce:	230c      	movs	r3, #12
 8001cd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ce6:	2307      	movs	r3, #7
 8001ce8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cf6:	f002 ff4b 	bl	8004b90 <HAL_GPIO_Init>
}
 8001cfa:	e047      	b.n	8001d8c <HAL_UART_MspInit+0x1cc>
  else if(huart->Instance==USART3)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a28      	ldr	r2, [pc, #160]	; (8001da4 <HAL_UART_MspInit+0x1e4>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d142      	bne.n	8001d8c <HAL_UART_MspInit+0x1cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d06:	2304      	movs	r3, #4
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d12:	4618      	mov	r0, r3
 8001d14:	f005 fd3c 	bl	8007790 <HAL_RCCEx_PeriphCLKConfig>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_UART_MspInit+0x162>
      Error_Handler();
 8001d1e:	f7ff fdf0 	bl	8001902 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d22:	4b1d      	ldr	r3, [pc, #116]	; (8001d98 <HAL_UART_MspInit+0x1d8>)
 8001d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d26:	4a1c      	ldr	r2, [pc, #112]	; (8001d98 <HAL_UART_MspInit+0x1d8>)
 8001d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d2c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d2e:	4b1a      	ldr	r3, [pc, #104]	; (8001d98 <HAL_UART_MspInit+0x1d8>)
 8001d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d3a:	4b17      	ldr	r3, [pc, #92]	; (8001d98 <HAL_UART_MspInit+0x1d8>)
 8001d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3e:	4a16      	ldr	r2, [pc, #88]	; (8001d98 <HAL_UART_MspInit+0x1d8>)
 8001d40:	f043 0304 	orr.w	r3, r3, #4
 8001d44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d46:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <HAL_UART_MspInit+0x1d8>)
 8001d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4a:	f003 0304 	and.w	r3, r3, #4
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001d52:	2330      	movs	r3, #48	; 0x30
 8001d54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d64:	2303      	movs	r3, #3
 8001d66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d6a:	2307      	movs	r3, #7
 8001d6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d70:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d74:	4619      	mov	r1, r3
 8001d76:	480c      	ldr	r0, [pc, #48]	; (8001da8 <HAL_UART_MspInit+0x1e8>)
 8001d78:	f002 ff0a 	bl	8004b90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2100      	movs	r1, #0
 8001d80:	2027      	movs	r0, #39	; 0x27
 8001d82:	f002 fe3f 	bl	8004a04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d86:	2027      	movs	r0, #39	; 0x27
 8001d88:	f002 fe58 	bl	8004a3c <HAL_NVIC_EnableIRQ>
}
 8001d8c:	bf00      	nop
 8001d8e:	37c0      	adds	r7, #192	; 0xc0
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40013800 	.word	0x40013800
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	48000400 	.word	0x48000400
 8001da0:	40004400 	.word	0x40004400
 8001da4:	40004800 	.word	0x40004800
 8001da8:	48000800 	.word	0x48000800

08001dac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08e      	sub	sp, #56	; 0x38
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001db4:	2300      	movs	r3, #0
 8001db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001dba:	4b34      	ldr	r3, [pc, #208]	; (8001e8c <HAL_InitTick+0xe0>)
 8001dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbe:	4a33      	ldr	r2, [pc, #204]	; (8001e8c <HAL_InitTick+0xe0>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	6593      	str	r3, [r2, #88]	; 0x58
 8001dc6:	4b31      	ldr	r3, [pc, #196]	; (8001e8c <HAL_InitTick+0xe0>)
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001dd2:	f107 0210 	add.w	r2, r7, #16
 8001dd6:	f107 0314 	add.w	r3, r7, #20
 8001dda:	4611      	mov	r1, r2
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f005 fc45 	bl	800766c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001de2:	6a3b      	ldr	r3, [r7, #32]
 8001de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d103      	bne.n	8001df4 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001dec:	f005 fc12 	bl	8007614 <HAL_RCC_GetPCLK1Freq>
 8001df0:	6378      	str	r0, [r7, #52]	; 0x34
 8001df2:	e004      	b.n	8001dfe <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001df4:	f005 fc0e 	bl	8007614 <HAL_RCC_GetPCLK1Freq>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e00:	4a23      	ldr	r2, [pc, #140]	; (8001e90 <HAL_InitTick+0xe4>)
 8001e02:	fba2 2303 	umull	r2, r3, r2, r3
 8001e06:	0c9b      	lsrs	r3, r3, #18
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001e0c:	4b21      	ldr	r3, [pc, #132]	; (8001e94 <HAL_InitTick+0xe8>)
 8001e0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e12:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001e14:	4b1f      	ldr	r3, [pc, #124]	; (8001e94 <HAL_InitTick+0xe8>)
 8001e16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e1a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001e1c:	4a1d      	ldr	r2, [pc, #116]	; (8001e94 <HAL_InitTick+0xe8>)
 8001e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e20:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001e22:	4b1c      	ldr	r3, [pc, #112]	; (8001e94 <HAL_InitTick+0xe8>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e28:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <HAL_InitTick+0xe8>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e2e:	4b19      	ldr	r3, [pc, #100]	; (8001e94 <HAL_InitTick+0xe8>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001e34:	4817      	ldr	r0, [pc, #92]	; (8001e94 <HAL_InitTick+0xe8>)
 8001e36:	f006 f967 	bl	8008108 <HAL_TIM_Base_Init>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001e40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d11b      	bne.n	8001e80 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001e48:	4812      	ldr	r0, [pc, #72]	; (8001e94 <HAL_InitTick+0xe8>)
 8001e4a:	f006 f9bf 	bl	80081cc <HAL_TIM_Base_Start_IT>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001e54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d111      	bne.n	8001e80 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e5c:	201c      	movs	r0, #28
 8001e5e:	f002 fded 	bl	8004a3c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b0f      	cmp	r3, #15
 8001e66:	d808      	bhi.n	8001e7a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	201c      	movs	r0, #28
 8001e6e:	f002 fdc9 	bl	8004a04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e72:	4a09      	ldr	r2, [pc, #36]	; (8001e98 <HAL_InitTick+0xec>)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	e002      	b.n	8001e80 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001e80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3738      	adds	r7, #56	; 0x38
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	431bde83 	.word	0x431bde83
 8001e94:	20000710 	.word	0x20000710
 8001e98:	200001e4 	.word	0x200001e4

08001e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ea0:	e7fe      	b.n	8001ea0 <NMI_Handler+0x4>

08001ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ea6:	e7fe      	b.n	8001ea6 <HardFault_Handler+0x4>

08001ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eac:	e7fe      	b.n	8001eac <MemManage_Handler+0x4>

08001eae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eb2:	e7fe      	b.n	8001eb2 <BusFault_Handler+0x4>

08001eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eb8:	e7fe      	b.n	8001eb8 <UsageFault_Handler+0x4>

08001eba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
	...

08001ef4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001ef8:	4802      	ldr	r0, [pc, #8]	; (8001f04 <ADC1_2_IRQHandler+0x10>)
 8001efa:	f001 fae3 	bl	80034c4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	2000026c 	.word	0x2000026c

08001f08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f0c:	4802      	ldr	r0, [pc, #8]	; (8001f18 <TIM2_IRQHandler+0x10>)
 8001f0e:	f006 f9cd 	bl	80082ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000710 	.word	0x20000710

08001f1c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001f20:	4802      	ldr	r0, [pc, #8]	; (8001f2c <I2C2_ER_IRQHandler+0x10>)
 8001f22:	f003 fbcb 	bl	80056bc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	200002d0 	.word	0x200002d0

08001f30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f34:	4802      	ldr	r0, [pc, #8]	; (8001f40 <USART1_IRQHandler+0x10>)
 8001f36:	f006 fc85 	bl	8008844 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000368 	.word	0x20000368

08001f44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001f48:	4802      	ldr	r0, [pc, #8]	; (8001f54 <USART3_IRQHandler+0x10>)
 8001f4a:	f006 fc7b 	bl	8008844 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000478 	.word	0x20000478

08001f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f60:	4a14      	ldr	r2, [pc, #80]	; (8001fb4 <_sbrk+0x5c>)
 8001f62:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <_sbrk+0x60>)
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f6c:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <_sbrk+0x64>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d102      	bne.n	8001f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <_sbrk+0x64>)
 8001f76:	4a12      	ldr	r2, [pc, #72]	; (8001fc0 <_sbrk+0x68>)
 8001f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <_sbrk+0x64>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d207      	bcs.n	8001f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f88:	f007 fcdc 	bl	8009944 <__errno>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	220c      	movs	r2, #12
 8001f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f92:	f04f 33ff 	mov.w	r3, #4294967295
 8001f96:	e009      	b.n	8001fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f98:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <_sbrk+0x64>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f9e:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <_sbrk+0x64>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	4a05      	ldr	r2, [pc, #20]	; (8001fbc <_sbrk+0x64>)
 8001fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001faa:	68fb      	ldr	r3, [r7, #12]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20018000 	.word	0x20018000
 8001fb8:	00000400 	.word	0x00000400
 8001fbc:	2000075c 	.word	0x2000075c
 8001fc0:	20000910 	.word	0x20000910

08001fc4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001fc8:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <SystemInit+0x20>)
 8001fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fce:	4a05      	ldr	r2, [pc, #20]	; (8001fe4 <SystemInit+0x20>)
 8001fd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001fe8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002020 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fec:	f7ff ffea 	bl	8001fc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ff0:	480c      	ldr	r0, [pc, #48]	; (8002024 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ff2:	490d      	ldr	r1, [pc, #52]	; (8002028 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ff4:	4a0d      	ldr	r2, [pc, #52]	; (800202c <LoopForever+0xe>)
  movs r3, #0
 8001ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ff8:	e002      	b.n	8002000 <LoopCopyDataInit>

08001ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ffe:	3304      	adds	r3, #4

08002000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002004:	d3f9      	bcc.n	8001ffa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002006:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002008:	4c0a      	ldr	r4, [pc, #40]	; (8002034 <LoopForever+0x16>)
  movs r3, #0
 800200a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800200c:	e001      	b.n	8002012 <LoopFillZerobss>

0800200e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800200e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002010:	3204      	adds	r2, #4

08002012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002014:	d3fb      	bcc.n	800200e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002016:	f007 fc9b 	bl	8009950 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800201a:	f7fe ff95 	bl	8000f48 <main>

0800201e <LoopForever>:

LoopForever:
    b LoopForever
 800201e:	e7fe      	b.n	800201e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002020:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002028:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 800202c:	0800b280 	.word	0x0800b280
  ldr r2, =_sbss
 8002030:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8002034:	2000090c 	.word	0x2000090c

08002038 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002038:	e7fe      	b.n	8002038 <ADC3_IRQHandler>
	...

0800203c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08a      	sub	sp, #40	; 0x28
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002044:	4b27      	ldr	r3, [pc, #156]	; (80020e4 <I2Cx_MspInit+0xa8>)
 8002046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002048:	4a26      	ldr	r2, [pc, #152]	; (80020e4 <I2Cx_MspInit+0xa8>)
 800204a:	f043 0302 	orr.w	r3, r3, #2
 800204e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002050:	4b24      	ldr	r3, [pc, #144]	; (80020e4 <I2Cx_MspInit+0xa8>)
 8002052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800205c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002060:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002062:	2312      	movs	r3, #18
 8002064:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002066:	2301      	movs	r3, #1
 8002068:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206a:	2303      	movs	r3, #3
 800206c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800206e:	2304      	movs	r3, #4
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002072:	f107 0314 	add.w	r3, r7, #20
 8002076:	4619      	mov	r1, r3
 8002078:	481b      	ldr	r0, [pc, #108]	; (80020e8 <I2Cx_MspInit+0xac>)
 800207a:	f002 fd89 	bl	8004b90 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800207e:	f107 0314 	add.w	r3, r7, #20
 8002082:	4619      	mov	r1, r3
 8002084:	4818      	ldr	r0, [pc, #96]	; (80020e8 <I2Cx_MspInit+0xac>)
 8002086:	f002 fd83 	bl	8004b90 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800208a:	4b16      	ldr	r3, [pc, #88]	; (80020e4 <I2Cx_MspInit+0xa8>)
 800208c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208e:	4a15      	ldr	r2, [pc, #84]	; (80020e4 <I2Cx_MspInit+0xa8>)
 8002090:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002094:	6593      	str	r3, [r2, #88]	; 0x58
 8002096:	4b13      	ldr	r3, [pc, #76]	; (80020e4 <I2Cx_MspInit+0xa8>)
 8002098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80020a2:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <I2Cx_MspInit+0xa8>)
 80020a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a6:	4a0f      	ldr	r2, [pc, #60]	; (80020e4 <I2Cx_MspInit+0xa8>)
 80020a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020ac:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80020ae:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <I2Cx_MspInit+0xa8>)
 80020b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b2:	4a0c      	ldr	r2, [pc, #48]	; (80020e4 <I2Cx_MspInit+0xa8>)
 80020b4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80020b8:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80020ba:	2200      	movs	r2, #0
 80020bc:	210f      	movs	r1, #15
 80020be:	2021      	movs	r0, #33	; 0x21
 80020c0:	f002 fca0 	bl	8004a04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80020c4:	2021      	movs	r0, #33	; 0x21
 80020c6:	f002 fcb9 	bl	8004a3c <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80020ca:	2200      	movs	r2, #0
 80020cc:	210f      	movs	r1, #15
 80020ce:	2022      	movs	r0, #34	; 0x22
 80020d0:	f002 fc98 	bl	8004a04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80020d4:	2022      	movs	r0, #34	; 0x22
 80020d6:	f002 fcb1 	bl	8004a3c <HAL_NVIC_EnableIRQ>
}
 80020da:	bf00      	nop
 80020dc:	3728      	adds	r7, #40	; 0x28
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40021000 	.word	0x40021000
 80020e8:	48000400 	.word	0x48000400

080020ec <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a12      	ldr	r2, [pc, #72]	; (8002140 <I2Cx_Init+0x54>)
 80020f8:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a11      	ldr	r2, [pc, #68]	; (8002144 <I2Cx_Init+0x58>)
 80020fe:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff ff89 	bl	800203c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f002 ffce 	bl	80050cc <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002130:	2100      	movs	r1, #0
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f004 fb42 	bl	80067bc <HAL_I2CEx_ConfigAnalogFilter>
}
 8002138:	bf00      	nop
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40005800 	.word	0x40005800
 8002144:	00702681 	.word	0x00702681

08002148 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08a      	sub	sp, #40	; 0x28
 800214c:	af04      	add	r7, sp, #16
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	4608      	mov	r0, r1
 8002152:	4611      	mov	r1, r2
 8002154:	461a      	mov	r2, r3
 8002156:	4603      	mov	r3, r0
 8002158:	72fb      	strb	r3, [r7, #11]
 800215a:	460b      	mov	r3, r1
 800215c:	813b      	strh	r3, [r7, #8]
 800215e:	4613      	mov	r3, r2
 8002160:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002162:	2300      	movs	r3, #0
 8002164:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002166:	7afb      	ldrb	r3, [r7, #11]
 8002168:	b299      	uxth	r1, r3
 800216a:	88f8      	ldrh	r0, [r7, #6]
 800216c:	893a      	ldrh	r2, [r7, #8]
 800216e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002172:	9302      	str	r3, [sp, #8]
 8002174:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002176:	9301      	str	r3, [sp, #4]
 8002178:	6a3b      	ldr	r3, [r7, #32]
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	4603      	mov	r3, r0
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f003 f982 	bl	8005488 <HAL_I2C_Mem_Read>
 8002184:	4603      	mov	r3, r0
 8002186:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002188:	7dfb      	ldrb	r3, [r7, #23]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d004      	beq.n	8002198 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800218e:	7afb      	ldrb	r3, [r7, #11]
 8002190:	4619      	mov	r1, r3
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f000 f832 	bl	80021fc <I2Cx_Error>
  }
  return status;
 8002198:	7dfb      	ldrb	r3, [r7, #23]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b08a      	sub	sp, #40	; 0x28
 80021a6:	af04      	add	r7, sp, #16
 80021a8:	60f8      	str	r0, [r7, #12]
 80021aa:	4608      	mov	r0, r1
 80021ac:	4611      	mov	r1, r2
 80021ae:	461a      	mov	r2, r3
 80021b0:	4603      	mov	r3, r0
 80021b2:	72fb      	strb	r3, [r7, #11]
 80021b4:	460b      	mov	r3, r1
 80021b6:	813b      	strh	r3, [r7, #8]
 80021b8:	4613      	mov	r3, r2
 80021ba:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80021bc:	2300      	movs	r3, #0
 80021be:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80021c0:	7afb      	ldrb	r3, [r7, #11]
 80021c2:	b299      	uxth	r1, r3
 80021c4:	88f8      	ldrh	r0, [r7, #6]
 80021c6:	893a      	ldrh	r2, [r7, #8]
 80021c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021cc:	9302      	str	r3, [sp, #8]
 80021ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021d0:	9301      	str	r3, [sp, #4]
 80021d2:	6a3b      	ldr	r3, [r7, #32]
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	4603      	mov	r3, r0
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f003 f841 	bl	8005260 <HAL_I2C_Mem_Write>
 80021de:	4603      	mov	r3, r0
 80021e0:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80021e2:	7dfb      	ldrb	r3, [r7, #23]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d004      	beq.n	80021f2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80021e8:	7afb      	ldrb	r3, [r7, #11]
 80021ea:	4619      	mov	r1, r3
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 f805 	bl	80021fc <I2Cx_Error>
  }
  return status;
 80021f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	460b      	mov	r3, r1
 8002206:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f002 fffa 	bl	8005202 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff ff6c 	bl	80020ec <I2Cx_Init>
}
 8002214:	bf00      	nop
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002220:	4802      	ldr	r0, [pc, #8]	; (800222c <SENSOR_IO_Init+0x10>)
 8002222:	f7ff ff63 	bl	80020ec <I2Cx_Init>
}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20000760 	.word	0x20000760

08002230 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af02      	add	r7, sp, #8
 8002236:	4603      	mov	r3, r0
 8002238:	71fb      	strb	r3, [r7, #7]
 800223a:	460b      	mov	r3, r1
 800223c:	71bb      	strb	r3, [r7, #6]
 800223e:	4613      	mov	r3, r2
 8002240:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002242:	79bb      	ldrb	r3, [r7, #6]
 8002244:	b29a      	uxth	r2, r3
 8002246:	79f9      	ldrb	r1, [r7, #7]
 8002248:	2301      	movs	r3, #1
 800224a:	9301      	str	r3, [sp, #4]
 800224c:	1d7b      	adds	r3, r7, #5
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	2301      	movs	r3, #1
 8002252:	4803      	ldr	r0, [pc, #12]	; (8002260 <SENSOR_IO_Write+0x30>)
 8002254:	f7ff ffa5 	bl	80021a2 <I2Cx_WriteMultiple>
}
 8002258:	bf00      	nop
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	20000760 	.word	0x20000760

08002264 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af02      	add	r7, sp, #8
 800226a:	4603      	mov	r3, r0
 800226c:	460a      	mov	r2, r1
 800226e:	71fb      	strb	r3, [r7, #7]
 8002270:	4613      	mov	r3, r2
 8002272:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002278:	79bb      	ldrb	r3, [r7, #6]
 800227a:	b29a      	uxth	r2, r3
 800227c:	79f9      	ldrb	r1, [r7, #7]
 800227e:	2301      	movs	r3, #1
 8002280:	9301      	str	r3, [sp, #4]
 8002282:	f107 030f 	add.w	r3, r7, #15
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	2301      	movs	r3, #1
 800228a:	4804      	ldr	r0, [pc, #16]	; (800229c <SENSOR_IO_Read+0x38>)
 800228c:	f7ff ff5c 	bl	8002148 <I2Cx_ReadMultiple>

  return read_value;
 8002290:	7bfb      	ldrb	r3, [r7, #15]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000760 	.word	0x20000760

080022a0 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af02      	add	r7, sp, #8
 80022a6:	603a      	str	r2, [r7, #0]
 80022a8:	461a      	mov	r2, r3
 80022aa:	4603      	mov	r3, r0
 80022ac:	71fb      	strb	r3, [r7, #7]
 80022ae:	460b      	mov	r3, r1
 80022b0:	71bb      	strb	r3, [r7, #6]
 80022b2:	4613      	mov	r3, r2
 80022b4:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80022b6:	79bb      	ldrb	r3, [r7, #6]
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	79f9      	ldrb	r1, [r7, #7]
 80022bc:	88bb      	ldrh	r3, [r7, #4]
 80022be:	9301      	str	r3, [sp, #4]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	2301      	movs	r3, #1
 80022c6:	4804      	ldr	r0, [pc, #16]	; (80022d8 <SENSOR_IO_ReadMultiple+0x38>)
 80022c8:	f7ff ff3e 	bl	8002148 <I2Cx_ReadMultiple>
 80022cc:	4603      	mov	r3, r0
 80022ce:	b29b      	uxth	r3, r3
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20000760 	.word	0x20000760

080022dc <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 80022e2:	4b0c      	ldr	r3, [pc, #48]	; (8002314 <BSP_HSENSOR_Init+0x38>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	20be      	movs	r0, #190	; 0xbe
 80022e8:	4798      	blx	r3
 80022ea:	4603      	mov	r3, r0
 80022ec:	2bbc      	cmp	r3, #188	; 0xbc
 80022ee:	d002      	beq.n	80022f6 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	607b      	str	r3, [r7, #4]
 80022f4:	e009      	b.n	800230a <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 80022f6:	4b08      	ldr	r3, [pc, #32]	; (8002318 <BSP_HSENSOR_Init+0x3c>)
 80022f8:	4a06      	ldr	r2, [pc, #24]	; (8002314 <BSP_HSENSOR_Init+0x38>)
 80022fa:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <BSP_HSENSOR_Init+0x3c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	20be      	movs	r0, #190	; 0xbe
 8002304:	4798      	blx	r3
    ret = HSENSOR_OK;
 8002306:	2300      	movs	r3, #0
 8002308:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800230a:	687b      	ldr	r3, [r7, #4]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	200001bc 	.word	0x200001bc
 8002318:	200007b4 	.word	0x200007b4

0800231c <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8002320:	4b04      	ldr	r3, [pc, #16]	; (8002334 <BSP_HSENSOR_ReadHumidity+0x18>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	20be      	movs	r0, #190	; 0xbe
 8002328:	4798      	blx	r3
 800232a:	eef0 7a40 	vmov.f32	s15, s0
}
 800232e:	eeb0 0a67 	vmov.f32	s0, s15
 8002332:	bd80      	pop	{r7, pc}
 8002334:	200007b4 	.word	0x200007b4

08002338 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 800233e:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <BSP_PSENSOR_Init+0x38>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	20ba      	movs	r0, #186	; 0xba
 8002344:	4798      	blx	r3
 8002346:	4603      	mov	r3, r0
 8002348:	2bb1      	cmp	r3, #177	; 0xb1
 800234a:	d002      	beq.n	8002352 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	607b      	str	r3, [r7, #4]
 8002350:	e009      	b.n	8002366 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8002352:	4b08      	ldr	r3, [pc, #32]	; (8002374 <BSP_PSENSOR_Init+0x3c>)
 8002354:	4a06      	ldr	r2, [pc, #24]	; (8002370 <BSP_PSENSOR_Init+0x38>)
 8002356:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8002358:	4b06      	ldr	r3, [pc, #24]	; (8002374 <BSP_PSENSOR_Init+0x3c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	20ba      	movs	r0, #186	; 0xba
 8002360:	4798      	blx	r3
    ret = PSENSOR_OK;
 8002362:	2300      	movs	r3, #0
 8002364:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8002366:	687b      	ldr	r3, [r7, #4]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	200001d8 	.word	0x200001d8
 8002374:	200007b8 	.word	0x200007b8

08002378 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 800237c:	4b04      	ldr	r3, [pc, #16]	; (8002390 <BSP_PSENSOR_ReadPressure+0x18>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	20ba      	movs	r0, #186	; 0xba
 8002384:	4798      	blx	r3
 8002386:	eef0 7a40 	vmov.f32	s15, s0
}
 800238a:	eeb0 0a67 	vmov.f32	s0, s15
 800238e:	bd80      	pop	{r7, pc}
 8002390:	200007b8 	.word	0x200007b8

08002394 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800239e:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <BSP_TSENSOR_Init+0x30>)
 80023a0:	4a09      	ldr	r2, [pc, #36]	; (80023c8 <BSP_TSENSOR_Init+0x34>)
 80023a2:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80023a4:	f7ff ff3a 	bl	800221c <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <BSP_TSENSOR_Init+0x30>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2100      	movs	r1, #0
 80023b0:	20be      	movs	r0, #190	; 0xbe
 80023b2:	4798      	blx	r3

  ret = TSENSOR_OK;
 80023b4:	2300      	movs	r3, #0
 80023b6:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80023b8:	79fb      	ldrb	r3, [r7, #7]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	200007bc 	.word	0x200007bc
 80023c8:	200001c8 	.word	0x200001c8

080023cc <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80023d0:	4b04      	ldr	r3, [pc, #16]	; (80023e4 <BSP_TSENSOR_ReadTemp+0x18>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	20be      	movs	r0, #190	; 0xbe
 80023d8:	4798      	blx	r3
 80023da:	eef0 7a40 	vmov.f32	s15, s0
}
 80023de:	eeb0 0a67 	vmov.f32	s0, s15
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	200007bc 	.word	0x200007bc

080023e8 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80023f2:	88fb      	ldrh	r3, [r7, #6]
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2120      	movs	r1, #32
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff ff33 	bl	8002264 <SENSOR_IO_Read>
 80023fe:	4603      	mov	r3, r0
 8002400:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002402:	7bfb      	ldrb	r3, [r7, #15]
 8002404:	f023 0304 	bic.w	r3, r3, #4
 8002408:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800240a:	7bfb      	ldrb	r3, [r7, #15]
 800240c:	f043 0304 	orr.w	r3, r3, #4
 8002410:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002412:	7bfb      	ldrb	r3, [r7, #15]
 8002414:	f023 0303 	bic.w	r3, r3, #3
 8002418:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800241a:	7bfb      	ldrb	r3, [r7, #15]
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002422:	7bfb      	ldrb	r3, [r7, #15]
 8002424:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002428:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800242a:	88fb      	ldrh	r3, [r7, #6]
 800242c:	b2db      	uxtb	r3, r3
 800242e:	7bfa      	ldrb	r2, [r7, #15]
 8002430:	2120      	movs	r1, #32
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff fefc 	bl	8002230 <SENSOR_IO_Write>
}
 8002438:	bf00      	nop
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800244a:	2300      	movs	r3, #0
 800244c:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 800244e:	f7ff fee5 	bl	800221c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8002452:	88fb      	ldrh	r3, [r7, #6]
 8002454:	b2db      	uxtb	r3, r3
 8002456:	210f      	movs	r1, #15
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff ff03 	bl	8002264 <SENSOR_IO_Read>
 800245e:	4603      	mov	r3, r0
 8002460:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8002462:	7bfb      	ldrb	r3, [r7, #15]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b088      	sub	sp, #32
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8002476:	88fb      	ldrh	r3, [r7, #6]
 8002478:	b2d8      	uxtb	r0, r3
 800247a:	f107 020c 	add.w	r2, r7, #12
 800247e:	2302      	movs	r3, #2
 8002480:	21b0      	movs	r1, #176	; 0xb0
 8002482:	f7ff ff0d 	bl	80022a0 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8002486:	7b3b      	ldrb	r3, [r7, #12]
 8002488:	085b      	lsrs	r3, r3, #1
 800248a:	b2db      	uxtb	r3, r3
 800248c:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 800248e:	7b7b      	ldrb	r3, [r7, #13]
 8002490:	085b      	lsrs	r3, r3, #1
 8002492:	b2db      	uxtb	r3, r3
 8002494:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8002496:	88fb      	ldrh	r3, [r7, #6]
 8002498:	b2d8      	uxtb	r0, r3
 800249a:	f107 020c 	add.w	r2, r7, #12
 800249e:	2302      	movs	r3, #2
 80024a0:	21b6      	movs	r1, #182	; 0xb6
 80024a2:	f7ff fefd 	bl	80022a0 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80024a6:	7b7b      	ldrb	r3, [r7, #13]
 80024a8:	021b      	lsls	r3, r3, #8
 80024aa:	b21a      	sxth	r2, r3
 80024ac:	7b3b      	ldrb	r3, [r7, #12]
 80024ae:	b21b      	sxth	r3, r3
 80024b0:	4313      	orrs	r3, r2
 80024b2:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 80024b4:	88fb      	ldrh	r3, [r7, #6]
 80024b6:	b2d8      	uxtb	r0, r3
 80024b8:	f107 020c 	add.w	r2, r7, #12
 80024bc:	2302      	movs	r3, #2
 80024be:	21ba      	movs	r1, #186	; 0xba
 80024c0:	f7ff feee 	bl	80022a0 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80024c4:	7b7b      	ldrb	r3, [r7, #13]
 80024c6:	021b      	lsls	r3, r3, #8
 80024c8:	b21a      	sxth	r2, r3
 80024ca:	7b3b      	ldrb	r3, [r7, #12]
 80024cc:	b21b      	sxth	r3, r3
 80024ce:	4313      	orrs	r3, r2
 80024d0:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 80024d2:	88fb      	ldrh	r3, [r7, #6]
 80024d4:	b2d8      	uxtb	r0, r3
 80024d6:	f107 020c 	add.w	r2, r7, #12
 80024da:	2302      	movs	r3, #2
 80024dc:	21a8      	movs	r1, #168	; 0xa8
 80024de:	f7ff fedf 	bl	80022a0 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80024e2:	7b7b      	ldrb	r3, [r7, #13]
 80024e4:	021b      	lsls	r3, r3, #8
 80024e6:	b21a      	sxth	r2, r3
 80024e8:	7b3b      	ldrb	r3, [r7, #12]
 80024ea:	b21b      	sxth	r3, r3
 80024ec:	4313      	orrs	r3, r2
 80024ee:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80024f0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80024f4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	ee07 3a90 	vmov	s15, r3
 80024fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002502:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002506:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	ee07 3a90 	vmov	s15, r3
 8002510:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002514:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002518:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800251c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	ee07 3a90 	vmov	s15, r3
 8002526:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800252a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800252e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002532:	ee07 3a90 	vmov	s15, r3
 8002536:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800253a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800253e:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8002542:	edd7 7a04 	vldr	s15, [r7, #16]
 8002546:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800254a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800254e:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8002552:	edd7 7a04 	vldr	s15, [r7, #16]
 8002556:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800259c <HTS221_H_ReadHumidity+0x130>
 800255a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800255e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002562:	dd01      	ble.n	8002568 <HTS221_H_ReadHumidity+0xfc>
 8002564:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <HTS221_H_ReadHumidity+0x134>)
 8002566:	e00a      	b.n	800257e <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8002568:	edd7 7a04 	vldr	s15, [r7, #16]
 800256c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002574:	d502      	bpl.n	800257c <HTS221_H_ReadHumidity+0x110>
 8002576:	f04f 0300 	mov.w	r3, #0
 800257a:	e000      	b.n	800257e <HTS221_H_ReadHumidity+0x112>
 800257c:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 800257e:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8002580:	edd7 7a04 	vldr	s15, [r7, #16]
 8002584:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002588:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800258c:	eef0 7a66 	vmov.f32	s15, s13
}
 8002590:	eeb0 0a67 	vmov.f32	s0, s15
 8002594:	3720      	adds	r7, #32
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	447a0000 	.word	0x447a0000
 80025a0:	447a0000 	.word	0x447a0000

080025a4 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	6039      	str	r1, [r7, #0]
 80025ae:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80025b0:	88fb      	ldrh	r3, [r7, #6]
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2120      	movs	r1, #32
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff fe54 	bl	8002264 <SENSOR_IO_Read>
 80025bc:	4603      	mov	r3, r0
 80025be:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
 80025c2:	f023 0304 	bic.w	r3, r3, #4
 80025c6:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
 80025ca:	f043 0304 	orr.w	r3, r3, #4
 80025ce:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
 80025d2:	f023 0303 	bic.w	r3, r3, #3
 80025d6:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025e6:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80025e8:	88fb      	ldrh	r3, [r7, #6]
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	7bfa      	ldrb	r2, [r7, #15]
 80025ee:	2120      	movs	r1, #32
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff fe1d 	bl	8002230 <SENSOR_IO_Write>
}
 80025f6:	bf00      	nop
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b088      	sub	sp, #32
 8002602:	af00      	add	r7, sp, #0
 8002604:	4603      	mov	r3, r0
 8002606:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8002608:	88fb      	ldrh	r3, [r7, #6]
 800260a:	b2d8      	uxtb	r0, r3
 800260c:	f107 0208 	add.w	r2, r7, #8
 8002610:	2302      	movs	r3, #2
 8002612:	21b2      	movs	r1, #178	; 0xb2
 8002614:	f7ff fe44 	bl	80022a0 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8002618:	88fb      	ldrh	r3, [r7, #6]
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2135      	movs	r1, #53	; 0x35
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff fe20 	bl	8002264 <SENSOR_IO_Read>
 8002624:	4603      	mov	r3, r0
 8002626:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8002628:	7ffb      	ldrb	r3, [r7, #31]
 800262a:	021b      	lsls	r3, r3, #8
 800262c:	b21b      	sxth	r3, r3
 800262e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002632:	b21a      	sxth	r2, r3
 8002634:	7a3b      	ldrb	r3, [r7, #8]
 8002636:	b21b      	sxth	r3, r3
 8002638:	4313      	orrs	r3, r2
 800263a:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 800263c:	7ffb      	ldrb	r3, [r7, #31]
 800263e:	019b      	lsls	r3, r3, #6
 8002640:	b21b      	sxth	r3, r3
 8002642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002646:	b21a      	sxth	r2, r3
 8002648:	7a7b      	ldrb	r3, [r7, #9]
 800264a:	b21b      	sxth	r3, r3
 800264c:	4313      	orrs	r3, r2
 800264e:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8002650:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002654:	10db      	asrs	r3, r3, #3
 8002656:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8002658:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800265c:	10db      	asrs	r3, r3, #3
 800265e:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002660:	88fb      	ldrh	r3, [r7, #6]
 8002662:	b2d8      	uxtb	r0, r3
 8002664:	f107 0208 	add.w	r2, r7, #8
 8002668:	2304      	movs	r3, #4
 800266a:	21bc      	movs	r1, #188	; 0xbc
 800266c:	f7ff fe18 	bl	80022a0 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002670:	7a7b      	ldrb	r3, [r7, #9]
 8002672:	021b      	lsls	r3, r3, #8
 8002674:	b21a      	sxth	r2, r3
 8002676:	7a3b      	ldrb	r3, [r7, #8]
 8002678:	b21b      	sxth	r3, r3
 800267a:	4313      	orrs	r3, r2
 800267c:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800267e:	7afb      	ldrb	r3, [r7, #11]
 8002680:	021b      	lsls	r3, r3, #8
 8002682:	b21a      	sxth	r2, r3
 8002684:	7abb      	ldrb	r3, [r7, #10]
 8002686:	b21b      	sxth	r3, r3
 8002688:	4313      	orrs	r3, r2
 800268a:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 800268c:	88fb      	ldrh	r3, [r7, #6]
 800268e:	b2d8      	uxtb	r0, r3
 8002690:	f107 0208 	add.w	r2, r7, #8
 8002694:	2302      	movs	r3, #2
 8002696:	21aa      	movs	r1, #170	; 0xaa
 8002698:	f7ff fe02 	bl	80022a0 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800269c:	7a7b      	ldrb	r3, [r7, #9]
 800269e:	021b      	lsls	r3, r3, #8
 80026a0:	b21a      	sxth	r2, r3
 80026a2:	7a3b      	ldrb	r3, [r7, #8]
 80026a4:	b21b      	sxth	r3, r3
 80026a6:	4313      	orrs	r3, r2
 80026a8:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80026aa:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80026ae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	ee07 3a90 	vmov	s15, r3
 80026b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80026c0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	ee07 3a90 	vmov	s15, r3
 80026ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026ce:	ee67 6a27 	vmul.f32	s13, s14, s15
 80026d2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80026d6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	ee07 3a90 	vmov	s15, r3
 80026e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026e8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80026ec:	ee07 3a90 	vmov	s15, r3
 80026f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026f8:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	ee07 3a90 	vmov	s15, r3
}
 8002702:	eeb0 0a67 	vmov.f32	s0, s15
 8002706:	3720      	adds	r7, #32
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8002716:	88fb      	ldrh	r3, [r7, #6]
 8002718:	4618      	mov	r0, r3
 800271a:	f000 f879 	bl	8002810 <LPS22HB_Init>
}
 800271e:	bf00      	nop
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8002726:	b580      	push	{r7, lr}
 8002728:	b084      	sub	sp, #16
 800272a:	af00      	add	r7, sp, #0
 800272c:	4603      	mov	r3, r0
 800272e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002730:	2300      	movs	r3, #0
 8002732:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002734:	f7ff fd72 	bl	800221c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8002738:	88fb      	ldrh	r3, [r7, #6]
 800273a:	b2db      	uxtb	r3, r3
 800273c:	210f      	movs	r1, #15
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff fd90 	bl	8002264 <SENSOR_IO_Read>
 8002744:	4603      	mov	r3, r0
 8002746:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8002748:	7bfb      	ldrb	r3, [r7, #15]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
	...

08002754 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8002754:	b590      	push	{r4, r7, lr}
 8002756:	b087      	sub	sp, #28
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8002762:	2300      	movs	r3, #0
 8002764:	74fb      	strb	r3, [r7, #19]
 8002766:	e013      	b.n	8002790 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8002768:	88fb      	ldrh	r3, [r7, #6]
 800276a:	b2da      	uxtb	r2, r3
 800276c:	7cfb      	ldrb	r3, [r7, #19]
 800276e:	3328      	adds	r3, #40	; 0x28
 8002770:	b2db      	uxtb	r3, r3
 8002772:	7cfc      	ldrb	r4, [r7, #19]
 8002774:	4619      	mov	r1, r3
 8002776:	4610      	mov	r0, r2
 8002778:	f7ff fd74 	bl	8002264 <SENSOR_IO_Read>
 800277c:	4603      	mov	r3, r0
 800277e:	461a      	mov	r2, r3
 8002780:	f104 0318 	add.w	r3, r4, #24
 8002784:	443b      	add	r3, r7
 8002786:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 800278a:	7cfb      	ldrb	r3, [r7, #19]
 800278c:	3301      	adds	r3, #1
 800278e:	74fb      	strb	r3, [r7, #19]
 8002790:	7cfb      	ldrb	r3, [r7, #19]
 8002792:	2b02      	cmp	r3, #2
 8002794:	d9e8      	bls.n	8002768 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8002796:	2300      	movs	r3, #0
 8002798:	74fb      	strb	r3, [r7, #19]
 800279a:	e00f      	b.n	80027bc <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 800279c:	7cfb      	ldrb	r3, [r7, #19]
 800279e:	3318      	adds	r3, #24
 80027a0:	443b      	add	r3, r7
 80027a2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80027a6:	461a      	mov	r2, r3
 80027a8:	7cfb      	ldrb	r3, [r7, #19]
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 80027b6:	7cfb      	ldrb	r3, [r7, #19]
 80027b8:	3301      	adds	r3, #1
 80027ba:	74fb      	strb	r3, [r7, #19]
 80027bc:	7cfb      	ldrb	r3, [r7, #19]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d9ec      	bls.n	800279c <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027d2:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2264      	movs	r2, #100	; 0x64
 80027dc:	fb02 f303 	mul.w	r3, r2, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	da01      	bge.n	80027e8 <LPS22HB_P_ReadPressure+0x94>
 80027e4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80027e8:	131b      	asrs	r3, r3, #12
 80027ea:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	ee07 3a90 	vmov	s15, r3
 80027f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027f6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800280c <LPS22HB_P_ReadPressure+0xb8>
 80027fa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80027fe:	eef0 7a66 	vmov.f32	s15, s13
}
 8002802:	eeb0 0a67 	vmov.f32	s0, s15
 8002806:	371c      	adds	r7, #28
 8002808:	46bd      	mov	sp, r7
 800280a:	bd90      	pop	{r4, r7, pc}
 800280c:	42c80000 	.word	0x42c80000

08002810 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 800281a:	88fb      	ldrh	r3, [r7, #6]
 800281c:	b2db      	uxtb	r3, r3
 800281e:	211a      	movs	r1, #26
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff fd1f 	bl	8002264 <SENSOR_IO_Read>
 8002826:	4603      	mov	r3, r0
 8002828:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 800282a:	7bfb      	ldrb	r3, [r7, #15]
 800282c:	f023 0301 	bic.w	r3, r3, #1
 8002830:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8002832:	7bfb      	ldrb	r3, [r7, #15]
 8002834:	f043 0301 	orr.w	r3, r3, #1
 8002838:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 800283a:	88fb      	ldrh	r3, [r7, #6]
 800283c:	b2db      	uxtb	r3, r3
 800283e:	7bfa      	ldrb	r2, [r7, #15]
 8002840:	211a      	movs	r1, #26
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff fcf4 	bl	8002230 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8002848:	88fb      	ldrh	r3, [r7, #6]
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2110      	movs	r1, #16
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff fd08 	bl	8002264 <SENSOR_IO_Read>
 8002854:	4603      	mov	r3, r0
 8002856:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8002858:	7bfb      	ldrb	r3, [r7, #15]
 800285a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800285e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8002860:	7bfb      	ldrb	r3, [r7, #15]
 8002862:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002866:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8002868:	7bfb      	ldrb	r3, [r7, #15]
 800286a:	f023 0302 	bic.w	r3, r3, #2
 800286e:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8002870:	7bfb      	ldrb	r3, [r7, #15]
 8002872:	f043 0302 	orr.w	r3, r3, #2
 8002876:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8002878:	88fb      	ldrh	r3, [r7, #6]
 800287a:	b2db      	uxtb	r3, r3
 800287c:	7bfa      	ldrb	r2, [r7, #15]
 800287e:	2110      	movs	r1, #16
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff fcd5 	bl	8002230 <SENSOR_IO_Write>
}  
 8002886:	bf00      	nop
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002894:	2300      	movs	r3, #0
 8002896:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002898:	2003      	movs	r0, #3
 800289a:	f002 f8a8 	bl	80049ee <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800289e:	200f      	movs	r0, #15
 80028a0:	f7ff fa84 	bl	8001dac <HAL_InitTick>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d002      	beq.n	80028b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	71fb      	strb	r3, [r7, #7]
 80028ae:	e001      	b.n	80028b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028b0:	f7ff f82c 	bl	800190c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028b4:	79fb      	ldrb	r3, [r7, #7]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80028c4:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <HAL_IncTick+0x20>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	461a      	mov	r2, r3
 80028ca:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <HAL_IncTick+0x24>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4413      	add	r3, r2
 80028d0:	4a04      	ldr	r2, [pc, #16]	; (80028e4 <HAL_IncTick+0x24>)
 80028d2:	6013      	str	r3, [r2, #0]
}
 80028d4:	bf00      	nop
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	200001e8 	.word	0x200001e8
 80028e4:	200007c0 	.word	0x200007c0

080028e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  return uwTick;
 80028ec:	4b03      	ldr	r3, [pc, #12]	; (80028fc <HAL_GetTick+0x14>)
 80028ee:	681b      	ldr	r3, [r3, #0]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	200007c0 	.word	0x200007c0

08002900 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002908:	f7ff ffee 	bl	80028e8 <HAL_GetTick>
 800290c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002918:	d005      	beq.n	8002926 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800291a:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <HAL_Delay+0x44>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	461a      	mov	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4413      	add	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002926:	bf00      	nop
 8002928:	f7ff ffde 	bl	80028e8 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	429a      	cmp	r2, r3
 8002936:	d8f7      	bhi.n	8002928 <HAL_Delay+0x28>
  {
  }
}
 8002938:	bf00      	nop
 800293a:	bf00      	nop
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	200001e8 	.word	0x200001e8

08002948 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	431a      	orrs	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	609a      	str	r2, [r3, #8]
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
 8002976:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	431a      	orrs	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	609a      	str	r2, [r3, #8]
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b087      	sub	sp, #28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
 80029bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	3360      	adds	r3, #96	; 0x60
 80029c2:	461a      	mov	r2, r3
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <LL_ADC_SetOffset+0x44>)
 80029d2:	4013      	ands	r3, r2
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	4313      	orrs	r3, r2
 80029e0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80029e8:	bf00      	nop
 80029ea:	371c      	adds	r7, #28
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	03fff000 	.word	0x03fff000

080029f8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	3360      	adds	r3, #96	; 0x60
 8002a06:	461a      	mov	r2, r3
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	3360      	adds	r3, #96	; 0x60
 8002a34:	461a      	mov	r2, r3
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002a4e:	bf00      	nop
 8002a50:	371c      	adds	r7, #28
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b087      	sub	sp, #28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	3330      	adds	r3, #48	; 0x30
 8002a90:	461a      	mov	r2, r3
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	0a1b      	lsrs	r3, r3, #8
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	f003 030c 	and.w	r3, r3, #12
 8002a9c:	4413      	add	r3, r2
 8002a9e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f003 031f 	and.w	r3, r3, #31
 8002aaa:	211f      	movs	r1, #31
 8002aac:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	401a      	ands	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	0e9b      	lsrs	r3, r3, #26
 8002ab8:	f003 011f 	and.w	r1, r3, #31
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	f003 031f 	and.w	r3, r3, #31
 8002ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002acc:	bf00      	nop
 8002ace:	371c      	adds	r7, #28
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002aec:	2301      	movs	r3, #1
 8002aee:	e000      	b.n	8002af2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b087      	sub	sp, #28
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	60f8      	str	r0, [r7, #12]
 8002b06:	60b9      	str	r1, [r7, #8]
 8002b08:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	3314      	adds	r3, #20
 8002b0e:	461a      	mov	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	0e5b      	lsrs	r3, r3, #25
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	f003 0304 	and.w	r3, r3, #4
 8002b1a:	4413      	add	r3, r2
 8002b1c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	0d1b      	lsrs	r3, r3, #20
 8002b26:	f003 031f 	and.w	r3, r3, #31
 8002b2a:	2107      	movs	r1, #7
 8002b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b30:	43db      	mvns	r3, r3
 8002b32:	401a      	ands	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	0d1b      	lsrs	r3, r3, #20
 8002b38:	f003 031f 	and.w	r3, r3, #31
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b42:	431a      	orrs	r2, r3
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002b48:	bf00      	nop
 8002b4a:	371c      	adds	r7, #28
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	401a      	ands	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f003 0318 	and.w	r3, r3, #24
 8002b76:	4908      	ldr	r1, [pc, #32]	; (8002b98 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002b78:	40d9      	lsrs	r1, r3
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	400b      	ands	r3, r1
 8002b7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b82:	431a      	orrs	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002b8a:	bf00      	nop
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	0007ffff 	.word	0x0007ffff

08002b9c <LL_ADC_SetAnalogWDMonitChannels>:
  *         (5) On STM32L4, parameter available on devices with only 1 ADC instance.\n
  *         (6) On STM32L4, parameter available on devices with several ADC instances.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b087      	sub	sp, #28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR,
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	330c      	adds	r3, #12
 8002bac:	4618      	mov	r0, r3
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	0d1b      	lsrs	r3, r3, #20
 8002bb2:	f003 0103 	and.w	r1, r3, #3
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	f003 0201 	and.w	r2, r3, #1
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4403      	add	r3, r0
 8002bca:	617b      	str	r3, [r7, #20]
                                             ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK)
                                                * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 8002bd6:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	401a      	ands	r2, r3
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	400b      	ands	r3, r1
 8002be4:	431a      	orrs	r2, r3
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8002bea:	bf00      	nop
 8002bec:	371c      	adds	r7, #28
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b087      	sub	sp, #28
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	60f8      	str	r0, [r7, #12]
 8002bfe:	60b9      	str	r1, [r7, #8]
 8002c00:	607a      	str	r2, [r7, #4]
 8002c02:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1,
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	3320      	adds	r3, #32
 8002c08:	461a      	mov	r2, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	0d1b      	lsrs	r3, r3, #20
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	f003 030c 	and.w	r3, r3, #12
 8002c14:	4413      	add	r3, r2
 8002c16:	617b      	str	r3, [r7, #20]
                                             ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	0419      	lsls	r1, r3, #16
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	430b      	orrs	r3, r1
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 8002c2e:	bf00      	nop
 8002c30:	371c      	adds	r7, #28
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 031f 	and.w	r3, r3, #31
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002c82:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6093      	str	r3, [r2, #8]
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ca6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002caa:	d101      	bne.n	8002cb0 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002cac:	2301      	movs	r3, #1
 8002cae:	e000      	b.n	8002cb2 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002cce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cd2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cfa:	d101      	bne.n	8002d00 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e000      	b.n	8002d02 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d1e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d22:	f043 0201 	orr.w	r2, r3, #1
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d101      	bne.n	8002d4e <LL_ADC_IsEnabled+0x18>
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e000      	b.n	8002d50 <LL_ADC_IsEnabled+0x1a>
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d70:	f043 0204 	orr.w	r2, r3, #4
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d101      	bne.n	8002d9c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 0308 	and.w	r3, r3, #8
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d101      	bne.n	8002dc2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2280      	movs	r2, #128	; 0x80
 8002ddc:	601a      	str	r2, [r3, #0]
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b083      	sub	sp, #12
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002df8:	601a      	str	r2, [r3, #0]
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e14:	601a      	str	r2, [r3, #0]
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	605a      	str	r2, [r3, #4]
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b083      	sub	sp, #12
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	605a      	str	r2, [r3, #4]
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	605a      	str	r2, [r3, #4]
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	605a      	str	r2, [r3, #4]
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	605a      	str	r2, [r3, #4]
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	605a      	str	r2, [r3, #4]
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
	...

08002ee4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ee4:	b590      	push	{r4, r7, lr}
 8002ee6:	b089      	sub	sp, #36	; 0x24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eec:	2300      	movs	r3, #0
 8002eee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e130      	b.n	8003160 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d109      	bne.n	8002f20 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7fe fd21 	bl	8001954 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff feb6 	bl	8002c96 <LL_ADC_IsDeepPowerDownEnabled>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d004      	beq.n	8002f3a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff fe9c 	bl	8002c72 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff fed1 	bl	8002ce6 <LL_ADC_IsInternalRegulatorEnabled>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d115      	bne.n	8002f76 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff feb5 	bl	8002cbe <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f54:	4b84      	ldr	r3, [pc, #528]	; (8003168 <HAL_ADC_Init+0x284>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	099b      	lsrs	r3, r3, #6
 8002f5a:	4a84      	ldr	r2, [pc, #528]	; (800316c <HAL_ADC_Init+0x288>)
 8002f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f60:	099b      	lsrs	r3, r3, #6
 8002f62:	3301      	adds	r3, #1
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f68:	e002      	b.n	8002f70 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f9      	bne.n	8002f6a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff feb3 	bl	8002ce6 <LL_ADC_IsInternalRegulatorEnabled>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10d      	bne.n	8002fa2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8a:	f043 0210 	orr.w	r2, r3, #16
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f96:	f043 0201 	orr.w	r2, r3, #1
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff feec 	bl	8002d84 <LL_ADC_REG_IsConversionOngoing>
 8002fac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb2:	f003 0310 	and.w	r3, r3, #16
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f040 80c9 	bne.w	800314e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f040 80c5 	bne.w	800314e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002fcc:	f043 0202 	orr.w	r2, r3, #2
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff feac 	bl	8002d36 <LL_ADC_IsEnabled>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d115      	bne.n	8003010 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fe4:	4862      	ldr	r0, [pc, #392]	; (8003170 <HAL_ADC_Init+0x28c>)
 8002fe6:	f7ff fea6 	bl	8002d36 <LL_ADC_IsEnabled>
 8002fea:	4604      	mov	r4, r0
 8002fec:	4861      	ldr	r0, [pc, #388]	; (8003174 <HAL_ADC_Init+0x290>)
 8002fee:	f7ff fea2 	bl	8002d36 <LL_ADC_IsEnabled>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	431c      	orrs	r4, r3
 8002ff6:	4860      	ldr	r0, [pc, #384]	; (8003178 <HAL_ADC_Init+0x294>)
 8002ff8:	f7ff fe9d 	bl	8002d36 <LL_ADC_IsEnabled>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	4323      	orrs	r3, r4
 8003000:	2b00      	cmp	r3, #0
 8003002:	d105      	bne.n	8003010 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	4619      	mov	r1, r3
 800300a:	485c      	ldr	r0, [pc, #368]	; (800317c <HAL_ADC_Init+0x298>)
 800300c:	f7ff fc9c 	bl	8002948 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	7e5b      	ldrb	r3, [r3, #25]
 8003014:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800301a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003020:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003026:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800302e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003030:	4313      	orrs	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 3020 	ldrb.w	r3, [r3, #32]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d106      	bne.n	800304c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	3b01      	subs	r3, #1
 8003044:	045b      	lsls	r3, r3, #17
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4313      	orrs	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003050:	2b00      	cmp	r3, #0
 8003052:	d009      	beq.n	8003068 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003058:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003060:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4313      	orrs	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	4b44      	ldr	r3, [pc, #272]	; (8003180 <HAL_ADC_Init+0x29c>)
 8003070:	4013      	ands	r3, r2
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	6812      	ldr	r2, [r2, #0]
 8003076:	69b9      	ldr	r1, [r7, #24]
 8003078:	430b      	orrs	r3, r1
 800307a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff fe92 	bl	8002daa <LL_ADC_INJ_IsConversionOngoing>
 8003086:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d13d      	bne.n	800310a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d13a      	bne.n	800310a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003098:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030a0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80030a2:	4313      	orrs	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030b0:	f023 0302 	bic.w	r3, r3, #2
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6812      	ldr	r2, [r2, #0]
 80030b8:	69b9      	ldr	r1, [r7, #24]
 80030ba:	430b      	orrs	r3, r1
 80030bc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d118      	bne.n	80030fa <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80030d2:	f023 0304 	bic.w	r3, r3, #4
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030de:	4311      	orrs	r1, r2
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80030e4:	4311      	orrs	r1, r2
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80030ea:	430a      	orrs	r2, r1
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0201 	orr.w	r2, r2, #1
 80030f6:	611a      	str	r2, [r3, #16]
 80030f8:	e007      	b.n	800310a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	691a      	ldr	r2, [r3, #16]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0201 	bic.w	r2, r2, #1
 8003108:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d10c      	bne.n	800312c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003118:	f023 010f 	bic.w	r1, r3, #15
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	1e5a      	subs	r2, r3, #1
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	631a      	str	r2, [r3, #48]	; 0x30
 800312a:	e007      	b.n	800313c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 020f 	bic.w	r2, r2, #15
 800313a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003140:	f023 0303 	bic.w	r3, r3, #3
 8003144:	f043 0201 	orr.w	r2, r3, #1
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	655a      	str	r2, [r3, #84]	; 0x54
 800314c:	e007      	b.n	800315e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003152:	f043 0210 	orr.w	r2, r3, #16
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800315e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3724      	adds	r7, #36	; 0x24
 8003164:	46bd      	mov	sp, r7
 8003166:	bd90      	pop	{r4, r7, pc}
 8003168:	200001b8 	.word	0x200001b8
 800316c:	053e2d63 	.word	0x053e2d63
 8003170:	50040000 	.word	0x50040000
 8003174:	50040100 	.word	0x50040100
 8003178:	50040200 	.word	0x50040200
 800317c:	50040300 	.word	0x50040300
 8003180:	fff0c007 	.word	0xfff0c007

08003184 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800318c:	4857      	ldr	r0, [pc, #348]	; (80032ec <HAL_ADC_Start+0x168>)
 800318e:	f7ff fd54 	bl	8002c3a <LL_ADC_GetMultimode>
 8003192:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff fdf3 	bl	8002d84 <LL_ADC_REG_IsConversionOngoing>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f040 809c 	bne.w	80032de <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d101      	bne.n	80031b4 <HAL_ADC_Start+0x30>
 80031b0:	2302      	movs	r3, #2
 80031b2:	e097      	b.n	80032e4 <HAL_ADC_Start+0x160>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f001 f9b7 	bl	8004530 <ADC_Enable>
 80031c2:	4603      	mov	r3, r0
 80031c4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80031c6:	7dfb      	ldrb	r3, [r7, #23]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f040 8083 	bne.w	80032d4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031d6:	f023 0301 	bic.w	r3, r3, #1
 80031da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a42      	ldr	r2, [pc, #264]	; (80032f0 <HAL_ADC_Start+0x16c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d002      	beq.n	80031f2 <HAL_ADC_Start+0x6e>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	e000      	b.n	80031f4 <HAL_ADC_Start+0x70>
 80031f2:	4b40      	ldr	r3, [pc, #256]	; (80032f4 <HAL_ADC_Start+0x170>)
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6812      	ldr	r2, [r2, #0]
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d002      	beq.n	8003202 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d105      	bne.n	800320e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003206:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003212:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800321a:	d106      	bne.n	800322a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003220:	f023 0206 	bic.w	r2, r3, #6
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	659a      	str	r2, [r3, #88]	; 0x58
 8003228:	e002      	b.n	8003230 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	221c      	movs	r2, #28
 8003236:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a2a      	ldr	r2, [pc, #168]	; (80032f0 <HAL_ADC_Start+0x16c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d002      	beq.n	8003250 <HAL_ADC_Start+0xcc>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	e000      	b.n	8003252 <HAL_ADC_Start+0xce>
 8003250:	4b28      	ldr	r3, [pc, #160]	; (80032f4 <HAL_ADC_Start+0x170>)
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6812      	ldr	r2, [r2, #0]
 8003256:	4293      	cmp	r3, r2
 8003258:	d008      	beq.n	800326c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d005      	beq.n	800326c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	2b05      	cmp	r3, #5
 8003264:	d002      	beq.n	800326c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	2b09      	cmp	r3, #9
 800326a:	d114      	bne.n	8003296 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d007      	beq.n	800328a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003282:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff fd64 	bl	8002d5c <LL_ADC_REG_StartConversion>
 8003294:	e025      	b.n	80032e2 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a12      	ldr	r2, [pc, #72]	; (80032f0 <HAL_ADC_Start+0x16c>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d002      	beq.n	80032b2 <HAL_ADC_Start+0x12e>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	e000      	b.n	80032b4 <HAL_ADC_Start+0x130>
 80032b2:	4b10      	ldr	r3, [pc, #64]	; (80032f4 <HAL_ADC_Start+0x170>)
 80032b4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00f      	beq.n	80032e2 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	655a      	str	r2, [r3, #84]	; 0x54
 80032d2:	e006      	b.n	80032e2 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80032dc:	e001      	b.n	80032e2 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80032de:	2302      	movs	r3, #2
 80032e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80032e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	50040300 	.word	0x50040300
 80032f0:	50040100 	.word	0x50040100
 80032f4:	50040000 	.word	0x50040000

080032f8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b088      	sub	sp, #32
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003302:	4866      	ldr	r0, [pc, #408]	; (800349c <HAL_ADC_PollForConversion+0x1a4>)
 8003304:	f7ff fc99 	bl	8002c3a <LL_ADC_GetMultimode>
 8003308:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	2b08      	cmp	r3, #8
 8003310:	d102      	bne.n	8003318 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003312:	2308      	movs	r3, #8
 8003314:	61fb      	str	r3, [r7, #28]
 8003316:	e02a      	b.n	800336e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d005      	beq.n	800332a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	2b05      	cmp	r3, #5
 8003322:	d002      	beq.n	800332a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	2b09      	cmp	r3, #9
 8003328:	d111      	bne.n	800334e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b00      	cmp	r3, #0
 8003336:	d007      	beq.n	8003348 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333c:	f043 0220 	orr.w	r2, r3, #32
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e0a4      	b.n	8003492 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003348:	2304      	movs	r3, #4
 800334a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800334c:	e00f      	b.n	800336e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800334e:	4853      	ldr	r0, [pc, #332]	; (800349c <HAL_ADC_PollForConversion+0x1a4>)
 8003350:	f7ff fc81 	bl	8002c56 <LL_ADC_GetMultiDMATransfer>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d007      	beq.n	800336a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800335e:	f043 0220 	orr.w	r2, r3, #32
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e093      	b.n	8003492 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800336a:	2304      	movs	r3, #4
 800336c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800336e:	f7ff fabb 	bl	80028e8 <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003374:	e021      	b.n	80033ba <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337c:	d01d      	beq.n	80033ba <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800337e:	f7ff fab3 	bl	80028e8 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d302      	bcc.n	8003394 <HAL_ADC_PollForConversion+0x9c>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d112      	bne.n	80033ba <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	4013      	ands	r3, r2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10b      	bne.n	80033ba <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a6:	f043 0204 	orr.w	r2, r3, #4
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e06b      	b.n	8003492 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	4013      	ands	r3, r2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0d6      	beq.n	8003376 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff fb3e 	bl	8002a5a <LL_ADC_REG_IsTriggerSourceSWStart>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d01c      	beq.n	800341e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	7e5b      	ldrb	r3, [r3, #25]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d118      	bne.n	800341e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d111      	bne.n	800341e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800340a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d105      	bne.n	800341e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003416:	f043 0201 	orr.w	r2, r3, #1
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a1f      	ldr	r2, [pc, #124]	; (80034a0 <HAL_ADC_PollForConversion+0x1a8>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d002      	beq.n	800342e <HAL_ADC_PollForConversion+0x136>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	e000      	b.n	8003430 <HAL_ADC_PollForConversion+0x138>
 800342e:	4b1d      	ldr	r3, [pc, #116]	; (80034a4 <HAL_ADC_PollForConversion+0x1ac>)
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	6812      	ldr	r2, [r2, #0]
 8003434:	4293      	cmp	r3, r2
 8003436:	d008      	beq.n	800344a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d005      	beq.n	800344a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	2b05      	cmp	r3, #5
 8003442:	d002      	beq.n	800344a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	2b09      	cmp	r3, #9
 8003448:	d104      	bne.n	8003454 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	61bb      	str	r3, [r7, #24]
 8003452:	e00c      	b.n	800346e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a11      	ldr	r2, [pc, #68]	; (80034a0 <HAL_ADC_PollForConversion+0x1a8>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d002      	beq.n	8003464 <HAL_ADC_PollForConversion+0x16c>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	e000      	b.n	8003466 <HAL_ADC_PollForConversion+0x16e>
 8003464:	4b0f      	ldr	r3, [pc, #60]	; (80034a4 <HAL_ADC_PollForConversion+0x1ac>)
 8003466:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	2b08      	cmp	r3, #8
 8003472:	d104      	bne.n	800347e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2208      	movs	r2, #8
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	e008      	b.n	8003490 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d103      	bne.n	8003490 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	220c      	movs	r2, #12
 800348e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3720      	adds	r7, #32
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	50040300 	.word	0x50040300
 80034a0:	50040100 	.word	0x50040100
 80034a4:	50040000 	.word	0x50040000

080034a8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
	...

080034c4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b08a      	sub	sp, #40	; 0x28
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80034cc:	2300      	movs	r3, #0
 80034ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034e0:	4882      	ldr	r0, [pc, #520]	; (80036ec <HAL_ADC_IRQHandler+0x228>)
 80034e2:	f7ff fbaa 	bl	8002c3a <LL_ADC_GetMultimode>
 80034e6:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d017      	beq.n	8003522 <HAL_ADC_IRQHandler+0x5e>
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d012      	beq.n	8003522 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003500:	f003 0310 	and.w	r3, r3, #16
 8003504:	2b00      	cmp	r3, #0
 8003506:	d105      	bne.n	8003514 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f001 f8df 	bl	80046d8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2202      	movs	r2, #2
 8003520:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b00      	cmp	r3, #0
 800352a:	d004      	beq.n	8003536 <HAL_ADC_IRQHandler+0x72>
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	f003 0304 	and.w	r3, r3, #4
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10a      	bne.n	800354c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 8083 	beq.w	8003648 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	f003 0308 	and.w	r3, r3, #8
 8003548:	2b00      	cmp	r3, #0
 800354a:	d07d      	beq.n	8003648 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003550:	f003 0310 	and.w	r3, r3, #16
 8003554:	2b00      	cmp	r3, #0
 8003556:	d105      	bne.n	8003564 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff fa76 	bl	8002a5a <LL_ADC_REG_IsTriggerSourceSWStart>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d062      	beq.n	800363a <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a5d      	ldr	r2, [pc, #372]	; (80036f0 <HAL_ADC_IRQHandler+0x22c>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d002      	beq.n	8003584 <HAL_ADC_IRQHandler+0xc0>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	e000      	b.n	8003586 <HAL_ADC_IRQHandler+0xc2>
 8003584:	4b5b      	ldr	r3, [pc, #364]	; (80036f4 <HAL_ADC_IRQHandler+0x230>)
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6812      	ldr	r2, [r2, #0]
 800358a:	4293      	cmp	r3, r2
 800358c:	d008      	beq.n	80035a0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d005      	beq.n	80035a0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2b05      	cmp	r3, #5
 8003598:	d002      	beq.n	80035a0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2b09      	cmp	r3, #9
 800359e:	d104      	bne.n	80035aa <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	623b      	str	r3, [r7, #32]
 80035a8:	e00c      	b.n	80035c4 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a50      	ldr	r2, [pc, #320]	; (80036f0 <HAL_ADC_IRQHandler+0x22c>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d002      	beq.n	80035ba <HAL_ADC_IRQHandler+0xf6>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	e000      	b.n	80035bc <HAL_ADC_IRQHandler+0xf8>
 80035ba:	4b4e      	ldr	r3, [pc, #312]	; (80036f4 <HAL_ADC_IRQHandler+0x230>)
 80035bc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d135      	bne.n	800363a <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0308 	and.w	r3, r3, #8
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d12e      	bne.n	800363a <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff fbcf 	bl	8002d84 <LL_ADC_REG_IsConversionOngoing>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d11a      	bne.n	8003622 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 020c 	bic.w	r2, r2, #12
 80035fa:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003600:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d112      	bne.n	800363a <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003618:	f043 0201 	orr.w	r2, r3, #1
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	655a      	str	r2, [r3, #84]	; 0x54
 8003620:	e00b      	b.n	800363a <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003626:	f043 0210 	orr.w	r2, r3, #16
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003632:	f043 0201 	orr.w	r2, r3, #1
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f95c 	bl	80038f8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	220c      	movs	r2, #12
 8003646:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	f003 0320 	and.w	r3, r3, #32
 800364e:	2b00      	cmp	r3, #0
 8003650:	d004      	beq.n	800365c <HAL_ADC_IRQHandler+0x198>
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	f003 0320 	and.w	r3, r3, #32
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10b      	bne.n	8003674 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 809f 	beq.w	80037a6 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 8099 	beq.w	80037a6 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003678:	f003 0310 	and.w	r3, r3, #16
 800367c:	2b00      	cmp	r3, #0
 800367e:	d105      	bne.n	800368c <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003684:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff fa21 	bl	8002ad8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003696:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff f9dc 	bl	8002a5a <LL_ADC_REG_IsTriggerSourceSWStart>
 80036a2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a11      	ldr	r2, [pc, #68]	; (80036f0 <HAL_ADC_IRQHandler+0x22c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d002      	beq.n	80036b4 <HAL_ADC_IRQHandler+0x1f0>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	e000      	b.n	80036b6 <HAL_ADC_IRQHandler+0x1f2>
 80036b4:	4b0f      	ldr	r3, [pc, #60]	; (80036f4 <HAL_ADC_IRQHandler+0x230>)
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6812      	ldr	r2, [r2, #0]
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d008      	beq.n	80036d0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d005      	beq.n	80036d0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	2b06      	cmp	r3, #6
 80036c8:	d002      	beq.n	80036d0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	2b07      	cmp	r3, #7
 80036ce:	d104      	bne.n	80036da <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	623b      	str	r3, [r7, #32]
 80036d8:	e013      	b.n	8003702 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a04      	ldr	r2, [pc, #16]	; (80036f0 <HAL_ADC_IRQHandler+0x22c>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d009      	beq.n	80036f8 <HAL_ADC_IRQHandler+0x234>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	e007      	b.n	80036fa <HAL_ADC_IRQHandler+0x236>
 80036ea:	bf00      	nop
 80036ec:	50040300 	.word	0x50040300
 80036f0:	50040100 	.word	0x50040100
 80036f4:	50040000 	.word	0x50040000
 80036f8:	4b7d      	ldr	r3, [pc, #500]	; (80038f0 <HAL_ADC_IRQHandler+0x42c>)
 80036fa:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d047      	beq.n	8003798 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d007      	beq.n	8003722 <HAL_ADC_IRQHandler+0x25e>
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d03f      	beq.n	8003798 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800371e:	2b00      	cmp	r3, #0
 8003720:	d13a      	bne.n	8003798 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372c:	2b40      	cmp	r3, #64	; 0x40
 800372e:	d133      	bne.n	8003798 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003730:	6a3b      	ldr	r3, [r7, #32]
 8003732:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d12e      	bne.n	8003798 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4618      	mov	r0, r3
 8003740:	f7ff fb33 	bl	8002daa <LL_ADC_INJ_IsConversionOngoing>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d11a      	bne.n	8003780 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003758:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376e:	2b00      	cmp	r3, #0
 8003770:	d112      	bne.n	8003798 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003776:	f043 0201 	orr.w	r2, r3, #1
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	655a      	str	r2, [r3, #84]	; 0x54
 800377e:	e00b      	b.n	8003798 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003784:	f043 0210 	orr.w	r2, r3, #16
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003790:	f043 0201 	orr.w	r2, r3, #1
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 ff75 	bl	8004688 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2260      	movs	r2, #96	; 0x60
 80037a4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d011      	beq.n	80037d4 <HAL_ADC_IRQHandler+0x310>
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00c      	beq.n	80037d4 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f8a0 	bl	800390c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2280      	movs	r2, #128	; 0x80
 80037d2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d012      	beq.n	8003804 <HAL_ADC_IRQHandler+0x340>
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00d      	beq.n	8003804 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ec:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 ff5b 	bl	80046b0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003802:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800380a:	2b00      	cmp	r3, #0
 800380c:	d012      	beq.n	8003834 <HAL_ADC_IRQHandler+0x370>
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00d      	beq.n	8003834 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800381c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 ff4d 	bl	80046c4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003832:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f003 0310 	and.w	r3, r3, #16
 800383a:	2b00      	cmp	r3, #0
 800383c:	d036      	beq.n	80038ac <HAL_ADC_IRQHandler+0x3e8>
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	f003 0310 	and.w	r3, r3, #16
 8003844:	2b00      	cmp	r3, #0
 8003846:	d031      	beq.n	80038ac <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384c:	2b00      	cmp	r3, #0
 800384e:	d102      	bne.n	8003856 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8003850:	2301      	movs	r3, #1
 8003852:	627b      	str	r3, [r7, #36]	; 0x24
 8003854:	e014      	b.n	8003880 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d008      	beq.n	800386e <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800385c:	4825      	ldr	r0, [pc, #148]	; (80038f4 <HAL_ADC_IRQHandler+0x430>)
 800385e:	f7ff f9fa 	bl	8002c56 <LL_ADC_GetMultiDMATransfer>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00b      	beq.n	8003880 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003868:	2301      	movs	r3, #1
 800386a:	627b      	str	r3, [r7, #36]	; 0x24
 800386c:	e008      	b.n	8003880 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800387c:	2301      	movs	r3, #1
 800387e:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003882:	2b01      	cmp	r3, #1
 8003884:	d10e      	bne.n	80038a4 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003896:	f043 0202 	orr.w	r2, r3, #2
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f83e 	bl	8003920 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2210      	movs	r2, #16
 80038aa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d018      	beq.n	80038e8 <HAL_ADC_IRQHandler+0x424>
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d013      	beq.n	80038e8 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d0:	f043 0208 	orr.w	r2, r3, #8
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038e0:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 feda 	bl	800469c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80038e8:	bf00      	nop
 80038ea:	3728      	adds	r7, #40	; 0x28
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	50040000 	.word	0x50040000
 80038f4:	50040300 	.word	0x50040300

080038f8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b0b6      	sub	sp, #216	; 0xd8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800393e:	2300      	movs	r3, #0
 8003940:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003944:	2300      	movs	r3, #0
 8003946:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800394e:	2b01      	cmp	r3, #1
 8003950:	d101      	bne.n	8003956 <HAL_ADC_ConfigChannel+0x22>
 8003952:	2302      	movs	r3, #2
 8003954:	e3c9      	b.n	80040ea <HAL_ADC_ConfigChannel+0x7b6>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f7ff fa0e 	bl	8002d84 <LL_ADC_REG_IsConversionOngoing>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	f040 83aa 	bne.w	80040c4 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	2b05      	cmp	r3, #5
 800397e:	d824      	bhi.n	80039ca <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	3b02      	subs	r3, #2
 8003986:	2b03      	cmp	r3, #3
 8003988:	d81b      	bhi.n	80039c2 <HAL_ADC_ConfigChannel+0x8e>
 800398a:	a201      	add	r2, pc, #4	; (adr r2, 8003990 <HAL_ADC_ConfigChannel+0x5c>)
 800398c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003990:	080039a1 	.word	0x080039a1
 8003994:	080039a9 	.word	0x080039a9
 8003998:	080039b1 	.word	0x080039b1
 800399c:	080039b9 	.word	0x080039b9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80039a0:	230c      	movs	r3, #12
 80039a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80039a6:	e010      	b.n	80039ca <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80039a8:	2312      	movs	r3, #18
 80039aa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80039ae:	e00c      	b.n	80039ca <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80039b0:	2318      	movs	r3, #24
 80039b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80039b6:	e008      	b.n	80039ca <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80039b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80039c0:	e003      	b.n	80039ca <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80039c2:	2306      	movs	r3, #6
 80039c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80039c8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6818      	ldr	r0, [r3, #0]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	461a      	mov	r2, r3
 80039d4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80039d8:	f7ff f852 	bl	8002a80 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff f9cf 	bl	8002d84 <LL_ADC_REG_IsConversionOngoing>
 80039e6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7ff f9db 	bl	8002daa <LL_ADC_INJ_IsConversionOngoing>
 80039f4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f040 81a4 	bne.w	8003d4a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f040 819f 	bne.w	8003d4a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6818      	ldr	r0, [r3, #0]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	6819      	ldr	r1, [r3, #0]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	461a      	mov	r2, r3
 8003a1a:	f7ff f870 	bl	8002afe <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	695a      	ldr	r2, [r3, #20]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	08db      	lsrs	r3, r3, #3
 8003a2a:	f003 0303 	and.w	r3, r3, #3
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	2b04      	cmp	r3, #4
 8003a3e:	d00a      	beq.n	8003a56 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6818      	ldr	r0, [r3, #0]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	6919      	ldr	r1, [r3, #16]
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a50:	f7fe ffae 	bl	80029b0 <LL_ADC_SetOffset>
 8003a54:	e179      	b.n	8003d4a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7fe ffcb 	bl	80029f8 <LL_ADC_GetOffsetChannel>
 8003a62:	4603      	mov	r3, r0
 8003a64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10a      	bne.n	8003a82 <HAL_ADC_ConfigChannel+0x14e>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2100      	movs	r1, #0
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fe ffc0 	bl	80029f8 <LL_ADC_GetOffsetChannel>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	0e9b      	lsrs	r3, r3, #26
 8003a7c:	f003 021f 	and.w	r2, r3, #31
 8003a80:	e01e      	b.n	8003ac0 <HAL_ADC_ConfigChannel+0x18c>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2100      	movs	r1, #0
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fe ffb5 	bl	80029f8 <LL_ADC_GetOffsetChannel>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003a98:	fa93 f3a3 	rbit	r3, r3
 8003a9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003aa0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003aa4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003aa8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003ab0:	2320      	movs	r3, #32
 8003ab2:	e004      	b.n	8003abe <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8003ab4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003ab8:	fab3 f383 	clz	r3, r3
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d105      	bne.n	8003ad8 <HAL_ADC_ConfigChannel+0x1a4>
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	0e9b      	lsrs	r3, r3, #26
 8003ad2:	f003 031f 	and.w	r3, r3, #31
 8003ad6:	e018      	b.n	8003b0a <HAL_ADC_ConfigChannel+0x1d6>
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ae4:	fa93 f3a3 	rbit	r3, r3
 8003ae8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003aec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003af0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003af4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003afc:	2320      	movs	r3, #32
 8003afe:	e004      	b.n	8003b0a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8003b00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003b04:	fab3 f383 	clz	r3, r3
 8003b08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d106      	bne.n	8003b1c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2200      	movs	r2, #0
 8003b14:	2100      	movs	r1, #0
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fe ff84 	bl	8002a24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2101      	movs	r1, #1
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fe ff68 	bl	80029f8 <LL_ADC_GetOffsetChannel>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10a      	bne.n	8003b48 <HAL_ADC_ConfigChannel+0x214>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2101      	movs	r1, #1
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7fe ff5d 	bl	80029f8 <LL_ADC_GetOffsetChannel>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	0e9b      	lsrs	r3, r3, #26
 8003b42:	f003 021f 	and.w	r2, r3, #31
 8003b46:	e01e      	b.n	8003b86 <HAL_ADC_ConfigChannel+0x252>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2101      	movs	r1, #1
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fe ff52 	bl	80029f8 <LL_ADC_GetOffsetChannel>
 8003b54:	4603      	mov	r3, r0
 8003b56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b5e:	fa93 f3a3 	rbit	r3, r3
 8003b62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003b66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003b6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8003b76:	2320      	movs	r3, #32
 8003b78:	e004      	b.n	8003b84 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003b7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003b7e:	fab3 f383 	clz	r3, r3
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d105      	bne.n	8003b9e <HAL_ADC_ConfigChannel+0x26a>
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	0e9b      	lsrs	r3, r3, #26
 8003b98:	f003 031f 	and.w	r3, r3, #31
 8003b9c:	e018      	b.n	8003bd0 <HAL_ADC_ConfigChannel+0x29c>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003baa:	fa93 f3a3 	rbit	r3, r3
 8003bae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003bb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003bb6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003bba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003bc2:	2320      	movs	r3, #32
 8003bc4:	e004      	b.n	8003bd0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8003bc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bca:	fab3 f383 	clz	r3, r3
 8003bce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d106      	bne.n	8003be2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	2101      	movs	r1, #1
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7fe ff21 	bl	8002a24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2102      	movs	r1, #2
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7fe ff05 	bl	80029f8 <LL_ADC_GetOffsetChannel>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10a      	bne.n	8003c0e <HAL_ADC_ConfigChannel+0x2da>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2102      	movs	r1, #2
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fe fefa 	bl	80029f8 <LL_ADC_GetOffsetChannel>
 8003c04:	4603      	mov	r3, r0
 8003c06:	0e9b      	lsrs	r3, r3, #26
 8003c08:	f003 021f 	and.w	r2, r3, #31
 8003c0c:	e01e      	b.n	8003c4c <HAL_ADC_ConfigChannel+0x318>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2102      	movs	r1, #2
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7fe feef 	bl	80029f8 <LL_ADC_GetOffsetChannel>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c24:	fa93 f3a3 	rbit	r3, r3
 8003c28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003c2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003c34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003c3c:	2320      	movs	r3, #32
 8003c3e:	e004      	b.n	8003c4a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003c40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c44:	fab3 f383 	clz	r3, r3
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d105      	bne.n	8003c64 <HAL_ADC_ConfigChannel+0x330>
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	0e9b      	lsrs	r3, r3, #26
 8003c5e:	f003 031f 	and.w	r3, r3, #31
 8003c62:	e014      	b.n	8003c8e <HAL_ADC_ConfigChannel+0x35a>
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c6c:	fa93 f3a3 	rbit	r3, r3
 8003c70:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003c72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003c78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003c80:	2320      	movs	r3, #32
 8003c82:	e004      	b.n	8003c8e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003c84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c88:	fab3 f383 	clz	r3, r3
 8003c8c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d106      	bne.n	8003ca0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2200      	movs	r2, #0
 8003c98:	2102      	movs	r1, #2
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fe fec2 	bl	8002a24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2103      	movs	r1, #3
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7fe fea6 	bl	80029f8 <LL_ADC_GetOffsetChannel>
 8003cac:	4603      	mov	r3, r0
 8003cae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10a      	bne.n	8003ccc <HAL_ADC_ConfigChannel+0x398>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2103      	movs	r1, #3
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fe fe9b 	bl	80029f8 <LL_ADC_GetOffsetChannel>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	0e9b      	lsrs	r3, r3, #26
 8003cc6:	f003 021f 	and.w	r2, r3, #31
 8003cca:	e017      	b.n	8003cfc <HAL_ADC_ConfigChannel+0x3c8>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2103      	movs	r1, #3
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fe fe90 	bl	80029f8 <LL_ADC_GetOffsetChannel>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cde:	fa93 f3a3 	rbit	r3, r3
 8003ce2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003ce8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003cee:	2320      	movs	r3, #32
 8003cf0:	e003      	b.n	8003cfa <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8003cf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cf4:	fab3 f383 	clz	r3, r3
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d105      	bne.n	8003d14 <HAL_ADC_ConfigChannel+0x3e0>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	0e9b      	lsrs	r3, r3, #26
 8003d0e:	f003 031f 	and.w	r3, r3, #31
 8003d12:	e011      	b.n	8003d38 <HAL_ADC_ConfigChannel+0x404>
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d1c:	fa93 f3a3 	rbit	r3, r3
 8003d20:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003d22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d24:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003d26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003d2c:	2320      	movs	r3, #32
 8003d2e:	e003      	b.n	8003d38 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003d30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d32:	fab3 f383 	clz	r3, r3
 8003d36:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d106      	bne.n	8003d4a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2200      	movs	r2, #0
 8003d42:	2103      	movs	r1, #3
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7fe fe6d 	bl	8002a24 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7fe fff1 	bl	8002d36 <LL_ADC_IsEnabled>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f040 8140 	bne.w	8003fdc <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6818      	ldr	r0, [r3, #0]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	6819      	ldr	r1, [r3, #0]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	461a      	mov	r2, r3
 8003d6a:	f7fe fef3 	bl	8002b54 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	4a8f      	ldr	r2, [pc, #572]	; (8003fb0 <HAL_ADC_ConfigChannel+0x67c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	f040 8131 	bne.w	8003fdc <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10b      	bne.n	8003da2 <HAL_ADC_ConfigChannel+0x46e>
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	0e9b      	lsrs	r3, r3, #26
 8003d90:	3301      	adds	r3, #1
 8003d92:	f003 031f 	and.w	r3, r3, #31
 8003d96:	2b09      	cmp	r3, #9
 8003d98:	bf94      	ite	ls
 8003d9a:	2301      	movls	r3, #1
 8003d9c:	2300      	movhi	r3, #0
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	e019      	b.n	8003dd6 <HAL_ADC_ConfigChannel+0x4a2>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003daa:	fa93 f3a3 	rbit	r3, r3
 8003dae:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003db0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003db2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003db4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003dba:	2320      	movs	r3, #32
 8003dbc:	e003      	b.n	8003dc6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003dbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dc0:	fab3 f383 	clz	r3, r3
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	f003 031f 	and.w	r3, r3, #31
 8003dcc:	2b09      	cmp	r3, #9
 8003dce:	bf94      	ite	ls
 8003dd0:	2301      	movls	r3, #1
 8003dd2:	2300      	movhi	r3, #0
 8003dd4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d079      	beq.n	8003ece <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d107      	bne.n	8003df6 <HAL_ADC_ConfigChannel+0x4c2>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	0e9b      	lsrs	r3, r3, #26
 8003dec:	3301      	adds	r3, #1
 8003dee:	069b      	lsls	r3, r3, #26
 8003df0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003df4:	e015      	b.n	8003e22 <HAL_ADC_ConfigChannel+0x4ee>
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dfe:	fa93 f3a3 	rbit	r3, r3
 8003e02:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003e04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e06:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003e08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8003e0e:	2320      	movs	r3, #32
 8003e10:	e003      	b.n	8003e1a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8003e12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e14:	fab3 f383 	clz	r3, r3
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	069b      	lsls	r3, r3, #26
 8003e1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d109      	bne.n	8003e42 <HAL_ADC_ConfigChannel+0x50e>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	0e9b      	lsrs	r3, r3, #26
 8003e34:	3301      	adds	r3, #1
 8003e36:	f003 031f 	and.w	r3, r3, #31
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e40:	e017      	b.n	8003e72 <HAL_ADC_ConfigChannel+0x53e>
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e4a:	fa93 f3a3 	rbit	r3, r3
 8003e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e52:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003e54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003e5a:	2320      	movs	r3, #32
 8003e5c:	e003      	b.n	8003e66 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003e5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e60:	fab3 f383 	clz	r3, r3
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	3301      	adds	r3, #1
 8003e68:	f003 031f 	and.w	r3, r3, #31
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e72:	ea42 0103 	orr.w	r1, r2, r3
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10a      	bne.n	8003e98 <HAL_ADC_ConfigChannel+0x564>
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	0e9b      	lsrs	r3, r3, #26
 8003e88:	3301      	adds	r3, #1
 8003e8a:	f003 021f 	and.w	r2, r3, #31
 8003e8e:	4613      	mov	r3, r2
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	4413      	add	r3, r2
 8003e94:	051b      	lsls	r3, r3, #20
 8003e96:	e018      	b.n	8003eca <HAL_ADC_ConfigChannel+0x596>
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ea0:	fa93 f3a3 	rbit	r3, r3
 8003ea4:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003eb0:	2320      	movs	r3, #32
 8003eb2:	e003      	b.n	8003ebc <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb6:	fab3 f383 	clz	r3, r3
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	f003 021f 	and.w	r2, r3, #31
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	4413      	add	r3, r2
 8003ec8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003eca:	430b      	orrs	r3, r1
 8003ecc:	e081      	b.n	8003fd2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d107      	bne.n	8003eea <HAL_ADC_ConfigChannel+0x5b6>
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	0e9b      	lsrs	r3, r3, #26
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	069b      	lsls	r3, r3, #26
 8003ee4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ee8:	e015      	b.n	8003f16 <HAL_ADC_ConfigChannel+0x5e2>
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef2:	fa93 f3a3 	rbit	r3, r3
 8003ef6:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003f02:	2320      	movs	r3, #32
 8003f04:	e003      	b.n	8003f0e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f08:	fab3 f383 	clz	r3, r3
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	3301      	adds	r3, #1
 8003f10:	069b      	lsls	r3, r3, #26
 8003f12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d109      	bne.n	8003f36 <HAL_ADC_ConfigChannel+0x602>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	0e9b      	lsrs	r3, r3, #26
 8003f28:	3301      	adds	r3, #1
 8003f2a:	f003 031f 	and.w	r3, r3, #31
 8003f2e:	2101      	movs	r1, #1
 8003f30:	fa01 f303 	lsl.w	r3, r1, r3
 8003f34:	e017      	b.n	8003f66 <HAL_ADC_ConfigChannel+0x632>
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	fa93 f3a3 	rbit	r3, r3
 8003f42:	61bb      	str	r3, [r7, #24]
  return result;
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003f4e:	2320      	movs	r3, #32
 8003f50:	e003      	b.n	8003f5a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	fab3 f383 	clz	r3, r3
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	f003 031f 	and.w	r3, r3, #31
 8003f60:	2101      	movs	r1, #1
 8003f62:	fa01 f303 	lsl.w	r3, r1, r3
 8003f66:	ea42 0103 	orr.w	r1, r2, r3
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10d      	bne.n	8003f92 <HAL_ADC_ConfigChannel+0x65e>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	0e9b      	lsrs	r3, r3, #26
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	f003 021f 	and.w	r2, r3, #31
 8003f82:	4613      	mov	r3, r2
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	4413      	add	r3, r2
 8003f88:	3b1e      	subs	r3, #30
 8003f8a:	051b      	lsls	r3, r3, #20
 8003f8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f90:	e01e      	b.n	8003fd0 <HAL_ADC_ConfigChannel+0x69c>
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	fa93 f3a3 	rbit	r3, r3
 8003f9e:	60fb      	str	r3, [r7, #12]
  return result;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d104      	bne.n	8003fb4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003faa:	2320      	movs	r3, #32
 8003fac:	e006      	b.n	8003fbc <HAL_ADC_ConfigChannel+0x688>
 8003fae:	bf00      	nop
 8003fb0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	fab3 f383 	clz	r3, r3
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	f003 021f 	and.w	r2, r3, #31
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	4413      	add	r3, r2
 8003fc8:	3b1e      	subs	r3, #30
 8003fca:	051b      	lsls	r3, r3, #20
 8003fcc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fd0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	f7fe fd91 	bl	8002afe <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	4b44      	ldr	r3, [pc, #272]	; (80040f4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d07a      	beq.n	80040de <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003fe8:	4843      	ldr	r0, [pc, #268]	; (80040f8 <HAL_ADC_ConfigChannel+0x7c4>)
 8003fea:	f7fe fcd3 	bl	8002994 <LL_ADC_GetCommonPathInternalCh>
 8003fee:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a41      	ldr	r2, [pc, #260]	; (80040fc <HAL_ADC_ConfigChannel+0x7c8>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d12c      	bne.n	8004056 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ffc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004000:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d126      	bne.n	8004056 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a3c      	ldr	r2, [pc, #240]	; (8004100 <HAL_ADC_ConfigChannel+0x7cc>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d004      	beq.n	800401c <HAL_ADC_ConfigChannel+0x6e8>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a3b      	ldr	r2, [pc, #236]	; (8004104 <HAL_ADC_ConfigChannel+0x7d0>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d15d      	bne.n	80040d8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800401c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004020:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004024:	4619      	mov	r1, r3
 8004026:	4834      	ldr	r0, [pc, #208]	; (80040f8 <HAL_ADC_ConfigChannel+0x7c4>)
 8004028:	f7fe fca1 	bl	800296e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800402c:	4b36      	ldr	r3, [pc, #216]	; (8004108 <HAL_ADC_ConfigChannel+0x7d4>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	099b      	lsrs	r3, r3, #6
 8004032:	4a36      	ldr	r2, [pc, #216]	; (800410c <HAL_ADC_ConfigChannel+0x7d8>)
 8004034:	fba2 2303 	umull	r2, r3, r2, r3
 8004038:	099b      	lsrs	r3, r3, #6
 800403a:	1c5a      	adds	r2, r3, #1
 800403c:	4613      	mov	r3, r2
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	4413      	add	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004046:	e002      	b.n	800404e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	3b01      	subs	r3, #1
 800404c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1f9      	bne.n	8004048 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004054:	e040      	b.n	80040d8 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a2d      	ldr	r2, [pc, #180]	; (8004110 <HAL_ADC_ConfigChannel+0x7dc>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d118      	bne.n	8004092 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004060:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004064:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d112      	bne.n	8004092 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a23      	ldr	r2, [pc, #140]	; (8004100 <HAL_ADC_ConfigChannel+0x7cc>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d004      	beq.n	8004080 <HAL_ADC_ConfigChannel+0x74c>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a22      	ldr	r2, [pc, #136]	; (8004104 <HAL_ADC_ConfigChannel+0x7d0>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d12d      	bne.n	80040dc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004080:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004084:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004088:	4619      	mov	r1, r3
 800408a:	481b      	ldr	r0, [pc, #108]	; (80040f8 <HAL_ADC_ConfigChannel+0x7c4>)
 800408c:	f7fe fc6f 	bl	800296e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004090:	e024      	b.n	80040dc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a1f      	ldr	r2, [pc, #124]	; (8004114 <HAL_ADC_ConfigChannel+0x7e0>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d120      	bne.n	80040de <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800409c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80040a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d11a      	bne.n	80040de <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a14      	ldr	r2, [pc, #80]	; (8004100 <HAL_ADC_ConfigChannel+0x7cc>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d115      	bne.n	80040de <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80040b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80040b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80040ba:	4619      	mov	r1, r3
 80040bc:	480e      	ldr	r0, [pc, #56]	; (80040f8 <HAL_ADC_ConfigChannel+0x7c4>)
 80040be:	f7fe fc56 	bl	800296e <LL_ADC_SetCommonPathInternalCh>
 80040c2:	e00c      	b.n	80040de <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c8:	f043 0220 	orr.w	r2, r3, #32
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80040d6:	e002      	b.n	80040de <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040d8:	bf00      	nop
 80040da:	e000      	b.n	80040de <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80040dc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80040e6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	37d8      	adds	r7, #216	; 0xd8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	80080000 	.word	0x80080000
 80040f8:	50040300 	.word	0x50040300
 80040fc:	c7520000 	.word	0xc7520000
 8004100:	50040000 	.word	0x50040000
 8004104:	50040200 	.word	0x50040200
 8004108:	200001b8 	.word	0x200001b8
 800410c:	053e2d63 	.word	0x053e2d63
 8004110:	cb840000 	.word	0xcb840000
 8004114:	80000001 	.word	0x80000001

08004118 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param pAnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, const ADC_AnalogWDGConfTypeDef *pAnalogWDGConfig)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b08e      	sub	sp, #56	; 0x38
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004122:	2300      	movs	r3, #0
 8004124:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(pAnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(pAnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(pAnalogWDGConfig->ITMode));

  if ((pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004130:	d003      	beq.n	800413a <HAL_ADC_AnalogWDGConfig+0x22>
      (pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
  if ((pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8004136:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004140:	2b01      	cmp	r3, #1
 8004142:	d101      	bne.n	8004148 <HAL_ADC_AnalogWDGConfig+0x30>
 8004144:	2302      	movs	r3, #2
 8004146:	e1ec      	b.n	8004522 <HAL_ADC_AnalogWDGConfig+0x40a>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4618      	mov	r0, r3
 8004156:	f7fe fe15 	bl	8002d84 <LL_ADC_REG_IsConversionOngoing>
 800415a:	6338      	str	r0, [r7, #48]	; 0x30
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	f7fe fe22 	bl	8002daa <LL_ADC_INJ_IsConversionOngoing>
 8004166:	62f8      	str	r0, [r7, #44]	; 0x2c
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416a:	2b00      	cmp	r3, #0
 800416c:	f040 81ca 	bne.w	8004504 <HAL_ADC_AnalogWDGConfig+0x3ec>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004172:	2b00      	cmp	r3, #0
 8004174:	f040 81c6 	bne.w	8004504 <HAL_ADC_AnalogWDGConfig+0x3ec>
     )
  {
    /* Analog watchdog configuration */
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a9b      	ldr	r2, [pc, #620]	; (80043ec <HAL_ADC_AnalogWDGConfig+0x2d4>)
 800417e:	4293      	cmp	r3, r2
 8004180:	f040 80a2 	bne.w	80042c8 <HAL_ADC_AnalogWDGConfig+0x1b0>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (pAnalogWDGConfig->WatchdogMode)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 800418c:	d034      	beq.n	80041f8 <HAL_ADC_AnalogWDGConfig+0xe0>
 800418e:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8004192:	d856      	bhi.n	8004242 <HAL_ADC_AnalogWDGConfig+0x12a>
 8004194:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004198:	d04b      	beq.n	8004232 <HAL_ADC_AnalogWDGConfig+0x11a>
 800419a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800419e:	d850      	bhi.n	8004242 <HAL_ADC_AnalogWDGConfig+0x12a>
 80041a0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80041a4:	d01b      	beq.n	80041de <HAL_ADC_AnalogWDGConfig+0xc6>
 80041a6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80041aa:	d84a      	bhi.n	8004242 <HAL_ADC_AnalogWDGConfig+0x12a>
 80041ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041b0:	d037      	beq.n	8004222 <HAL_ADC_AnalogWDGConfig+0x10a>
 80041b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041b6:	d844      	bhi.n	8004242 <HAL_ADC_AnalogWDGConfig+0x12a>
 80041b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041bc:	d029      	beq.n	8004212 <HAL_ADC_AnalogWDGConfig+0xfa>
 80041be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041c2:	d13e      	bne.n	8004242 <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80041d0:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80041d4:	461a      	mov	r2, r3
 80041d6:	4985      	ldr	r1, [pc, #532]	; (80043ec <HAL_ADC_AnalogWDGConfig+0x2d4>)
 80041d8:	f7fe fce0 	bl	8002b9c <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR));
          break;
 80041dc:	e039      	b.n	8004252 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80041ea:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 80041ee:	461a      	mov	r2, r3
 80041f0:	497e      	ldr	r1, [pc, #504]	; (80043ec <HAL_ADC_AnalogWDGConfig+0x2d4>)
 80041f2:	f7fe fcd3 	bl	8002b9c <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_INJECTED));
          break;
 80041f6:	e02c      	b.n	8004252 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8004204:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 8004208:	461a      	mov	r2, r3
 800420a:	4978      	ldr	r1, [pc, #480]	; (80043ec <HAL_ADC_AnalogWDGConfig+0x2d4>)
 800420c:	f7fe fcc6 	bl	8002b9c <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8004210:	e01f      	b.n	8004252 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a76      	ldr	r2, [pc, #472]	; (80043f0 <HAL_ADC_AnalogWDGConfig+0x2d8>)
 8004218:	4974      	ldr	r1, [pc, #464]	; (80043ec <HAL_ADC_AnalogWDGConfig+0x2d4>)
 800421a:	4618      	mov	r0, r3
 800421c:	f7fe fcbe 	bl	8002b9c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8004220:	e017      	b.n	8004252 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a73      	ldr	r2, [pc, #460]	; (80043f4 <HAL_ADC_AnalogWDGConfig+0x2dc>)
 8004228:	4970      	ldr	r1, [pc, #448]	; (80043ec <HAL_ADC_AnalogWDGConfig+0x2d4>)
 800422a:	4618      	mov	r0, r3
 800422c:	f7fe fcb6 	bl	8002b9c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8004230:	e00f      	b.n	8004252 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a70      	ldr	r2, [pc, #448]	; (80043f8 <HAL_ADC_AnalogWDGConfig+0x2e0>)
 8004238:	496c      	ldr	r1, [pc, #432]	; (80043ec <HAL_ADC_AnalogWDGConfig+0x2d4>)
 800423a:	4618      	mov	r0, r3
 800423c:	f7fe fcae 	bl	8002b9c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8004240:	e007      	b.n	8004252 <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2200      	movs	r2, #0
 8004248:	4968      	ldr	r1, [pc, #416]	; (80043ec <HAL_ADC_AnalogWDGConfig+0x2d4>)
 800424a:	4618      	mov	r0, r3
 800424c:	f7fe fca6 	bl	8002b9c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8004250:	bf00      	nop
      }

      /* Shift the offset in function of the selected ADC resolution:         */
      /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
      /* are set to 0                                                         */
      tmp_awd_high_threshold_shifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	691a      	ldr	r2, [r3, #16]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	08db      	lsrs	r3, r3, #3
 800425e:	f003 0303 	and.w	r3, r3, #3
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	fa02 f303 	lsl.w	r3, r2, r3
 8004268:	62bb      	str	r3, [r7, #40]	; 0x28
      tmp_awd_low_threshold_shifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	695a      	ldr	r2, [r3, #20]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	08db      	lsrs	r3, r3, #3
 8004276:	f003 0303 	and.w	r3, r3, #3
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	fa02 f303 	lsl.w	r3, r2, r3
 8004280:	627b      	str	r3, [r7, #36]	; 0x24

      /* Set ADC analog watchdog thresholds value of both thresholds high and low */
      LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, tmp_awd_high_threshold_shifted,
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6818      	ldr	r0, [r3, #0]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	6819      	ldr	r1, [r3, #0]
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800428e:	f7fe fcb2 	bl	8002bf6 <LL_ADC_ConfigAnalogWDThresholds>
                                      tmp_awd_low_threshold_shifted);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004296:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fe fd94 	bl	8002dd0 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (pAnalogWDGConfig->ITMode == ENABLE)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	7b1b      	ldrb	r3, [r3, #12]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d105      	bne.n	80042bc <HAL_ADC_AnalogWDGConfig+0x1a4>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7fe fdb4 	bl	8002e22 <LL_ADC_EnableIT_AWD1>
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80042ba:	e12c      	b.n	8004516 <HAL_ADC_AnalogWDGConfig+0x3fe>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7fe fdde 	bl	8002e82 <LL_ADC_DisableIT_AWD1>
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80042c6:	e126      	b.n	8004516 <HAL_ADC_AnalogWDGConfig+0x3fe>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (pAnalogWDGConfig->WatchdogMode)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80042d0:	d01d      	beq.n	800430e <HAL_ADC_AnalogWDGConfig+0x1f6>
 80042d2:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80042d6:	f200 8093 	bhi.w	8004400 <HAL_ADC_AnalogWDGConfig+0x2e8>
 80042da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042de:	d07b      	beq.n	80043d8 <HAL_ADC_AnalogWDGConfig+0x2c0>
 80042e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042e4:	f200 808c 	bhi.w	8004400 <HAL_ADC_AnalogWDGConfig+0x2e8>
 80042e8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80042ec:	d00f      	beq.n	800430e <HAL_ADC_AnalogWDGConfig+0x1f6>
 80042ee:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80042f2:	f200 8085 	bhi.w	8004400 <HAL_ADC_AnalogWDGConfig+0x2e8>
 80042f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042fa:	d06d      	beq.n	80043d8 <HAL_ADC_AnalogWDGConfig+0x2c0>
 80042fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004300:	d87e      	bhi.n	8004400 <HAL_ADC_AnalogWDGConfig+0x2e8>
 8004302:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004306:	d067      	beq.n	80043d8 <HAL_ADC_AnalogWDGConfig+0x2c0>
 8004308:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800430c:	d178      	bne.n	8004400 <HAL_ADC_AnalogWDGConfig+0x2e8>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a3a      	ldr	r2, [pc, #232]	; (80043fc <HAL_ADC_AnalogWDGConfig+0x2e4>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d12f      	bne.n	8004378 <HAL_ADC_AnalogWDGConfig+0x260>
          {
            SET_BIT(hadc->Instance->AWD2CR,
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004320:	2b00      	cmp	r3, #0
 8004322:	d108      	bne.n	8004336 <HAL_ADC_AnalogWDGConfig+0x21e>
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	0e9b      	lsrs	r3, r3, #26
 800432a:	f003 031f 	and.w	r3, r3, #31
 800432e:	2201      	movs	r2, #1
 8004330:	fa02 f303 	lsl.w	r3, r2, r3
 8004334:	e016      	b.n	8004364 <HAL_ADC_AnalogWDGConfig+0x24c>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	fa93 f3a3 	rbit	r3, r3
 8004342:	61bb      	str	r3, [r7, #24]
  return result;
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004348:	6a3b      	ldr	r3, [r7, #32]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_ADC_AnalogWDGConfig+0x23a>
    return 32U;
 800434e:	2320      	movs	r3, #32
 8004350:	e003      	b.n	800435a <HAL_ADC_AnalogWDGConfig+0x242>
  return __builtin_clz(value);
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	fab3 f383 	clz	r3, r3
 8004358:	b2db      	uxtb	r3, r3
 800435a:	f003 031f 	and.w	r3, r3, #31
 800435e:	2201      	movs	r2, #1
 8004360:	fa02 f303 	lsl.w	r3, r2, r3
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6812      	ldr	r2, [r2, #0]
 8004368:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6812      	ldr	r2, [r2, #0]
 8004370:	430b      	orrs	r3, r1
 8004372:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          else
          {
            SET_BIT(hadc->Instance->AWD3CR,
                    (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 8004376:	e04c      	b.n	8004412 <HAL_ADC_AnalogWDGConfig+0x2fa>
            SET_BIT(hadc->Instance->AWD3CR,
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004380:	2b00      	cmp	r3, #0
 8004382:	d108      	bne.n	8004396 <HAL_ADC_AnalogWDGConfig+0x27e>
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	0e9b      	lsrs	r3, r3, #26
 800438a:	f003 031f 	and.w	r3, r3, #31
 800438e:	2201      	movs	r2, #1
 8004390:	fa02 f303 	lsl.w	r3, r2, r3
 8004394:	e016      	b.n	80043c4 <HAL_ADC_AnalogWDGConfig+0x2ac>
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	fa93 f3a3 	rbit	r3, r3
 80043a2:	60fb      	str	r3, [r7, #12]
  return result;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_ADC_AnalogWDGConfig+0x29a>
    return 32U;
 80043ae:	2320      	movs	r3, #32
 80043b0:	e003      	b.n	80043ba <HAL_ADC_AnalogWDGConfig+0x2a2>
  return __builtin_clz(value);
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	fab3 f383 	clz	r3, r3
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	f003 031f 	and.w	r3, r3, #31
 80043be:	2201      	movs	r2, #1
 80043c0:	fa02 f303 	lsl.w	r3, r2, r3
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	6812      	ldr	r2, [r2, #0]
 80043c8:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6812      	ldr	r2, [r2, #0]
 80043d0:	430b      	orrs	r3, r1
 80043d2:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 80043d6:	e01c      	b.n	8004412 <HAL_ADC_AnalogWDGConfig+0x2fa>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6818      	ldr	r0, [r3, #0]
                                          pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 80043e0:	4a05      	ldr	r2, [pc, #20]	; (80043f8 <HAL_ADC_AnalogWDGConfig+0x2e0>)
 80043e2:	4619      	mov	r1, r3
 80043e4:	f7fe fbda 	bl	8002b9c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80043e8:	e013      	b.n	8004412 <HAL_ADC_AnalogWDGConfig+0x2fa>
 80043ea:	bf00      	nop
 80043ec:	7dc00000 	.word	0x7dc00000
 80043f0:	0087ffff 	.word	0x0087ffff
 80043f4:	0107ffff 	.word	0x0107ffff
 80043f8:	0187ffff 	.word	0x0187ffff
 80043fc:	0017ffff 	.word	0x0017ffff

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6818      	ldr	r0, [r3, #0]
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2200      	movs	r2, #0
 800440a:	4619      	mov	r1, r3
 800440c:	f7fe fbc6 	bl	8002b9c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8004410:	bf00      	nop
      }

      /* Shift the thresholds in function of the selected ADC resolution      */
      /* have to be left-aligned on bit 7, the LSB (right bits) are set to 0  */
      tmp_awd_high_threshold_shifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f003 0318 	and.w	r3, r3, #24
 800441c:	2b18      	cmp	r3, #24
 800441e:	d00f      	beq.n	8004440 <HAL_ADC_AnalogWDGConfig+0x328>
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	691a      	ldr	r2, [r3, #16]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	08db      	lsrs	r3, r3, #3
 800442c:	f003 0303 	and.w	r3, r3, #3
 8004430:	f1c3 0302 	rsb	r3, r3, #2
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	f003 031e 	and.w	r3, r3, #30
 800443a:	fa22 f303 	lsr.w	r3, r2, r3
 800443e:	e002      	b.n	8004446 <HAL_ADC_AnalogWDGConfig+0x32e>
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	62bb      	str	r3, [r7, #40]	; 0x28
      tmp_awd_low_threshold_shifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f003 0318 	and.w	r3, r3, #24
 8004452:	2b18      	cmp	r3, #24
 8004454:	d00f      	beq.n	8004476 <HAL_ADC_AnalogWDGConfig+0x35e>
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	695a      	ldr	r2, [r3, #20]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	08db      	lsrs	r3, r3, #3
 8004462:	f003 0303 	and.w	r3, r3, #3
 8004466:	f1c3 0302 	rsb	r3, r3, #2
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	f003 031e 	and.w	r3, r3, #30
 8004470:	fa22 f303 	lsr.w	r3, r2, r3
 8004474:	e002      	b.n	800447c <HAL_ADC_AnalogWDGConfig+0x364>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Set ADC analog watchdog thresholds value of both thresholds high and low */
      LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, tmp_awd_high_threshold_shifted,
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6818      	ldr	r0, [r3, #0]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	6819      	ldr	r1, [r3, #0]
 8004486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004488:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800448a:	f7fe fbb4 	bl	8002bf6 <LL_ADC_ConfigAnalogWDThresholds>
                                      tmp_awd_low_threshold_shifted);

      if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a26      	ldr	r2, [pc, #152]	; (800452c <HAL_ADC_AnalogWDGConfig+0x414>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d11a      	bne.n	80044ce <HAL_ADC_AnalogWDGConfig+0x3b6>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7fe fc9e 	bl	8002dea <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	7b1b      	ldrb	r3, [r3, #12]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d105      	bne.n	80044c2 <HAL_ADC_AnalogWDGConfig+0x3aa>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fe fcc1 	bl	8002e42 <LL_ADC_EnableIT_AWD2>
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80044c0:	e029      	b.n	8004516 <HAL_ADC_AnalogWDGConfig+0x3fe>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7fe fceb 	bl	8002ea2 <LL_ADC_DisableIT_AWD2>
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80044cc:	e023      	b.n	8004516 <HAL_ADC_AnalogWDGConfig+0x3fe>
      }
      /* (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fe fc91 	bl	8002e06 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	7b1b      	ldrb	r3, [r3, #12]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d105      	bne.n	80044f8 <HAL_ADC_AnalogWDGConfig+0x3e0>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7fe fcb6 	bl	8002e62 <LL_ADC_EnableIT_AWD3>
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80044f6:	e00e      	b.n	8004516 <HAL_ADC_AnalogWDGConfig+0x3fe>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7fe fce0 	bl	8002ec2 <LL_ADC_DisableIT_AWD3>
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8004502:	e008      	b.n	8004516 <HAL_ADC_AnalogWDGConfig+0x3fe>
  /* If a conversion is on going on ADC group regular or injected, no update  */
  /* could be done on neither of the AWD configuration structure parameters.  */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004508:	f043 0220 	orr.w	r2, r3, #32
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800451e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8004522:	4618      	mov	r0, r3
 8004524:	3738      	adds	r7, #56	; 0x38
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	0017ffff 	.word	0x0017ffff

08004530 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004538:	2300      	movs	r3, #0
 800453a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4618      	mov	r0, r3
 8004542:	f7fe fbf8 	bl	8002d36 <LL_ADC_IsEnabled>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d169      	bne.n	8004620 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689a      	ldr	r2, [r3, #8]
 8004552:	4b36      	ldr	r3, [pc, #216]	; (800462c <ADC_Enable+0xfc>)
 8004554:	4013      	ands	r3, r2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00d      	beq.n	8004576 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800455e:	f043 0210 	orr.w	r2, r3, #16
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800456a:	f043 0201 	orr.w	r2, r3, #1
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e055      	b.n	8004622 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4618      	mov	r0, r3
 800457c:	f7fe fbc7 	bl	8002d0e <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004580:	482b      	ldr	r0, [pc, #172]	; (8004630 <ADC_Enable+0x100>)
 8004582:	f7fe fa07 	bl	8002994 <LL_ADC_GetCommonPathInternalCh>
 8004586:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004588:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800458c:	2b00      	cmp	r3, #0
 800458e:	d013      	beq.n	80045b8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004590:	4b28      	ldr	r3, [pc, #160]	; (8004634 <ADC_Enable+0x104>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	099b      	lsrs	r3, r3, #6
 8004596:	4a28      	ldr	r2, [pc, #160]	; (8004638 <ADC_Enable+0x108>)
 8004598:	fba2 2303 	umull	r2, r3, r2, r3
 800459c:	099b      	lsrs	r3, r3, #6
 800459e:	1c5a      	adds	r2, r3, #1
 80045a0:	4613      	mov	r3, r2
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	4413      	add	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80045aa:	e002      	b.n	80045b2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	3b01      	subs	r3, #1
 80045b0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1f9      	bne.n	80045ac <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80045b8:	f7fe f996 	bl	80028e8 <HAL_GetTick>
 80045bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045be:	e028      	b.n	8004612 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7fe fbb6 	bl	8002d36 <LL_ADC_IsEnabled>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d104      	bne.n	80045da <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7fe fb9a 	bl	8002d0e <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80045da:	f7fe f985 	bl	80028e8 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d914      	bls.n	8004612 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d00d      	beq.n	8004612 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045fa:	f043 0210 	orr.w	r2, r3, #16
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004606:	f043 0201 	orr.w	r2, r3, #1
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e007      	b.n	8004622 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b01      	cmp	r3, #1
 800461e:	d1cf      	bne.n	80045c0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	8000003f 	.word	0x8000003f
 8004630:	50040300 	.word	0x50040300
 8004634:	200001b8 	.word	0x200001b8
 8004638:	053e2d63 	.word	0x053e2d63

0800463c <LL_ADC_IsEnabled>:
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b01      	cmp	r3, #1
 800464e:	d101      	bne.n	8004654 <LL_ADC_IsEnabled+0x18>
 8004650:	2301      	movs	r3, #1
 8004652:	e000      	b.n	8004656 <LL_ADC_IsEnabled+0x1a>
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <LL_ADC_REG_IsConversionOngoing>:
{
 8004662:	b480      	push	{r7}
 8004664:	b083      	sub	sp, #12
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 0304 	and.w	r3, r3, #4
 8004672:	2b04      	cmp	r3, #4
 8004674:	d101      	bne.n	800467a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004676:	2301      	movs	r3, #1
 8004678:	e000      	b.n	800467c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80046ec:	b590      	push	{r4, r7, lr}
 80046ee:	b09f      	sub	sp, #124	; 0x7c
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046f6:	2300      	movs	r3, #0
 80046f8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004702:	2b01      	cmp	r3, #1
 8004704:	d101      	bne.n	800470a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004706:	2302      	movs	r3, #2
 8004708:	e093      	b.n	8004832 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004712:	2300      	movs	r3, #0
 8004714:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004716:	2300      	movs	r3, #0
 8004718:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a47      	ldr	r2, [pc, #284]	; (800483c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d102      	bne.n	800472a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004724:	4b46      	ldr	r3, [pc, #280]	; (8004840 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004726:	60bb      	str	r3, [r7, #8]
 8004728:	e001      	b.n	800472e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800472a:	2300      	movs	r3, #0
 800472c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10b      	bne.n	800474c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004738:	f043 0220 	orr.w	r2, r3, #32
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e072      	b.n	8004832 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	4618      	mov	r0, r3
 8004750:	f7ff ff87 	bl	8004662 <LL_ADC_REG_IsConversionOngoing>
 8004754:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff ff81 	bl	8004662 <LL_ADC_REG_IsConversionOngoing>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d154      	bne.n	8004810 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004766:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004768:	2b00      	cmp	r3, #0
 800476a:	d151      	bne.n	8004810 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800476c:	4b35      	ldr	r3, [pc, #212]	; (8004844 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800476e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d02c      	beq.n	80047d2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	6859      	ldr	r1, [r3, #4]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800478a:	035b      	lsls	r3, r3, #13
 800478c:	430b      	orrs	r3, r1
 800478e:	431a      	orrs	r2, r3
 8004790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004792:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004794:	4829      	ldr	r0, [pc, #164]	; (800483c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004796:	f7ff ff51 	bl	800463c <LL_ADC_IsEnabled>
 800479a:	4604      	mov	r4, r0
 800479c:	4828      	ldr	r0, [pc, #160]	; (8004840 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800479e:	f7ff ff4d 	bl	800463c <LL_ADC_IsEnabled>
 80047a2:	4603      	mov	r3, r0
 80047a4:	431c      	orrs	r4, r3
 80047a6:	4828      	ldr	r0, [pc, #160]	; (8004848 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80047a8:	f7ff ff48 	bl	800463c <LL_ADC_IsEnabled>
 80047ac:	4603      	mov	r3, r0
 80047ae:	4323      	orrs	r3, r4
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d137      	bne.n	8004824 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80047b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80047bc:	f023 030f 	bic.w	r3, r3, #15
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	6811      	ldr	r1, [r2, #0]
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	6892      	ldr	r2, [r2, #8]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	431a      	orrs	r2, r3
 80047cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ce:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80047d0:	e028      	b.n	8004824 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80047d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047dc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047de:	4817      	ldr	r0, [pc, #92]	; (800483c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80047e0:	f7ff ff2c 	bl	800463c <LL_ADC_IsEnabled>
 80047e4:	4604      	mov	r4, r0
 80047e6:	4816      	ldr	r0, [pc, #88]	; (8004840 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80047e8:	f7ff ff28 	bl	800463c <LL_ADC_IsEnabled>
 80047ec:	4603      	mov	r3, r0
 80047ee:	431c      	orrs	r4, r3
 80047f0:	4815      	ldr	r0, [pc, #84]	; (8004848 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80047f2:	f7ff ff23 	bl	800463c <LL_ADC_IsEnabled>
 80047f6:	4603      	mov	r3, r0
 80047f8:	4323      	orrs	r3, r4
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d112      	bne.n	8004824 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80047fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004806:	f023 030f 	bic.w	r3, r3, #15
 800480a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800480c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800480e:	e009      	b.n	8004824 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004814:	f043 0220 	orr.w	r2, r3, #32
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004822:	e000      	b.n	8004826 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004824:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800482e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004832:	4618      	mov	r0, r3
 8004834:	377c      	adds	r7, #124	; 0x7c
 8004836:	46bd      	mov	sp, r7
 8004838:	bd90      	pop	{r4, r7, pc}
 800483a:	bf00      	nop
 800483c:	50040000 	.word	0x50040000
 8004840:	50040100 	.word	0x50040100
 8004844:	50040300 	.word	0x50040300
 8004848:	50040200 	.word	0x50040200

0800484c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800485c:	4b0c      	ldr	r3, [pc, #48]	; (8004890 <__NVIC_SetPriorityGrouping+0x44>)
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004868:	4013      	ands	r3, r2
 800486a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800487c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800487e:	4a04      	ldr	r2, [pc, #16]	; (8004890 <__NVIC_SetPriorityGrouping+0x44>)
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	60d3      	str	r3, [r2, #12]
}
 8004884:	bf00      	nop
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	e000ed00 	.word	0xe000ed00

08004894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004894:	b480      	push	{r7}
 8004896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004898:	4b04      	ldr	r3, [pc, #16]	; (80048ac <__NVIC_GetPriorityGrouping+0x18>)
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	0a1b      	lsrs	r3, r3, #8
 800489e:	f003 0307 	and.w	r3, r3, #7
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	e000ed00 	.word	0xe000ed00

080048b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	4603      	mov	r3, r0
 80048b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	db0b      	blt.n	80048da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048c2:	79fb      	ldrb	r3, [r7, #7]
 80048c4:	f003 021f 	and.w	r2, r3, #31
 80048c8:	4907      	ldr	r1, [pc, #28]	; (80048e8 <__NVIC_EnableIRQ+0x38>)
 80048ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ce:	095b      	lsrs	r3, r3, #5
 80048d0:	2001      	movs	r0, #1
 80048d2:	fa00 f202 	lsl.w	r2, r0, r2
 80048d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	e000e100 	.word	0xe000e100

080048ec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	4603      	mov	r3, r0
 80048f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	db12      	blt.n	8004924 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048fe:	79fb      	ldrb	r3, [r7, #7]
 8004900:	f003 021f 	and.w	r2, r3, #31
 8004904:	490a      	ldr	r1, [pc, #40]	; (8004930 <__NVIC_DisableIRQ+0x44>)
 8004906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800490a:	095b      	lsrs	r3, r3, #5
 800490c:	2001      	movs	r0, #1
 800490e:	fa00 f202 	lsl.w	r2, r0, r2
 8004912:	3320      	adds	r3, #32
 8004914:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004918:	f3bf 8f4f 	dsb	sy
}
 800491c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800491e:	f3bf 8f6f 	isb	sy
}
 8004922:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	e000e100 	.word	0xe000e100

08004934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	4603      	mov	r3, r0
 800493c:	6039      	str	r1, [r7, #0]
 800493e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004944:	2b00      	cmp	r3, #0
 8004946:	db0a      	blt.n	800495e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	b2da      	uxtb	r2, r3
 800494c:	490c      	ldr	r1, [pc, #48]	; (8004980 <__NVIC_SetPriority+0x4c>)
 800494e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004952:	0112      	lsls	r2, r2, #4
 8004954:	b2d2      	uxtb	r2, r2
 8004956:	440b      	add	r3, r1
 8004958:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800495c:	e00a      	b.n	8004974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	b2da      	uxtb	r2, r3
 8004962:	4908      	ldr	r1, [pc, #32]	; (8004984 <__NVIC_SetPriority+0x50>)
 8004964:	79fb      	ldrb	r3, [r7, #7]
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	3b04      	subs	r3, #4
 800496c:	0112      	lsls	r2, r2, #4
 800496e:	b2d2      	uxtb	r2, r2
 8004970:	440b      	add	r3, r1
 8004972:	761a      	strb	r2, [r3, #24]
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	e000e100 	.word	0xe000e100
 8004984:	e000ed00 	.word	0xe000ed00

08004988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004988:	b480      	push	{r7}
 800498a:	b089      	sub	sp, #36	; 0x24
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f003 0307 	and.w	r3, r3, #7
 800499a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	f1c3 0307 	rsb	r3, r3, #7
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	bf28      	it	cs
 80049a6:	2304      	movcs	r3, #4
 80049a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	3304      	adds	r3, #4
 80049ae:	2b06      	cmp	r3, #6
 80049b0:	d902      	bls.n	80049b8 <NVIC_EncodePriority+0x30>
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	3b03      	subs	r3, #3
 80049b6:	e000      	b.n	80049ba <NVIC_EncodePriority+0x32>
 80049b8:	2300      	movs	r3, #0
 80049ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049bc:	f04f 32ff 	mov.w	r2, #4294967295
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	fa02 f303 	lsl.w	r3, r2, r3
 80049c6:	43da      	mvns	r2, r3
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	401a      	ands	r2, r3
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049d0:	f04f 31ff 	mov.w	r1, #4294967295
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	fa01 f303 	lsl.w	r3, r1, r3
 80049da:	43d9      	mvns	r1, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049e0:	4313      	orrs	r3, r2
         );
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3724      	adds	r7, #36	; 0x24
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b082      	sub	sp, #8
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7ff ff28 	bl	800484c <__NVIC_SetPriorityGrouping>
}
 80049fc:	bf00      	nop
 80049fe:	3708      	adds	r7, #8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
 8004a10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004a12:	2300      	movs	r3, #0
 8004a14:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a16:	f7ff ff3d 	bl	8004894 <__NVIC_GetPriorityGrouping>
 8004a1a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	68b9      	ldr	r1, [r7, #8]
 8004a20:	6978      	ldr	r0, [r7, #20]
 8004a22:	f7ff ffb1 	bl	8004988 <NVIC_EncodePriority>
 8004a26:	4602      	mov	r2, r0
 8004a28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a2c:	4611      	mov	r1, r2
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7ff ff80 	bl	8004934 <__NVIC_SetPriority>
}
 8004a34:	bf00      	nop
 8004a36:	3718      	adds	r7, #24
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	4603      	mov	r3, r0
 8004a44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7ff ff30 	bl	80048b0 <__NVIC_EnableIRQ>
}
 8004a50:	bf00      	nop
 8004a52:	3708      	adds	r7, #8
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	4603      	mov	r3, r0
 8004a60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7ff ff40 	bl	80048ec <__NVIC_DisableIRQ>
}
 8004a6c:	bf00      	nop
 8004a6e:	3708      	adds	r7, #8
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d008      	beq.n	8004a9e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2204      	movs	r2, #4
 8004a90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e022      	b.n	8004ae4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 020e 	bic.w	r2, r2, #14
 8004aac:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 0201 	bic.w	r2, r2, #1
 8004abc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac2:	f003 021c 	and.w	r2, r3, #28
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	2101      	movs	r1, #1
 8004acc:	fa01 f202 	lsl.w	r2, r1, r2
 8004ad0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004ae2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004af8:	2300      	movs	r3, #0
 8004afa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d005      	beq.n	8004b14 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2204      	movs	r2, #4
 8004b0c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	73fb      	strb	r3, [r7, #15]
 8004b12:	e029      	b.n	8004b68 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 020e 	bic.w	r2, r2, #14
 8004b22:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f022 0201 	bic.w	r2, r2, #1
 8004b32:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b38:	f003 021c 	and.w	r2, r3, #28
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b40:	2101      	movs	r1, #1
 8004b42:	fa01 f202 	lsl.w	r2, r1, r2
 8004b46:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d003      	beq.n	8004b68 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	4798      	blx	r3
    }
  }
  return status;
 8004b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b083      	sub	sp, #12
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b80:	b2db      	uxtb	r3, r3
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
	...

08004b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b9e:	e17f      	b.n	8004ea0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	2101      	movs	r1, #1
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bac:	4013      	ands	r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 8171 	beq.w	8004e9a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f003 0303 	and.w	r3, r3, #3
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d005      	beq.n	8004bd0 <HAL_GPIO_Init+0x40>
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f003 0303 	and.w	r3, r3, #3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d130      	bne.n	8004c32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	2203      	movs	r2, #3
 8004bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004be0:	43db      	mvns	r3, r3
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	4013      	ands	r3, r2
 8004be6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	68da      	ldr	r2, [r3, #12]
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	005b      	lsls	r3, r3, #1
 8004bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c06:	2201      	movs	r2, #1
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0e:	43db      	mvns	r3, r3
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	4013      	ands	r3, r2
 8004c14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	091b      	lsrs	r3, r3, #4
 8004c1c:	f003 0201 	and.w	r2, r3, #1
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	fa02 f303 	lsl.w	r3, r2, r3
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f003 0303 	and.w	r3, r3, #3
 8004c3a:	2b03      	cmp	r3, #3
 8004c3c:	d118      	bne.n	8004c70 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004c44:	2201      	movs	r2, #1
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4c:	43db      	mvns	r3, r3
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	4013      	ands	r3, r2
 8004c52:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	08db      	lsrs	r3, r3, #3
 8004c5a:	f003 0201 	and.w	r2, r3, #1
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	fa02 f303 	lsl.w	r3, r2, r3
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f003 0303 	and.w	r3, r3, #3
 8004c78:	2b03      	cmp	r3, #3
 8004c7a:	d017      	beq.n	8004cac <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	005b      	lsls	r3, r3, #1
 8004c86:	2203      	movs	r2, #3
 8004c88:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8c:	43db      	mvns	r3, r3
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	4013      	ands	r3, r2
 8004c92:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	689a      	ldr	r2, [r3, #8]
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f003 0303 	and.w	r3, r3, #3
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d123      	bne.n	8004d00 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	08da      	lsrs	r2, r3, #3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	3208      	adds	r2, #8
 8004cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f003 0307 	and.w	r3, r3, #7
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	220f      	movs	r2, #15
 8004cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd4:	43db      	mvns	r3, r3
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	691a      	ldr	r2, [r3, #16]
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f003 0307 	and.w	r3, r3, #7
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	08da      	lsrs	r2, r3, #3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	3208      	adds	r2, #8
 8004cfa:	6939      	ldr	r1, [r7, #16]
 8004cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	005b      	lsls	r3, r3, #1
 8004d0a:	2203      	movs	r2, #3
 8004d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d10:	43db      	mvns	r3, r3
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	4013      	ands	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f003 0203 	and.w	r2, r3, #3
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	005b      	lsls	r3, r3, #1
 8004d24:	fa02 f303 	lsl.w	r3, r2, r3
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 80ac 	beq.w	8004e9a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d42:	4b5f      	ldr	r3, [pc, #380]	; (8004ec0 <HAL_GPIO_Init+0x330>)
 8004d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d46:	4a5e      	ldr	r2, [pc, #376]	; (8004ec0 <HAL_GPIO_Init+0x330>)
 8004d48:	f043 0301 	orr.w	r3, r3, #1
 8004d4c:	6613      	str	r3, [r2, #96]	; 0x60
 8004d4e:	4b5c      	ldr	r3, [pc, #368]	; (8004ec0 <HAL_GPIO_Init+0x330>)
 8004d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	60bb      	str	r3, [r7, #8]
 8004d58:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004d5a:	4a5a      	ldr	r2, [pc, #360]	; (8004ec4 <HAL_GPIO_Init+0x334>)
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	089b      	lsrs	r3, r3, #2
 8004d60:	3302      	adds	r3, #2
 8004d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d66:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	f003 0303 	and.w	r3, r3, #3
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	220f      	movs	r2, #15
 8004d72:	fa02 f303 	lsl.w	r3, r2, r3
 8004d76:	43db      	mvns	r3, r3
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004d84:	d025      	beq.n	8004dd2 <HAL_GPIO_Init+0x242>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a4f      	ldr	r2, [pc, #316]	; (8004ec8 <HAL_GPIO_Init+0x338>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d01f      	beq.n	8004dce <HAL_GPIO_Init+0x23e>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a4e      	ldr	r2, [pc, #312]	; (8004ecc <HAL_GPIO_Init+0x33c>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d019      	beq.n	8004dca <HAL_GPIO_Init+0x23a>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a4d      	ldr	r2, [pc, #308]	; (8004ed0 <HAL_GPIO_Init+0x340>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d013      	beq.n	8004dc6 <HAL_GPIO_Init+0x236>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a4c      	ldr	r2, [pc, #304]	; (8004ed4 <HAL_GPIO_Init+0x344>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d00d      	beq.n	8004dc2 <HAL_GPIO_Init+0x232>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a4b      	ldr	r2, [pc, #300]	; (8004ed8 <HAL_GPIO_Init+0x348>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d007      	beq.n	8004dbe <HAL_GPIO_Init+0x22e>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a4a      	ldr	r2, [pc, #296]	; (8004edc <HAL_GPIO_Init+0x34c>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d101      	bne.n	8004dba <HAL_GPIO_Init+0x22a>
 8004db6:	2306      	movs	r3, #6
 8004db8:	e00c      	b.n	8004dd4 <HAL_GPIO_Init+0x244>
 8004dba:	2307      	movs	r3, #7
 8004dbc:	e00a      	b.n	8004dd4 <HAL_GPIO_Init+0x244>
 8004dbe:	2305      	movs	r3, #5
 8004dc0:	e008      	b.n	8004dd4 <HAL_GPIO_Init+0x244>
 8004dc2:	2304      	movs	r3, #4
 8004dc4:	e006      	b.n	8004dd4 <HAL_GPIO_Init+0x244>
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e004      	b.n	8004dd4 <HAL_GPIO_Init+0x244>
 8004dca:	2302      	movs	r3, #2
 8004dcc:	e002      	b.n	8004dd4 <HAL_GPIO_Init+0x244>
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e000      	b.n	8004dd4 <HAL_GPIO_Init+0x244>
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	f002 0203 	and.w	r2, r2, #3
 8004dda:	0092      	lsls	r2, r2, #2
 8004ddc:	4093      	lsls	r3, r2
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004de4:	4937      	ldr	r1, [pc, #220]	; (8004ec4 <HAL_GPIO_Init+0x334>)
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	089b      	lsrs	r3, r3, #2
 8004dea:	3302      	adds	r3, #2
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004df2:	4b3b      	ldr	r3, [pc, #236]	; (8004ee0 <HAL_GPIO_Init+0x350>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	43db      	mvns	r3, r3
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	4013      	ands	r3, r2
 8004e00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d003      	beq.n	8004e16 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e16:	4a32      	ldr	r2, [pc, #200]	; (8004ee0 <HAL_GPIO_Init+0x350>)
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004e1c:	4b30      	ldr	r3, [pc, #192]	; (8004ee0 <HAL_GPIO_Init+0x350>)
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	43db      	mvns	r3, r3
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	4013      	ands	r3, r2
 8004e2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d003      	beq.n	8004e40 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e40:	4a27      	ldr	r2, [pc, #156]	; (8004ee0 <HAL_GPIO_Init+0x350>)
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004e46:	4b26      	ldr	r3, [pc, #152]	; (8004ee0 <HAL_GPIO_Init+0x350>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	43db      	mvns	r3, r3
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	4013      	ands	r3, r2
 8004e54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004e6a:	4a1d      	ldr	r2, [pc, #116]	; (8004ee0 <HAL_GPIO_Init+0x350>)
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004e70:	4b1b      	ldr	r3, [pc, #108]	; (8004ee0 <HAL_GPIO_Init+0x350>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	43db      	mvns	r3, r3
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d003      	beq.n	8004e94 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004e94:	4a12      	ldr	r2, [pc, #72]	; (8004ee0 <HAL_GPIO_Init+0x350>)
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f47f ae78 	bne.w	8004ba0 <HAL_GPIO_Init+0x10>
  }
}
 8004eb0:	bf00      	nop
 8004eb2:	bf00      	nop
 8004eb4:	371c      	adds	r7, #28
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	40021000 	.word	0x40021000
 8004ec4:	40010000 	.word	0x40010000
 8004ec8:	48000400 	.word	0x48000400
 8004ecc:	48000800 	.word	0x48000800
 8004ed0:	48000c00 	.word	0x48000c00
 8004ed4:	48001000 	.word	0x48001000
 8004ed8:	48001400 	.word	0x48001400
 8004edc:	48001800 	.word	0x48001800
 8004ee0:	40010400 	.word	0x40010400

08004ee4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b087      	sub	sp, #28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004ef2:	e0cd      	b.n	8005090 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8004efc:	683a      	ldr	r2, [r7, #0]
 8004efe:	4013      	ands	r3, r2
 8004f00:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f000 80c0 	beq.w	800508a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004f0a:	4a68      	ldr	r2, [pc, #416]	; (80050ac <HAL_GPIO_DeInit+0x1c8>)
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	089b      	lsrs	r3, r3, #2
 8004f10:	3302      	adds	r3, #2
 8004f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f16:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f003 0303 	and.w	r3, r3, #3
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	220f      	movs	r2, #15
 8004f22:	fa02 f303 	lsl.w	r3, r2, r3
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	4013      	ands	r3, r2
 8004f2a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004f32:	d025      	beq.n	8004f80 <HAL_GPIO_DeInit+0x9c>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a5e      	ldr	r2, [pc, #376]	; (80050b0 <HAL_GPIO_DeInit+0x1cc>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d01f      	beq.n	8004f7c <HAL_GPIO_DeInit+0x98>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a5d      	ldr	r2, [pc, #372]	; (80050b4 <HAL_GPIO_DeInit+0x1d0>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d019      	beq.n	8004f78 <HAL_GPIO_DeInit+0x94>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a5c      	ldr	r2, [pc, #368]	; (80050b8 <HAL_GPIO_DeInit+0x1d4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d013      	beq.n	8004f74 <HAL_GPIO_DeInit+0x90>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a5b      	ldr	r2, [pc, #364]	; (80050bc <HAL_GPIO_DeInit+0x1d8>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d00d      	beq.n	8004f70 <HAL_GPIO_DeInit+0x8c>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a5a      	ldr	r2, [pc, #360]	; (80050c0 <HAL_GPIO_DeInit+0x1dc>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d007      	beq.n	8004f6c <HAL_GPIO_DeInit+0x88>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a59      	ldr	r2, [pc, #356]	; (80050c4 <HAL_GPIO_DeInit+0x1e0>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d101      	bne.n	8004f68 <HAL_GPIO_DeInit+0x84>
 8004f64:	2306      	movs	r3, #6
 8004f66:	e00c      	b.n	8004f82 <HAL_GPIO_DeInit+0x9e>
 8004f68:	2307      	movs	r3, #7
 8004f6a:	e00a      	b.n	8004f82 <HAL_GPIO_DeInit+0x9e>
 8004f6c:	2305      	movs	r3, #5
 8004f6e:	e008      	b.n	8004f82 <HAL_GPIO_DeInit+0x9e>
 8004f70:	2304      	movs	r3, #4
 8004f72:	e006      	b.n	8004f82 <HAL_GPIO_DeInit+0x9e>
 8004f74:	2303      	movs	r3, #3
 8004f76:	e004      	b.n	8004f82 <HAL_GPIO_DeInit+0x9e>
 8004f78:	2302      	movs	r3, #2
 8004f7a:	e002      	b.n	8004f82 <HAL_GPIO_DeInit+0x9e>
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e000      	b.n	8004f82 <HAL_GPIO_DeInit+0x9e>
 8004f80:	2300      	movs	r3, #0
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	f002 0203 	and.w	r2, r2, #3
 8004f88:	0092      	lsls	r2, r2, #2
 8004f8a:	4093      	lsls	r3, r2
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d132      	bne.n	8004ff8 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004f92:	4b4d      	ldr	r3, [pc, #308]	; (80050c8 <HAL_GPIO_DeInit+0x1e4>)
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	43db      	mvns	r3, r3
 8004f9a:	494b      	ldr	r1, [pc, #300]	; (80050c8 <HAL_GPIO_DeInit+0x1e4>)
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004fa0:	4b49      	ldr	r3, [pc, #292]	; (80050c8 <HAL_GPIO_DeInit+0x1e4>)
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	43db      	mvns	r3, r3
 8004fa8:	4947      	ldr	r1, [pc, #284]	; (80050c8 <HAL_GPIO_DeInit+0x1e4>)
 8004faa:	4013      	ands	r3, r2
 8004fac:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004fae:	4b46      	ldr	r3, [pc, #280]	; (80050c8 <HAL_GPIO_DeInit+0x1e4>)
 8004fb0:	68da      	ldr	r2, [r3, #12]
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	43db      	mvns	r3, r3
 8004fb6:	4944      	ldr	r1, [pc, #272]	; (80050c8 <HAL_GPIO_DeInit+0x1e4>)
 8004fb8:	4013      	ands	r3, r2
 8004fba:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004fbc:	4b42      	ldr	r3, [pc, #264]	; (80050c8 <HAL_GPIO_DeInit+0x1e4>)
 8004fbe:	689a      	ldr	r2, [r3, #8]
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	43db      	mvns	r3, r3
 8004fc4:	4940      	ldr	r1, [pc, #256]	; (80050c8 <HAL_GPIO_DeInit+0x1e4>)
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f003 0303 	and.w	r3, r3, #3
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	220f      	movs	r2, #15
 8004fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004fda:	4a34      	ldr	r2, [pc, #208]	; (80050ac <HAL_GPIO_DeInit+0x1c8>)
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	089b      	lsrs	r3, r3, #2
 8004fe0:	3302      	adds	r3, #2
 8004fe2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	43da      	mvns	r2, r3
 8004fea:	4830      	ldr	r0, [pc, #192]	; (80050ac <HAL_GPIO_DeInit+0x1c8>)
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	089b      	lsrs	r3, r3, #2
 8004ff0:	400a      	ands	r2, r1
 8004ff2:	3302      	adds	r3, #2
 8004ff4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	005b      	lsls	r3, r3, #1
 8005000:	2103      	movs	r1, #3
 8005002:	fa01 f303 	lsl.w	r3, r1, r3
 8005006:	431a      	orrs	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	08da      	lsrs	r2, r3, #3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3208      	adds	r2, #8
 8005014:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	f003 0307 	and.w	r3, r3, #7
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	220f      	movs	r2, #15
 8005022:	fa02 f303 	lsl.w	r3, r2, r3
 8005026:	43db      	mvns	r3, r3
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	08d2      	lsrs	r2, r2, #3
 800502c:	4019      	ands	r1, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	3208      	adds	r2, #8
 8005032:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	689a      	ldr	r2, [r3, #8]
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	2103      	movs	r1, #3
 8005040:	fa01 f303 	lsl.w	r3, r1, r3
 8005044:	43db      	mvns	r3, r3
 8005046:	401a      	ands	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	2101      	movs	r1, #1
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	fa01 f303 	lsl.w	r3, r1, r3
 8005058:	43db      	mvns	r3, r3
 800505a:	401a      	ands	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	68da      	ldr	r2, [r3, #12]
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	005b      	lsls	r3, r3, #1
 8005068:	2103      	movs	r1, #3
 800506a:	fa01 f303 	lsl.w	r3, r1, r3
 800506e:	43db      	mvns	r3, r3
 8005070:	401a      	ands	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800507a:	2101      	movs	r1, #1
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	fa01 f303 	lsl.w	r3, r1, r3
 8005082:	43db      	mvns	r3, r3
 8005084:	401a      	ands	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	3301      	adds	r3, #1
 800508e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	fa22 f303 	lsr.w	r3, r2, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	f47f af2b 	bne.w	8004ef4 <HAL_GPIO_DeInit+0x10>
  }
}
 800509e:	bf00      	nop
 80050a0:	bf00      	nop
 80050a2:	371c      	adds	r7, #28
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	40010000 	.word	0x40010000
 80050b0:	48000400 	.word	0x48000400
 80050b4:	48000800 	.word	0x48000800
 80050b8:	48000c00 	.word	0x48000c00
 80050bc:	48001000 	.word	0x48001000
 80050c0:	48001400 	.word	0x48001400
 80050c4:	48001800 	.word	0x48001800
 80050c8:	40010400 	.word	0x40010400

080050cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e08d      	b.n	80051fa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d106      	bne.n	80050f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7fc fc76 	bl	80019e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2224      	movs	r2, #36	; 0x24
 80050fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 0201 	bic.w	r2, r2, #1
 800510e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685a      	ldr	r2, [r3, #4]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800511c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	689a      	ldr	r2, [r3, #8]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800512c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	2b01      	cmp	r3, #1
 8005134:	d107      	bne.n	8005146 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	689a      	ldr	r2, [r3, #8]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005142:	609a      	str	r2, [r3, #8]
 8005144:	e006      	b.n	8005154 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	689a      	ldr	r2, [r3, #8]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005152:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	2b02      	cmp	r3, #2
 800515a:	d108      	bne.n	800516e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800516a:	605a      	str	r2, [r3, #4]
 800516c:	e007      	b.n	800517e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800517c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	6812      	ldr	r2, [r2, #0]
 8005188:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800518c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005190:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68da      	ldr	r2, [r3, #12]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	691a      	ldr	r2, [r3, #16]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	69d9      	ldr	r1, [r3, #28]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a1a      	ldr	r2, [r3, #32]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	430a      	orrs	r2, r1
 80051ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f042 0201 	orr.w	r2, r2, #1
 80051da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2220      	movs	r2, #32
 80051e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b082      	sub	sp, #8
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d101      	bne.n	8005214 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e021      	b.n	8005258 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2224      	movs	r2, #36	; 0x24
 8005218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 0201 	bic.w	r2, r2, #1
 800522a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f7fc fc3f 	bl	8001ab0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b088      	sub	sp, #32
 8005264:	af02      	add	r7, sp, #8
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	4608      	mov	r0, r1
 800526a:	4611      	mov	r1, r2
 800526c:	461a      	mov	r2, r3
 800526e:	4603      	mov	r3, r0
 8005270:	817b      	strh	r3, [r7, #10]
 8005272:	460b      	mov	r3, r1
 8005274:	813b      	strh	r3, [r7, #8]
 8005276:	4613      	mov	r3, r2
 8005278:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b20      	cmp	r3, #32
 8005284:	f040 80f9 	bne.w	800547a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005288:	6a3b      	ldr	r3, [r7, #32]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <HAL_I2C_Mem_Write+0x34>
 800528e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005290:	2b00      	cmp	r3, #0
 8005292:	d105      	bne.n	80052a0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f44f 7200 	mov.w	r2, #512	; 0x200
 800529a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e0ed      	b.n	800547c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d101      	bne.n	80052ae <HAL_I2C_Mem_Write+0x4e>
 80052aa:	2302      	movs	r3, #2
 80052ac:	e0e6      	b.n	800547c <HAL_I2C_Mem_Write+0x21c>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80052b6:	f7fd fb17 	bl	80028e8 <HAL_GetTick>
 80052ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	2319      	movs	r3, #25
 80052c2:	2201      	movs	r2, #1
 80052c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f001 f824 	bl	8006316 <I2C_WaitOnFlagUntilTimeout>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d001      	beq.n	80052d8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e0d1      	b.n	800547c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2221      	movs	r2, #33	; 0x21
 80052dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2240      	movs	r2, #64	; 0x40
 80052e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6a3a      	ldr	r2, [r7, #32]
 80052f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80052f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005300:	88f8      	ldrh	r0, [r7, #6]
 8005302:	893a      	ldrh	r2, [r7, #8]
 8005304:	8979      	ldrh	r1, [r7, #10]
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	9301      	str	r3, [sp, #4]
 800530a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530c:	9300      	str	r3, [sp, #0]
 800530e:	4603      	mov	r3, r0
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f000 fb67 	bl	80059e4 <I2C_RequestMemoryWrite>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d005      	beq.n	8005328 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e0a9      	b.n	800547c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800532c:	b29b      	uxth	r3, r3
 800532e:	2bff      	cmp	r3, #255	; 0xff
 8005330:	d90e      	bls.n	8005350 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	22ff      	movs	r2, #255	; 0xff
 8005336:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800533c:	b2da      	uxtb	r2, r3
 800533e:	8979      	ldrh	r1, [r7, #10]
 8005340:	2300      	movs	r3, #0
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f001 f9a7 	bl	800669c <I2C_TransferConfig>
 800534e:	e00f      	b.n	8005370 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005354:	b29a      	uxth	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800535e:	b2da      	uxtb	r2, r3
 8005360:	8979      	ldrh	r1, [r7, #10]
 8005362:	2300      	movs	r3, #0
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f001 f996 	bl	800669c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f001 f827 	bl	80063c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d001      	beq.n	8005384 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e07b      	b.n	800547c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	781a      	ldrb	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005394:	1c5a      	adds	r2, r3, #1
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539e:	b29b      	uxth	r3, r3
 80053a0:	3b01      	subs	r3, #1
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ac:	3b01      	subs	r3, #1
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d034      	beq.n	8005428 <HAL_I2C_Mem_Write+0x1c8>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d130      	bne.n	8005428 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053cc:	2200      	movs	r2, #0
 80053ce:	2180      	movs	r1, #128	; 0x80
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 ffa0 	bl	8006316 <I2C_WaitOnFlagUntilTimeout>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d001      	beq.n	80053e0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e04d      	b.n	800547c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	2bff      	cmp	r3, #255	; 0xff
 80053e8:	d90e      	bls.n	8005408 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	22ff      	movs	r2, #255	; 0xff
 80053ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f4:	b2da      	uxtb	r2, r3
 80053f6:	8979      	ldrh	r1, [r7, #10]
 80053f8:	2300      	movs	r3, #0
 80053fa:	9300      	str	r3, [sp, #0]
 80053fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f001 f94b 	bl	800669c <I2C_TransferConfig>
 8005406:	e00f      	b.n	8005428 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800540c:	b29a      	uxth	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005416:	b2da      	uxtb	r2, r3
 8005418:	8979      	ldrh	r1, [r7, #10]
 800541a:	2300      	movs	r3, #0
 800541c:	9300      	str	r3, [sp, #0]
 800541e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f001 f93a 	bl	800669c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800542c:	b29b      	uxth	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d19e      	bne.n	8005370 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f001 f80d 	bl	8006456 <I2C_WaitOnSTOPFlagUntilTimeout>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d001      	beq.n	8005446 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e01a      	b.n	800547c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2220      	movs	r2, #32
 800544c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6859      	ldr	r1, [r3, #4]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	4b0a      	ldr	r3, [pc, #40]	; (8005484 <HAL_I2C_Mem_Write+0x224>)
 800545a:	400b      	ands	r3, r1
 800545c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2220      	movs	r2, #32
 8005462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005476:	2300      	movs	r3, #0
 8005478:	e000      	b.n	800547c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800547a:	2302      	movs	r3, #2
  }
}
 800547c:	4618      	mov	r0, r3
 800547e:	3718      	adds	r7, #24
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	fe00e800 	.word	0xfe00e800

08005488 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b088      	sub	sp, #32
 800548c:	af02      	add	r7, sp, #8
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	4608      	mov	r0, r1
 8005492:	4611      	mov	r1, r2
 8005494:	461a      	mov	r2, r3
 8005496:	4603      	mov	r3, r0
 8005498:	817b      	strh	r3, [r7, #10]
 800549a:	460b      	mov	r3, r1
 800549c:	813b      	strh	r3, [r7, #8]
 800549e:	4613      	mov	r3, r2
 80054a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b20      	cmp	r3, #32
 80054ac:	f040 80fd 	bne.w	80056aa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80054b0:	6a3b      	ldr	r3, [r7, #32]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d002      	beq.n	80054bc <HAL_I2C_Mem_Read+0x34>
 80054b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d105      	bne.n	80054c8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054c2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e0f1      	b.n	80056ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d101      	bne.n	80054d6 <HAL_I2C_Mem_Read+0x4e>
 80054d2:	2302      	movs	r3, #2
 80054d4:	e0ea      	b.n	80056ac <HAL_I2C_Mem_Read+0x224>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80054de:	f7fd fa03 	bl	80028e8 <HAL_GetTick>
 80054e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	2319      	movs	r3, #25
 80054ea:	2201      	movs	r2, #1
 80054ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f000 ff10 	bl	8006316 <I2C_WaitOnFlagUntilTimeout>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d001      	beq.n	8005500 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e0d5      	b.n	80056ac <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2222      	movs	r2, #34	; 0x22
 8005504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2240      	movs	r2, #64	; 0x40
 800550c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6a3a      	ldr	r2, [r7, #32]
 800551a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005520:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005528:	88f8      	ldrh	r0, [r7, #6]
 800552a:	893a      	ldrh	r2, [r7, #8]
 800552c:	8979      	ldrh	r1, [r7, #10]
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	9301      	str	r3, [sp, #4]
 8005532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	4603      	mov	r3, r0
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f000 faa7 	bl	8005a8c <I2C_RequestMemoryRead>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d005      	beq.n	8005550 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e0ad      	b.n	80056ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005554:	b29b      	uxth	r3, r3
 8005556:	2bff      	cmp	r3, #255	; 0xff
 8005558:	d90e      	bls.n	8005578 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2201      	movs	r2, #1
 800555e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005564:	b2da      	uxtb	r2, r3
 8005566:	8979      	ldrh	r1, [r7, #10]
 8005568:	4b52      	ldr	r3, [pc, #328]	; (80056b4 <HAL_I2C_Mem_Read+0x22c>)
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f001 f893 	bl	800669c <I2C_TransferConfig>
 8005576:	e00f      	b.n	8005598 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800557c:	b29a      	uxth	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005586:	b2da      	uxtb	r2, r3
 8005588:	8979      	ldrh	r1, [r7, #10]
 800558a:	4b4a      	ldr	r3, [pc, #296]	; (80056b4 <HAL_I2C_Mem_Read+0x22c>)
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f001 f882 	bl	800669c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559e:	2200      	movs	r2, #0
 80055a0:	2104      	movs	r1, #4
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f000 feb7 	bl	8006316 <I2C_WaitOnFlagUntilTimeout>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e07c      	b.n	80056ac <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	b2d2      	uxtb	r2, r2
 80055be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	1c5a      	adds	r2, r3, #1
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ce:	3b01      	subs	r3, #1
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055da:	b29b      	uxth	r3, r3
 80055dc:	3b01      	subs	r3, #1
 80055de:	b29a      	uxth	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d034      	beq.n	8005658 <HAL_I2C_Mem_Read+0x1d0>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d130      	bne.n	8005658 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	9300      	str	r3, [sp, #0]
 80055fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fc:	2200      	movs	r2, #0
 80055fe:	2180      	movs	r1, #128	; 0x80
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f000 fe88 	bl	8006316 <I2C_WaitOnFlagUntilTimeout>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d001      	beq.n	8005610 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e04d      	b.n	80056ac <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005614:	b29b      	uxth	r3, r3
 8005616:	2bff      	cmp	r3, #255	; 0xff
 8005618:	d90e      	bls.n	8005638 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2201      	movs	r2, #1
 800561e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005624:	b2da      	uxtb	r2, r3
 8005626:	8979      	ldrh	r1, [r7, #10]
 8005628:	2300      	movs	r3, #0
 800562a:	9300      	str	r3, [sp, #0]
 800562c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f001 f833 	bl	800669c <I2C_TransferConfig>
 8005636:	e00f      	b.n	8005658 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800563c:	b29a      	uxth	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005646:	b2da      	uxtb	r2, r3
 8005648:	8979      	ldrh	r1, [r7, #10]
 800564a:	2300      	movs	r3, #0
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f001 f822 	bl	800669c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800565c:	b29b      	uxth	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d19a      	bne.n	8005598 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f000 fef5 	bl	8006456 <I2C_WaitOnSTOPFlagUntilTimeout>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e01a      	b.n	80056ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2220      	movs	r2, #32
 800567c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6859      	ldr	r1, [r3, #4]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	4b0b      	ldr	r3, [pc, #44]	; (80056b8 <HAL_I2C_Mem_Read+0x230>)
 800568a:	400b      	ands	r3, r1
 800568c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2220      	movs	r2, #32
 8005692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	e000      	b.n	80056ac <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80056aa:	2302      	movs	r3, #2
  }
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3718      	adds	r7, #24
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	80002400 	.word	0x80002400
 80056b8:	fe00e800 	.word	0xfe00e800

080056bc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00f      	beq.n	80056fe <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00a      	beq.n	80056fe <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ec:	f043 0201 	orr.w	r2, r3, #1
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056fc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00f      	beq.n	8005728 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00a      	beq.n	8005728 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005716:	f043 0208 	orr.w	r2, r3, #8
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005726:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00f      	beq.n	8005752 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00a      	beq.n	8005752 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005740:	f043 0202 	orr.w	r2, r3, #2
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005750:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005756:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f003 030b 	and.w	r3, r3, #11
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8005762:	68f9      	ldr	r1, [r7, #12]
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 fc7d 	bl	8006064 <I2C_ITError>
  }
}
 800576a:	bf00      	nop
 800576c:	3718      	adds	r7, #24
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005772:	b480      	push	{r7}
 8005774:	b083      	sub	sp, #12
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800577a:	bf00      	nop
 800577c:	370c      	adds	r7, #12
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005786:	b480      	push	{r7}
 8005788:	b083      	sub	sp, #12
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800578e:	bf00      	nop
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800579a:	b480      	push	{r7}
 800579c:	b083      	sub	sp, #12
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
 80057a2:	460b      	mov	r3, r1
 80057a4:	70fb      	strb	r3, [r7, #3]
 80057a6:	4613      	mov	r3, r2
 80057a8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80057aa:	bf00      	nop
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b083      	sub	sp, #12
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80057be:	bf00      	nop
 80057c0:	370c      	adds	r7, #12
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b083      	sub	sp, #12
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80057d2:	bf00      	nop
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057de:	b480      	push	{r7}
 80057e0:	b083      	sub	sp, #12
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80057e6:	bf00      	nop
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b086      	sub	sp, #24
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	60f8      	str	r0, [r7, #12]
 80057fa:	60b9      	str	r1, [r7, #8]
 80057fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005802:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800580e:	2b01      	cmp	r3, #1
 8005810:	d101      	bne.n	8005816 <I2C_Slave_ISR_IT+0x24>
 8005812:	2302      	movs	r3, #2
 8005814:	e0e2      	b.n	80059dc <I2C_Slave_ISR_IT+0x1ea>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	f003 0320 	and.w	r3, r3, #32
 8005824:	2b00      	cmp	r3, #0
 8005826:	d009      	beq.n	800583c <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800582e:	2b00      	cmp	r3, #0
 8005830:	d004      	beq.n	800583c <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005832:	6939      	ldr	r1, [r7, #16]
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f000 fa5d 	bl	8005cf4 <I2C_ITSlaveCplt>
 800583a:	e0ca      	b.n	80059d2 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	f003 0310 	and.w	r3, r3, #16
 8005842:	2b00      	cmp	r3, #0
 8005844:	d04b      	beq.n	80058de <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800584c:	2b00      	cmp	r3, #0
 800584e:	d046      	beq.n	80058de <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005854:	b29b      	uxth	r3, r3
 8005856:	2b00      	cmp	r3, #0
 8005858:	d128      	bne.n	80058ac <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b28      	cmp	r3, #40	; 0x28
 8005864:	d108      	bne.n	8005878 <I2C_Slave_ISR_IT+0x86>
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800586c:	d104      	bne.n	8005878 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800586e:	6939      	ldr	r1, [r7, #16]
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	f000 fba3 	bl	8005fbc <I2C_ITListenCplt>
 8005876:	e031      	b.n	80058dc <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b29      	cmp	r3, #41	; 0x29
 8005882:	d10e      	bne.n	80058a2 <I2C_Slave_ISR_IT+0xb0>
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800588a:	d00a      	beq.n	80058a2 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2210      	movs	r2, #16
 8005892:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f000 fcfc 	bl	8006292 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f000 f9ce 	bl	8005c3c <I2C_ITSlaveSeqCplt>
 80058a0:	e01c      	b.n	80058dc <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2210      	movs	r2, #16
 80058a8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80058aa:	e08f      	b.n	80059cc <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2210      	movs	r2, #16
 80058b2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b8:	f043 0204 	orr.w	r2, r3, #4
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d003      	beq.n	80058ce <I2C_Slave_ISR_IT+0xdc>
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058cc:	d17e      	bne.n	80059cc <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d2:	4619      	mov	r1, r3
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f000 fbc5 	bl	8006064 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80058da:	e077      	b.n	80059cc <I2C_Slave_ISR_IT+0x1da>
 80058dc:	e076      	b.n	80059cc <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	f003 0304 	and.w	r3, r3, #4
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d02f      	beq.n	8005948 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d02a      	beq.n	8005948 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d018      	beq.n	800592e <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005906:	b2d2      	uxtb	r2, r2
 8005908:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590e:	1c5a      	adds	r2, r3, #1
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005918:	3b01      	subs	r3, #1
 800591a:	b29a      	uxth	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005924:	b29b      	uxth	r3, r3
 8005926:	3b01      	subs	r3, #1
 8005928:	b29a      	uxth	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005932:	b29b      	uxth	r3, r3
 8005934:	2b00      	cmp	r3, #0
 8005936:	d14b      	bne.n	80059d0 <I2C_Slave_ISR_IT+0x1de>
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800593e:	d047      	beq.n	80059d0 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f000 f97b 	bl	8005c3c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005946:	e043      	b.n	80059d0 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	f003 0308 	and.w	r3, r3, #8
 800594e:	2b00      	cmp	r3, #0
 8005950:	d009      	beq.n	8005966 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005958:	2b00      	cmp	r3, #0
 800595a:	d004      	beq.n	8005966 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800595c:	6939      	ldr	r1, [r7, #16]
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f000 f8e8 	bl	8005b34 <I2C_ITAddrCplt>
 8005964:	e035      	b.n	80059d2 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	f003 0302 	and.w	r3, r3, #2
 800596c:	2b00      	cmp	r3, #0
 800596e:	d030      	beq.n	80059d2 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005976:	2b00      	cmp	r3, #0
 8005978:	d02b      	beq.n	80059d2 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800597e:	b29b      	uxth	r3, r3
 8005980:	2b00      	cmp	r3, #0
 8005982:	d018      	beq.n	80059b6 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005988:	781a      	ldrb	r2, [r3, #0]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005994:	1c5a      	adds	r2, r3, #1
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800599e:	b29b      	uxth	r3, r3
 80059a0:	3b01      	subs	r3, #1
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ac:	3b01      	subs	r3, #1
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	851a      	strh	r2, [r3, #40]	; 0x28
 80059b4:	e00d      	b.n	80059d2 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059bc:	d002      	beq.n	80059c4 <I2C_Slave_ISR_IT+0x1d2>
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d106      	bne.n	80059d2 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f000 f939 	bl	8005c3c <I2C_ITSlaveSeqCplt>
 80059ca:	e002      	b.n	80059d2 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80059cc:	bf00      	nop
 80059ce:	e000      	b.n	80059d2 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80059d0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3718      	adds	r7, #24
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af02      	add	r7, sp, #8
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	4608      	mov	r0, r1
 80059ee:	4611      	mov	r1, r2
 80059f0:	461a      	mov	r2, r3
 80059f2:	4603      	mov	r3, r0
 80059f4:	817b      	strh	r3, [r7, #10]
 80059f6:	460b      	mov	r3, r1
 80059f8:	813b      	strh	r3, [r7, #8]
 80059fa:	4613      	mov	r3, r2
 80059fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80059fe:	88fb      	ldrh	r3, [r7, #6]
 8005a00:	b2da      	uxtb	r2, r3
 8005a02:	8979      	ldrh	r1, [r7, #10]
 8005a04:	4b20      	ldr	r3, [pc, #128]	; (8005a88 <I2C_RequestMemoryWrite+0xa4>)
 8005a06:	9300      	str	r3, [sp, #0]
 8005a08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f000 fe45 	bl	800669c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a12:	69fa      	ldr	r2, [r7, #28]
 8005a14:	69b9      	ldr	r1, [r7, #24]
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f000 fcd6 	bl	80063c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e02c      	b.n	8005a80 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a26:	88fb      	ldrh	r3, [r7, #6]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d105      	bne.n	8005a38 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a2c:	893b      	ldrh	r3, [r7, #8]
 8005a2e:	b2da      	uxtb	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	629a      	str	r2, [r3, #40]	; 0x28
 8005a36:	e015      	b.n	8005a64 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005a38:	893b      	ldrh	r3, [r7, #8]
 8005a3a:	0a1b      	lsrs	r3, r3, #8
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	b2da      	uxtb	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a46:	69fa      	ldr	r2, [r7, #28]
 8005a48:	69b9      	ldr	r1, [r7, #24]
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f000 fcbc 	bl	80063c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d001      	beq.n	8005a5a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e012      	b.n	8005a80 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a5a:	893b      	ldrh	r3, [r7, #8]
 8005a5c:	b2da      	uxtb	r2, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	9300      	str	r3, [sp, #0]
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	2180      	movs	r1, #128	; 0x80
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f000 fc51 	bl	8006316 <I2C_WaitOnFlagUntilTimeout>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e000      	b.n	8005a80 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	80002000 	.word	0x80002000

08005a8c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b086      	sub	sp, #24
 8005a90:	af02      	add	r7, sp, #8
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	4608      	mov	r0, r1
 8005a96:	4611      	mov	r1, r2
 8005a98:	461a      	mov	r2, r3
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	817b      	strh	r3, [r7, #10]
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	813b      	strh	r3, [r7, #8]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005aa6:	88fb      	ldrh	r3, [r7, #6]
 8005aa8:	b2da      	uxtb	r2, r3
 8005aaa:	8979      	ldrh	r1, [r7, #10]
 8005aac:	4b20      	ldr	r3, [pc, #128]	; (8005b30 <I2C_RequestMemoryRead+0xa4>)
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f000 fdf2 	bl	800669c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ab8:	69fa      	ldr	r2, [r7, #28]
 8005aba:	69b9      	ldr	r1, [r7, #24]
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f000 fc83 	bl	80063c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e02c      	b.n	8005b26 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005acc:	88fb      	ldrh	r3, [r7, #6]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d105      	bne.n	8005ade <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ad2:	893b      	ldrh	r3, [r7, #8]
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	629a      	str	r2, [r3, #40]	; 0x28
 8005adc:	e015      	b.n	8005b0a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005ade:	893b      	ldrh	r3, [r7, #8]
 8005ae0:	0a1b      	lsrs	r3, r3, #8
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	b2da      	uxtb	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aec:	69fa      	ldr	r2, [r7, #28]
 8005aee:	69b9      	ldr	r1, [r7, #24]
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f000 fc69 	bl	80063c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d001      	beq.n	8005b00 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e012      	b.n	8005b26 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b00:	893b      	ldrh	r3, [r7, #8]
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	2200      	movs	r2, #0
 8005b12:	2140      	movs	r1, #64	; 0x40
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f000 fbfe 	bl	8006316 <I2C_WaitOnFlagUntilTimeout>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d001      	beq.n	8005b24 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e000      	b.n	8005b26 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	80002000 	.word	0x80002000

08005b34 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005b4a:	2b28      	cmp	r3, #40	; 0x28
 8005b4c:	d16a      	bne.n	8005c24 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	0c1b      	lsrs	r3, r3, #16
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	f003 0301 	and.w	r3, r3, #1
 8005b5c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	0c1b      	lsrs	r3, r3, #16
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005b6c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b7a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005b88:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d138      	bne.n	8005c04 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005b92:	897b      	ldrh	r3, [r7, #10]
 8005b94:	09db      	lsrs	r3, r3, #7
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	89bb      	ldrh	r3, [r7, #12]
 8005b9a:	4053      	eors	r3, r2
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	f003 0306 	and.w	r3, r3, #6
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d11c      	bne.n	8005be0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005ba6:	897b      	ldrh	r3, [r7, #10]
 8005ba8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bae:	1c5a      	adds	r2, r3, #1
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d13b      	bne.n	8005c34 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2208      	movs	r2, #8
 8005bc8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005bd2:	89ba      	ldrh	r2, [r7, #12]
 8005bd4:	7bfb      	ldrb	r3, [r7, #15]
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f7ff fdde 	bl	800579a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005bde:	e029      	b.n	8005c34 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005be0:	893b      	ldrh	r3, [r7, #8]
 8005be2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005be4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 fd89 	bl	8006700 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005bf6:	89ba      	ldrh	r2, [r7, #12]
 8005bf8:	7bfb      	ldrb	r3, [r7, #15]
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f7ff fdcc 	bl	800579a <HAL_I2C_AddrCallback>
}
 8005c02:	e017      	b.n	8005c34 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005c04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 fd79 	bl	8006700 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005c16:	89ba      	ldrh	r2, [r7, #12]
 8005c18:	7bfb      	ldrb	r3, [r7, #15]
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f7ff fdbc 	bl	800579a <HAL_I2C_AddrCallback>
}
 8005c22:	e007      	b.n	8005c34 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2208      	movs	r2, #8
 8005c2a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8005c34:	bf00      	nop
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d008      	beq.n	8005c70 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c6c:	601a      	str	r2, [r3, #0]
 8005c6e:	e00c      	b.n	8005c8a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d007      	beq.n	8005c8a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c88:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b29      	cmp	r3, #41	; 0x29
 8005c94:	d112      	bne.n	8005cbc <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2228      	movs	r2, #40	; 0x28
 8005c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2221      	movs	r2, #33	; 0x21
 8005ca2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005ca4:	2101      	movs	r1, #1
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 fd2a 	bl	8006700 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f7ff fd5c 	bl	8005772 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005cba:	e017      	b.n	8005cec <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	2b2a      	cmp	r3, #42	; 0x2a
 8005cc6:	d111      	bne.n	8005cec <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2228      	movs	r2, #40	; 0x28
 8005ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2222      	movs	r2, #34	; 0x22
 8005cd4:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005cd6:	2102      	movs	r1, #2
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 fd11 	bl	8006700 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7ff fd4d 	bl	8005786 <HAL_I2C_SlaveRxCpltCallback>
}
 8005cec:	bf00      	nop
 8005cee:	3710      	adds	r7, #16
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d16:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2220      	movs	r2, #32
 8005d1e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005d20:	7afb      	ldrb	r3, [r7, #11]
 8005d22:	2b21      	cmp	r3, #33	; 0x21
 8005d24:	d002      	beq.n	8005d2c <I2C_ITSlaveCplt+0x38>
 8005d26:	7afb      	ldrb	r3, [r7, #11]
 8005d28:	2b29      	cmp	r3, #41	; 0x29
 8005d2a:	d108      	bne.n	8005d3e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005d2c:	f248 0101 	movw	r1, #32769	; 0x8001
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 fce5 	bl	8006700 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2221      	movs	r2, #33	; 0x21
 8005d3a:	631a      	str	r2, [r3, #48]	; 0x30
 8005d3c:	e019      	b.n	8005d72 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005d3e:	7afb      	ldrb	r3, [r7, #11]
 8005d40:	2b22      	cmp	r3, #34	; 0x22
 8005d42:	d002      	beq.n	8005d4a <I2C_ITSlaveCplt+0x56>
 8005d44:	7afb      	ldrb	r3, [r7, #11]
 8005d46:	2b2a      	cmp	r3, #42	; 0x2a
 8005d48:	d108      	bne.n	8005d5c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005d4a:	f248 0102 	movw	r1, #32770	; 0x8002
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 fcd6 	bl	8006700 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2222      	movs	r2, #34	; 0x22
 8005d58:	631a      	str	r2, [r3, #48]	; 0x30
 8005d5a:	e00a      	b.n	8005d72 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8005d5c:	7afb      	ldrb	r3, [r7, #11]
 8005d5e:	2b28      	cmp	r3, #40	; 0x28
 8005d60:	d107      	bne.n	8005d72 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005d62:	f248 0103 	movw	r1, #32771	; 0x8003
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 fcca 	bl	8006700 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d80:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	6859      	ldr	r1, [r3, #4]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	4b89      	ldr	r3, [pc, #548]	; (8005fb4 <I2C_ITSlaveCplt+0x2c0>)
 8005d8e:	400b      	ands	r3, r1
 8005d90:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fa7d 	bl	8006292 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d013      	beq.n	8005dca <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005db0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d01f      	beq.n	8005dfa <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005dc8:	e017      	b.n	8005dfa <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d012      	beq.n	8005dfa <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005de2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d006      	beq.n	8005dfa <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f003 0304 	and.w	r3, r3, #4
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d020      	beq.n	8005e46 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	f023 0304 	bic.w	r3, r3, #4
 8005e0a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e16:	b2d2      	uxtb	r2, r2
 8005e18:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1e:	1c5a      	adds	r2, r3, #1
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00c      	beq.n	8005e46 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e30:	3b01      	subs	r3, #1
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d005      	beq.n	8005e5c <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e54:	f043 0204 	orr.w	r2, r3, #4
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	f003 0310 	and.w	r3, r3, #16
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d049      	beq.n	8005efa <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d044      	beq.n	8005efa <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d128      	bne.n	8005ecc <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b28      	cmp	r3, #40	; 0x28
 8005e84:	d108      	bne.n	8005e98 <I2C_ITSlaveCplt+0x1a4>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e8c:	d104      	bne.n	8005e98 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005e8e:	6979      	ldr	r1, [r7, #20]
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 f893 	bl	8005fbc <I2C_ITListenCplt>
 8005e96:	e030      	b.n	8005efa <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	2b29      	cmp	r3, #41	; 0x29
 8005ea2:	d10e      	bne.n	8005ec2 <I2C_ITSlaveCplt+0x1ce>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005eaa:	d00a      	beq.n	8005ec2 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2210      	movs	r2, #16
 8005eb2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 f9ec 	bl	8006292 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f7ff febe 	bl	8005c3c <I2C_ITSlaveSeqCplt>
 8005ec0:	e01b      	b.n	8005efa <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2210      	movs	r2, #16
 8005ec8:	61da      	str	r2, [r3, #28]
 8005eca:	e016      	b.n	8005efa <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2210      	movs	r2, #16
 8005ed2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed8:	f043 0204 	orr.w	r2, r3, #4
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <I2C_ITSlaveCplt+0x1fa>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005eec:	d105      	bne.n	8005efa <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 f8b5 	bl	8006064 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d010      	beq.n	8005f32 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f14:	4619      	mov	r1, r3
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f8a4 	bl	8006064 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	2b28      	cmp	r3, #40	; 0x28
 8005f26:	d141      	bne.n	8005fac <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005f28:	6979      	ldr	r1, [r7, #20]
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f846 	bl	8005fbc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005f30:	e03c      	b.n	8005fac <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f36:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f3a:	d014      	beq.n	8005f66 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f7ff fe7d 	bl	8005c3c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a1c      	ldr	r2, [pc, #112]	; (8005fb8 <I2C_ITSlaveCplt+0x2c4>)
 8005f46:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2220      	movs	r2, #32
 8005f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7ff fc29 	bl	80057b6 <HAL_I2C_ListenCpltCallback>
}
 8005f64:	e022      	b.n	8005fac <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b22      	cmp	r3, #34	; 0x22
 8005f70:	d10e      	bne.n	8005f90 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2220      	movs	r2, #32
 8005f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f7ff fbfc 	bl	8005786 <HAL_I2C_SlaveRxCpltCallback>
}
 8005f8e:	e00d      	b.n	8005fac <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2220      	movs	r2, #32
 8005f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f7ff fbe3 	bl	8005772 <HAL_I2C_SlaveTxCpltCallback>
}
 8005fac:	bf00      	nop
 8005fae:	3718      	adds	r7, #24
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	fe00e800 	.word	0xfe00e800
 8005fb8:	ffff0000 	.word	0xffff0000

08005fbc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a25      	ldr	r2, [pc, #148]	; (8006060 <I2C_ITListenCplt+0xa4>)
 8005fca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2220      	movs	r2, #32
 8005fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	f003 0304 	and.w	r3, r3, #4
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d022      	beq.n	8006038 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffc:	b2d2      	uxtb	r2, r2
 8005ffe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006004:	1c5a      	adds	r2, r3, #1
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800600e:	2b00      	cmp	r3, #0
 8006010:	d012      	beq.n	8006038 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006016:	3b01      	subs	r3, #1
 8006018:	b29a      	uxth	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006022:	b29b      	uxth	r3, r3
 8006024:	3b01      	subs	r3, #1
 8006026:	b29a      	uxth	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006030:	f043 0204 	orr.w	r2, r3, #4
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006038:	f248 0103 	movw	r1, #32771	; 0x8003
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 fb5f 	bl	8006700 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2210      	movs	r2, #16
 8006048:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7ff fbaf 	bl	80057b6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006058:	bf00      	nop
 800605a:	3708      	adds	r7, #8
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	ffff0000 	.word	0xffff0000

08006064 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006074:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a6d      	ldr	r2, [pc, #436]	; (8006238 <I2C_ITError+0x1d4>)
 8006082:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	431a      	orrs	r2, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006096:	7bfb      	ldrb	r3, [r7, #15]
 8006098:	2b28      	cmp	r3, #40	; 0x28
 800609a:	d005      	beq.n	80060a8 <I2C_ITError+0x44>
 800609c:	7bfb      	ldrb	r3, [r7, #15]
 800609e:	2b29      	cmp	r3, #41	; 0x29
 80060a0:	d002      	beq.n	80060a8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80060a2:	7bfb      	ldrb	r3, [r7, #15]
 80060a4:	2b2a      	cmp	r3, #42	; 0x2a
 80060a6:	d10b      	bne.n	80060c0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80060a8:	2103      	movs	r1, #3
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 fb28 	bl	8006700 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2228      	movs	r2, #40	; 0x28
 80060b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a60      	ldr	r2, [pc, #384]	; (800623c <I2C_ITError+0x1d8>)
 80060bc:	635a      	str	r2, [r3, #52]	; 0x34
 80060be:	e030      	b.n	8006122 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80060c0:	f248 0103 	movw	r1, #32771	; 0x8003
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 fb1b 	bl	8006700 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f8e1 	bl	8006292 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b60      	cmp	r3, #96	; 0x60
 80060da:	d01f      	beq.n	800611c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2220      	movs	r2, #32
 80060e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	f003 0320 	and.w	r3, r3, #32
 80060ee:	2b20      	cmp	r3, #32
 80060f0:	d114      	bne.n	800611c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	f003 0310 	and.w	r3, r3, #16
 80060fc:	2b10      	cmp	r3, #16
 80060fe:	d109      	bne.n	8006114 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2210      	movs	r2, #16
 8006106:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800610c:	f043 0204 	orr.w	r2, r3, #4
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2220      	movs	r2, #32
 800611a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006126:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612c:	2b00      	cmp	r3, #0
 800612e:	d039      	beq.n	80061a4 <I2C_ITError+0x140>
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	2b11      	cmp	r3, #17
 8006134:	d002      	beq.n	800613c <I2C_ITError+0xd8>
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	2b21      	cmp	r3, #33	; 0x21
 800613a:	d133      	bne.n	80061a4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006146:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800614a:	d107      	bne.n	800615c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800615a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006160:	4618      	mov	r0, r3
 8006162:	f7fe fd06 	bl	8004b72 <HAL_DMA_GetState>
 8006166:	4603      	mov	r3, r0
 8006168:	2b01      	cmp	r3, #1
 800616a:	d017      	beq.n	800619c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006170:	4a33      	ldr	r2, [pc, #204]	; (8006240 <I2C_ITError+0x1dc>)
 8006172:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006180:	4618      	mov	r0, r3
 8006182:	f7fe fcb5 	bl	8004af0 <HAL_DMA_Abort_IT>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d04d      	beq.n	8006228 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006196:	4610      	mov	r0, r2
 8006198:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800619a:	e045      	b.n	8006228 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 f851 	bl	8006244 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80061a2:	e041      	b.n	8006228 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d039      	beq.n	8006220 <I2C_ITError+0x1bc>
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	2b12      	cmp	r3, #18
 80061b0:	d002      	beq.n	80061b8 <I2C_ITError+0x154>
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	2b22      	cmp	r3, #34	; 0x22
 80061b6:	d133      	bne.n	8006220 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061c6:	d107      	bne.n	80061d8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061d6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061dc:	4618      	mov	r0, r3
 80061de:	f7fe fcc8 	bl	8004b72 <HAL_DMA_GetState>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d017      	beq.n	8006218 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ec:	4a14      	ldr	r2, [pc, #80]	; (8006240 <I2C_ITError+0x1dc>)
 80061ee:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7fe fc77 	bl	8004af0 <HAL_DMA_Abort_IT>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d011      	beq.n	800622c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800620c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006212:	4610      	mov	r0, r2
 8006214:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006216:	e009      	b.n	800622c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 f813 	bl	8006244 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800621e:	e005      	b.n	800622c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f80f 	bl	8006244 <I2C_TreatErrorCallback>
  }
}
 8006226:	e002      	b.n	800622e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006228:	bf00      	nop
 800622a:	e000      	b.n	800622e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800622c:	bf00      	nop
}
 800622e:	bf00      	nop
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	ffff0000 	.word	0xffff0000
 800623c:	080057f3 	.word	0x080057f3
 8006240:	080062db 	.word	0x080062db

08006244 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006252:	b2db      	uxtb	r3, r3
 8006254:	2b60      	cmp	r3, #96	; 0x60
 8006256:	d10e      	bne.n	8006276 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2220      	movs	r2, #32
 800625c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f7ff fab5 	bl	80057de <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006274:	e009      	b.n	800628a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f7ff faa0 	bl	80057ca <HAL_I2C_ErrorCallback>
}
 800628a:	bf00      	nop
 800628c:	3708      	adds	r7, #8
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006292:	b480      	push	{r7}
 8006294:	b083      	sub	sp, #12
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	f003 0302 	and.w	r3, r3, #2
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d103      	bne.n	80062b0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2200      	movs	r2, #0
 80062ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d007      	beq.n	80062ce <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	699a      	ldr	r2, [r3, #24]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f042 0201 	orr.w	r2, r2, #1
 80062cc:	619a      	str	r2, [r3, #24]
  }
}
 80062ce:	bf00      	nop
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80062da:	b580      	push	{r7, lr}
 80062dc:	b084      	sub	sp, #16
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d003      	beq.n	80062f8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f4:	2200      	movs	r2, #0
 80062f6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d003      	beq.n	8006308 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006304:	2200      	movs	r2, #0
 8006306:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f7ff ff9b 	bl	8006244 <I2C_TreatErrorCallback>
}
 800630e:	bf00      	nop
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b084      	sub	sp, #16
 800631a:	af00      	add	r7, sp, #0
 800631c:	60f8      	str	r0, [r7, #12]
 800631e:	60b9      	str	r1, [r7, #8]
 8006320:	603b      	str	r3, [r7, #0]
 8006322:	4613      	mov	r3, r2
 8006324:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006326:	e03b      	b.n	80063a0 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006328:	69ba      	ldr	r2, [r7, #24]
 800632a:	6839      	ldr	r1, [r7, #0]
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f000 f8d5 	bl	80064dc <I2C_IsErrorOccurred>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d001      	beq.n	800633c <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e041      	b.n	80063c0 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006342:	d02d      	beq.n	80063a0 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006344:	f7fc fad0 	bl	80028e8 <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	683a      	ldr	r2, [r7, #0]
 8006350:	429a      	cmp	r2, r3
 8006352:	d302      	bcc.n	800635a <I2C_WaitOnFlagUntilTimeout+0x44>
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d122      	bne.n	80063a0 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	699a      	ldr	r2, [r3, #24]
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	4013      	ands	r3, r2
 8006364:	68ba      	ldr	r2, [r7, #8]
 8006366:	429a      	cmp	r2, r3
 8006368:	bf0c      	ite	eq
 800636a:	2301      	moveq	r3, #1
 800636c:	2300      	movne	r3, #0
 800636e:	b2db      	uxtb	r3, r3
 8006370:	461a      	mov	r2, r3
 8006372:	79fb      	ldrb	r3, [r7, #7]
 8006374:	429a      	cmp	r2, r3
 8006376:	d113      	bne.n	80063a0 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800637c:	f043 0220 	orr.w	r2, r3, #32
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2220      	movs	r2, #32
 8006388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e00f      	b.n	80063c0 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	699a      	ldr	r2, [r3, #24]
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	4013      	ands	r3, r2
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	bf0c      	ite	eq
 80063b0:	2301      	moveq	r3, #1
 80063b2:	2300      	movne	r3, #0
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	461a      	mov	r2, r3
 80063b8:	79fb      	ldrb	r3, [r7, #7]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d0b4      	beq.n	8006328 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80063d4:	e033      	b.n	800643e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	68b9      	ldr	r1, [r7, #8]
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f000 f87e 	bl	80064dc <I2C_IsErrorOccurred>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d001      	beq.n	80063ea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e031      	b.n	800644e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f0:	d025      	beq.n	800643e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063f2:	f7fc fa79 	bl	80028e8 <HAL_GetTick>
 80063f6:	4602      	mov	r2, r0
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d302      	bcc.n	8006408 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d11a      	bne.n	800643e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	f003 0302 	and.w	r3, r3, #2
 8006412:	2b02      	cmp	r3, #2
 8006414:	d013      	beq.n	800643e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800641a:	f043 0220 	orr.w	r2, r3, #32
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2220      	movs	r2, #32
 8006426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e007      	b.n	800644e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	f003 0302 	and.w	r3, r3, #2
 8006448:	2b02      	cmp	r3, #2
 800644a:	d1c4      	bne.n	80063d6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006456:	b580      	push	{r7, lr}
 8006458:	b084      	sub	sp, #16
 800645a:	af00      	add	r7, sp, #0
 800645c:	60f8      	str	r0, [r7, #12]
 800645e:	60b9      	str	r1, [r7, #8]
 8006460:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006462:	e02f      	b.n	80064c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	68b9      	ldr	r1, [r7, #8]
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f000 f837 	bl	80064dc <I2C_IsErrorOccurred>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d001      	beq.n	8006478 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e02d      	b.n	80064d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006478:	f7fc fa36 	bl	80028e8 <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	429a      	cmp	r2, r3
 8006486:	d302      	bcc.n	800648e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d11a      	bne.n	80064c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	f003 0320 	and.w	r3, r3, #32
 8006498:	2b20      	cmp	r3, #32
 800649a:	d013      	beq.n	80064c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064a0:	f043 0220 	orr.w	r2, r3, #32
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2220      	movs	r2, #32
 80064ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e007      	b.n	80064d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	f003 0320 	and.w	r3, r3, #32
 80064ce:	2b20      	cmp	r3, #32
 80064d0:	d1c8      	bne.n	8006464 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b08a      	sub	sp, #40	; 0x28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064e8:	2300      	movs	r3, #0
 80064ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80064f6:	2300      	movs	r3, #0
 80064f8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	f003 0310 	and.w	r3, r3, #16
 8006504:	2b00      	cmp	r3, #0
 8006506:	d068      	beq.n	80065da <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2210      	movs	r2, #16
 800650e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006510:	e049      	b.n	80065a6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006518:	d045      	beq.n	80065a6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800651a:	f7fc f9e5 	bl	80028e8 <HAL_GetTick>
 800651e:	4602      	mov	r2, r0
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	429a      	cmp	r2, r3
 8006528:	d302      	bcc.n	8006530 <I2C_IsErrorOccurred+0x54>
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d13a      	bne.n	80065a6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800653a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006542:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800654e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006552:	d121      	bne.n	8006598 <I2C_IsErrorOccurred+0xbc>
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800655a:	d01d      	beq.n	8006598 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800655c:	7cfb      	ldrb	r3, [r7, #19]
 800655e:	2b20      	cmp	r3, #32
 8006560:	d01a      	beq.n	8006598 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006570:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006572:	f7fc f9b9 	bl	80028e8 <HAL_GetTick>
 8006576:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006578:	e00e      	b.n	8006598 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800657a:	f7fc f9b5 	bl	80028e8 <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	2b19      	cmp	r3, #25
 8006586:	d907      	bls.n	8006598 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006588:	6a3b      	ldr	r3, [r7, #32]
 800658a:	f043 0320 	orr.w	r3, r3, #32
 800658e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006596:	e006      	b.n	80065a6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	f003 0320 	and.w	r3, r3, #32
 80065a2:	2b20      	cmp	r3, #32
 80065a4:	d1e9      	bne.n	800657a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	f003 0320 	and.w	r3, r3, #32
 80065b0:	2b20      	cmp	r3, #32
 80065b2:	d003      	beq.n	80065bc <I2C_IsErrorOccurred+0xe0>
 80065b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d0aa      	beq.n	8006512 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80065bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d103      	bne.n	80065cc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2220      	movs	r2, #32
 80065ca:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80065cc:	6a3b      	ldr	r3, [r7, #32]
 80065ce:	f043 0304 	orr.w	r3, r3, #4
 80065d2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	699b      	ldr	r3, [r3, #24]
 80065e0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00b      	beq.n	8006604 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80065ec:	6a3b      	ldr	r3, [r7, #32]
 80065ee:	f043 0301 	orr.w	r3, r3, #1
 80065f2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00b      	beq.n	8006626 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800660e:	6a3b      	ldr	r3, [r7, #32]
 8006610:	f043 0308 	orr.w	r3, r3, #8
 8006614:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800661e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00b      	beq.n	8006648 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006630:	6a3b      	ldr	r3, [r7, #32]
 8006632:	f043 0302 	orr.w	r3, r3, #2
 8006636:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006640:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006648:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800664c:	2b00      	cmp	r3, #0
 800664e:	d01c      	beq.n	800668a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f7ff fe1e 	bl	8006292 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	6859      	ldr	r1, [r3, #4]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	4b0d      	ldr	r3, [pc, #52]	; (8006698 <I2C_IsErrorOccurred+0x1bc>)
 8006662:	400b      	ands	r3, r1
 8006664:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800666a:	6a3b      	ldr	r3, [r7, #32]
 800666c:	431a      	orrs	r2, r3
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2220      	movs	r2, #32
 8006676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800668a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800668e:	4618      	mov	r0, r3
 8006690:	3728      	adds	r7, #40	; 0x28
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	fe00e800 	.word	0xfe00e800

0800669c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800669c:	b480      	push	{r7}
 800669e:	b087      	sub	sp, #28
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	607b      	str	r3, [r7, #4]
 80066a6:	460b      	mov	r3, r1
 80066a8:	817b      	strh	r3, [r7, #10]
 80066aa:	4613      	mov	r3, r2
 80066ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80066ae:	897b      	ldrh	r3, [r7, #10]
 80066b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80066b4:	7a7b      	ldrb	r3, [r7, #9]
 80066b6:	041b      	lsls	r3, r3, #16
 80066b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80066bc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80066c2:	6a3b      	ldr	r3, [r7, #32]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066ca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	685a      	ldr	r2, [r3, #4]
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	0d5b      	lsrs	r3, r3, #21
 80066d6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80066da:	4b08      	ldr	r3, [pc, #32]	; (80066fc <I2C_TransferConfig+0x60>)
 80066dc:	430b      	orrs	r3, r1
 80066de:	43db      	mvns	r3, r3
 80066e0:	ea02 0103 	and.w	r1, r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	697a      	ldr	r2, [r7, #20]
 80066ea:	430a      	orrs	r2, r1
 80066ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80066ee:	bf00      	nop
 80066f0:	371c      	adds	r7, #28
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	03ff63ff 	.word	0x03ff63ff

08006700 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	460b      	mov	r3, r1
 800670a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800670c:	2300      	movs	r3, #0
 800670e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006710:	887b      	ldrh	r3, [r7, #2]
 8006712:	f003 0301 	and.w	r3, r3, #1
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00f      	beq.n	800673a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8006720:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006728:	b2db      	uxtb	r3, r3
 800672a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800672e:	2b28      	cmp	r3, #40	; 0x28
 8006730:	d003      	beq.n	800673a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006738:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800673a:	887b      	ldrh	r3, [r7, #2]
 800673c:	f003 0302 	and.w	r3, r3, #2
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00f      	beq.n	8006764 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800674a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006752:	b2db      	uxtb	r3, r3
 8006754:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006758:	2b28      	cmp	r3, #40	; 0x28
 800675a:	d003      	beq.n	8006764 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006762:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006764:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006768:	2b00      	cmp	r3, #0
 800676a:	da03      	bge.n	8006774 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006772:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006774:	887b      	ldrh	r3, [r7, #2]
 8006776:	2b10      	cmp	r3, #16
 8006778:	d103      	bne.n	8006782 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006780:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006782:	887b      	ldrh	r3, [r7, #2]
 8006784:	2b20      	cmp	r3, #32
 8006786:	d103      	bne.n	8006790 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f043 0320 	orr.w	r3, r3, #32
 800678e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006790:	887b      	ldrh	r3, [r7, #2]
 8006792:	2b40      	cmp	r3, #64	; 0x40
 8006794:	d103      	bne.n	800679e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800679c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	6819      	ldr	r1, [r3, #0]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	43da      	mvns	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	400a      	ands	r2, r1
 80067ae:	601a      	str	r2, [r3, #0]
}
 80067b0:	bf00      	nop
 80067b2:	3714      	adds	r7, #20
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b20      	cmp	r3, #32
 80067d0:	d138      	bne.n	8006844 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d101      	bne.n	80067e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80067dc:	2302      	movs	r3, #2
 80067de:	e032      	b.n	8006846 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2224      	movs	r2, #36	; 0x24
 80067ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f022 0201 	bic.w	r2, r2, #1
 80067fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800680e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	6819      	ldr	r1, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	430a      	orrs	r2, r1
 800681e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f042 0201 	orr.w	r2, r2, #1
 800682e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2220      	movs	r2, #32
 8006834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006840:	2300      	movs	r3, #0
 8006842:	e000      	b.n	8006846 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006844:	2302      	movs	r3, #2
  }
}
 8006846:	4618      	mov	r0, r3
 8006848:	370c      	adds	r7, #12
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr

08006852 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006852:	b480      	push	{r7}
 8006854:	b085      	sub	sp, #20
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
 800685a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006862:	b2db      	uxtb	r3, r3
 8006864:	2b20      	cmp	r3, #32
 8006866:	d139      	bne.n	80068dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800686e:	2b01      	cmp	r3, #1
 8006870:	d101      	bne.n	8006876 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006872:	2302      	movs	r3, #2
 8006874:	e033      	b.n	80068de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2224      	movs	r2, #36	; 0x24
 8006882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f022 0201 	bic.w	r2, r2, #1
 8006894:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80068a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	021b      	lsls	r3, r3, #8
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f042 0201 	orr.w	r2, r2, #1
 80068c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2220      	movs	r2, #32
 80068cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80068d8:	2300      	movs	r3, #0
 80068da:	e000      	b.n	80068de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80068dc:	2302      	movs	r3, #2
  }
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3714      	adds	r7, #20
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
	...

080068ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80068ec:	b480      	push	{r7}
 80068ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80068f0:	4b04      	ldr	r3, [pc, #16]	; (8006904 <HAL_PWREx_GetVoltageRange+0x18>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	40007000 	.word	0x40007000

08006908 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006916:	d130      	bne.n	800697a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006918:	4b23      	ldr	r3, [pc, #140]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006924:	d038      	beq.n	8006998 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006926:	4b20      	ldr	r3, [pc, #128]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800692e:	4a1e      	ldr	r2, [pc, #120]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006930:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006934:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006936:	4b1d      	ldr	r3, [pc, #116]	; (80069ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2232      	movs	r2, #50	; 0x32
 800693c:	fb02 f303 	mul.w	r3, r2, r3
 8006940:	4a1b      	ldr	r2, [pc, #108]	; (80069b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006942:	fba2 2303 	umull	r2, r3, r2, r3
 8006946:	0c9b      	lsrs	r3, r3, #18
 8006948:	3301      	adds	r3, #1
 800694a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800694c:	e002      	b.n	8006954 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	3b01      	subs	r3, #1
 8006952:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006954:	4b14      	ldr	r3, [pc, #80]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006956:	695b      	ldr	r3, [r3, #20]
 8006958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800695c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006960:	d102      	bne.n	8006968 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1f2      	bne.n	800694e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006968:	4b0f      	ldr	r3, [pc, #60]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800696a:	695b      	ldr	r3, [r3, #20]
 800696c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006974:	d110      	bne.n	8006998 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e00f      	b.n	800699a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800697a:	4b0b      	ldr	r3, [pc, #44]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006986:	d007      	beq.n	8006998 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006988:	4b07      	ldr	r3, [pc, #28]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006990:	4a05      	ldr	r2, [pc, #20]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006992:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006996:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	40007000 	.word	0x40007000
 80069ac:	200001b8 	.word	0x200001b8
 80069b0:	431bde83 	.word	0x431bde83

080069b4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b086      	sub	sp, #24
 80069b8:	af02      	add	r7, sp, #8
 80069ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80069bc:	f7fb ff94 	bl	80028e8 <HAL_GetTick>
 80069c0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d101      	bne.n	80069cc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e063      	b.n	8006a94 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d10b      	bne.n	80069f0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f7fb f88b 	bl	8001afc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80069e6:	f241 3188 	movw	r1, #5000	; 0x1388
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f858 	bl	8006aa0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	3b01      	subs	r3, #1
 8006a00:	021a      	lsls	r2, r3, #8
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	430a      	orrs	r2, r1
 8006a08:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0e:	9300      	str	r3, [sp, #0]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	2120      	movs	r1, #32
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f850 	bl	8006abc <QSPI_WaitFlagStateUntilTimeout>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006a20:	7afb      	ldrb	r3, [r7, #11]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d131      	bne.n	8006a8a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006a30:	f023 0310 	bic.w	r3, r3, #16
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	6852      	ldr	r2, [r2, #4]
 8006a38:	0611      	lsls	r1, r2, #24
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	68d2      	ldr	r2, [r2, #12]
 8006a3e:	4311      	orrs	r1, r2
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	6812      	ldr	r2, [r2, #0]
 8006a44:	430b      	orrs	r3, r1
 8006a46:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	685a      	ldr	r2, [r3, #4]
 8006a4e:	4b13      	ldr	r3, [pc, #76]	; (8006a9c <HAL_QSPI_Init+0xe8>)
 8006a50:	4013      	ands	r3, r2
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	6912      	ldr	r2, [r2, #16]
 8006a56:	0411      	lsls	r1, r2, #16
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	6952      	ldr	r2, [r2, #20]
 8006a5c:	4311      	orrs	r1, r2
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	6992      	ldr	r2, [r2, #24]
 8006a62:	4311      	orrs	r1, r2
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	6812      	ldr	r2, [r2, #0]
 8006a68:	430b      	orrs	r3, r1
 8006a6a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f042 0201 	orr.w	r2, r2, #1
 8006a7a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8006a92:	7afb      	ldrb	r3, [r7, #11]
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	ffe0f8fe 	.word	0xffe0f8fe

08006aa0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	683a      	ldr	r2, [r7, #0]
 8006aae:	641a      	str	r2, [r3, #64]	; 0x40
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	603b      	str	r3, [r7, #0]
 8006ac8:	4613      	mov	r3, r2
 8006aca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006acc:	e01a      	b.n	8006b04 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad4:	d016      	beq.n	8006b04 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ad6:	f7fb ff07 	bl	80028e8 <HAL_GetTick>
 8006ada:	4602      	mov	r2, r0
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	1ad3      	subs	r3, r2, r3
 8006ae0:	69ba      	ldr	r2, [r7, #24]
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d302      	bcc.n	8006aec <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d10b      	bne.n	8006b04 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2204      	movs	r2, #4
 8006af0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af8:	f043 0201 	orr.w	r2, r3, #1
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e00e      	b.n	8006b22 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	689a      	ldr	r2, [r3, #8]
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	bf14      	ite	ne
 8006b12:	2301      	movne	r3, #1
 8006b14:	2300      	moveq	r3, #0
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	461a      	mov	r2, r3
 8006b1a:	79fb      	ldrb	r3, [r7, #7]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d1d6      	bne.n	8006ace <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
	...

08006b2c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b088      	sub	sp, #32
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d101      	bne.n	8006b3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e3ca      	b.n	80072d4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b3e:	4b97      	ldr	r3, [pc, #604]	; (8006d9c <HAL_RCC_OscConfig+0x270>)
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	f003 030c 	and.w	r3, r3, #12
 8006b46:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b48:	4b94      	ldr	r3, [pc, #592]	; (8006d9c <HAL_RCC_OscConfig+0x270>)
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	f003 0303 	and.w	r3, r3, #3
 8006b50:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 0310 	and.w	r3, r3, #16
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f000 80e4 	beq.w	8006d28 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d007      	beq.n	8006b76 <HAL_RCC_OscConfig+0x4a>
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	2b0c      	cmp	r3, #12
 8006b6a:	f040 808b 	bne.w	8006c84 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	f040 8087 	bne.w	8006c84 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006b76:	4b89      	ldr	r3, [pc, #548]	; (8006d9c <HAL_RCC_OscConfig+0x270>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d005      	beq.n	8006b8e <HAL_RCC_OscConfig+0x62>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d101      	bne.n	8006b8e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e3a2      	b.n	80072d4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6a1a      	ldr	r2, [r3, #32]
 8006b92:	4b82      	ldr	r3, [pc, #520]	; (8006d9c <HAL_RCC_OscConfig+0x270>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 0308 	and.w	r3, r3, #8
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d004      	beq.n	8006ba8 <HAL_RCC_OscConfig+0x7c>
 8006b9e:	4b7f      	ldr	r3, [pc, #508]	; (8006d9c <HAL_RCC_OscConfig+0x270>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ba6:	e005      	b.n	8006bb4 <HAL_RCC_OscConfig+0x88>
 8006ba8:	4b7c      	ldr	r3, [pc, #496]	; (8006d9c <HAL_RCC_OscConfig+0x270>)
 8006baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bae:	091b      	lsrs	r3, r3, #4
 8006bb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d223      	bcs.n	8006c00 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6a1b      	ldr	r3, [r3, #32]
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f000 fd87 	bl	80076d0 <RCC_SetFlashLatencyFromMSIRange>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d001      	beq.n	8006bcc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e383      	b.n	80072d4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006bcc:	4b73      	ldr	r3, [pc, #460]	; (8006d9c <HAL_RCC_OscConfig+0x270>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a72      	ldr	r2, [pc, #456]	; (8006d9c <HAL_RCC_OscConfig+0x270>)
 8006bd2:	f043 0308 	orr.w	r3, r3, #8
 8006bd6:	6013      	str	r3, [r2, #0]
 8006bd8:	4b70      	ldr	r3, [pc, #448]	; (8006d9c <HAL_RCC_OscConfig+0x270>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a1b      	ldr	r3, [r3, #32]
 8006be4:	496d      	ldr	r1, [pc, #436]	; (8006d9c <HAL_RCC_OscConfig+0x270>)
 8006be6:	4313      	orrs	r3, r2
 8006be8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006bea:	4b6c      	ldr	r3, [pc, #432]	; (8006d9c <HAL_RCC_OscConfig+0x270>)
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	69db      	ldr	r3, [r3, #28]
 8006bf6:	021b      	lsls	r3, r3, #8
 8006bf8:	4968      	ldr	r1, [pc, #416]	; (8006d9c <HAL_RCC_OscConfig+0x270>)
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	604b      	str	r3, [r1, #4]
 8006bfe:	e025      	b.n	8006c4c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006c00:	4b66      	ldr	r3, [pc, #408]	; (8006d9c <HAL_RCC_OscConfig+0x270>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a65      	ldr	r2, [pc, #404]	; (8006d9c <HAL_RCC_OscConfig+0x270>)
 8006c06:	f043 0308 	orr.w	r3, r3, #8
 8006c0a:	6013      	str	r3, [r2, #0]
 8006c0c:	4b63      	ldr	r3, [pc, #396]	; (8006d9c <HAL_RCC_OscConfig+0x270>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a1b      	ldr	r3, [r3, #32]
 8006c18:	4960      	ldr	r1, [pc, #384]	; (8006d9c <HAL_RCC_OscConfig+0x270>)
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006c1e:	4b5f      	ldr	r3, [pc, #380]	; (8006d9c <HAL_RCC_OscConfig+0x270>)
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	69db      	ldr	r3, [r3, #28]
 8006c2a:	021b      	lsls	r3, r3, #8
 8006c2c:	495b      	ldr	r1, [pc, #364]	; (8006d9c <HAL_RCC_OscConfig+0x270>)
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d109      	bne.n	8006c4c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a1b      	ldr	r3, [r3, #32]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f000 fd47 	bl	80076d0 <RCC_SetFlashLatencyFromMSIRange>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d001      	beq.n	8006c4c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e343      	b.n	80072d4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006c4c:	f000 fc4a 	bl	80074e4 <HAL_RCC_GetSysClockFreq>
 8006c50:	4602      	mov	r2, r0
 8006c52:	4b52      	ldr	r3, [pc, #328]	; (8006d9c <HAL_RCC_OscConfig+0x270>)
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	091b      	lsrs	r3, r3, #4
 8006c58:	f003 030f 	and.w	r3, r3, #15
 8006c5c:	4950      	ldr	r1, [pc, #320]	; (8006da0 <HAL_RCC_OscConfig+0x274>)
 8006c5e:	5ccb      	ldrb	r3, [r1, r3]
 8006c60:	f003 031f 	and.w	r3, r3, #31
 8006c64:	fa22 f303 	lsr.w	r3, r2, r3
 8006c68:	4a4e      	ldr	r2, [pc, #312]	; (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006c6a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006c6c:	4b4e      	ldr	r3, [pc, #312]	; (8006da8 <HAL_RCC_OscConfig+0x27c>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7fb f89b 	bl	8001dac <HAL_InitTick>
 8006c76:	4603      	mov	r3, r0
 8006c78:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006c7a:	7bfb      	ldrb	r3, [r7, #15]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d052      	beq.n	8006d26 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
 8006c82:	e327      	b.n	80072d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	699b      	ldr	r3, [r3, #24]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d032      	beq.n	8006cf2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006c8c:	4b43      	ldr	r3, [pc, #268]	; (8006d9c <HAL_RCC_OscConfig+0x270>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a42      	ldr	r2, [pc, #264]	; (8006d9c <HAL_RCC_OscConfig+0x270>)
 8006c92:	f043 0301 	orr.w	r3, r3, #1
 8006c96:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006c98:	f7fb fe26 	bl	80028e8 <HAL_GetTick>
 8006c9c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006c9e:	e008      	b.n	8006cb2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006ca0:	f7fb fe22 	bl	80028e8 <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d901      	bls.n	8006cb2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e310      	b.n	80072d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006cb2:	4b3a      	ldr	r3, [pc, #232]	; (8006d9c <HAL_RCC_OscConfig+0x270>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 0302 	and.w	r3, r3, #2
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d0f0      	beq.n	8006ca0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006cbe:	4b37      	ldr	r3, [pc, #220]	; (8006d9c <HAL_RCC_OscConfig+0x270>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a36      	ldr	r2, [pc, #216]	; (8006d9c <HAL_RCC_OscConfig+0x270>)
 8006cc4:	f043 0308 	orr.w	r3, r3, #8
 8006cc8:	6013      	str	r3, [r2, #0]
 8006cca:	4b34      	ldr	r3, [pc, #208]	; (8006d9c <HAL_RCC_OscConfig+0x270>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	4931      	ldr	r1, [pc, #196]	; (8006d9c <HAL_RCC_OscConfig+0x270>)
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006cdc:	4b2f      	ldr	r3, [pc, #188]	; (8006d9c <HAL_RCC_OscConfig+0x270>)
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	69db      	ldr	r3, [r3, #28]
 8006ce8:	021b      	lsls	r3, r3, #8
 8006cea:	492c      	ldr	r1, [pc, #176]	; (8006d9c <HAL_RCC_OscConfig+0x270>)
 8006cec:	4313      	orrs	r3, r2
 8006cee:	604b      	str	r3, [r1, #4]
 8006cf0:	e01a      	b.n	8006d28 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006cf2:	4b2a      	ldr	r3, [pc, #168]	; (8006d9c <HAL_RCC_OscConfig+0x270>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a29      	ldr	r2, [pc, #164]	; (8006d9c <HAL_RCC_OscConfig+0x270>)
 8006cf8:	f023 0301 	bic.w	r3, r3, #1
 8006cfc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006cfe:	f7fb fdf3 	bl	80028e8 <HAL_GetTick>
 8006d02:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006d04:	e008      	b.n	8006d18 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006d06:	f7fb fdef 	bl	80028e8 <HAL_GetTick>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	d901      	bls.n	8006d18 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e2dd      	b.n	80072d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006d18:	4b20      	ldr	r3, [pc, #128]	; (8006d9c <HAL_RCC_OscConfig+0x270>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0302 	and.w	r3, r3, #2
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1f0      	bne.n	8006d06 <HAL_RCC_OscConfig+0x1da>
 8006d24:	e000      	b.n	8006d28 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006d26:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0301 	and.w	r3, r3, #1
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d074      	beq.n	8006e1e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	2b08      	cmp	r3, #8
 8006d38:	d005      	beq.n	8006d46 <HAL_RCC_OscConfig+0x21a>
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	2b0c      	cmp	r3, #12
 8006d3e:	d10e      	bne.n	8006d5e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	2b03      	cmp	r3, #3
 8006d44:	d10b      	bne.n	8006d5e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d46:	4b15      	ldr	r3, [pc, #84]	; (8006d9c <HAL_RCC_OscConfig+0x270>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d064      	beq.n	8006e1c <HAL_RCC_OscConfig+0x2f0>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d160      	bne.n	8006e1c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e2ba      	b.n	80072d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d66:	d106      	bne.n	8006d76 <HAL_RCC_OscConfig+0x24a>
 8006d68:	4b0c      	ldr	r3, [pc, #48]	; (8006d9c <HAL_RCC_OscConfig+0x270>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a0b      	ldr	r2, [pc, #44]	; (8006d9c <HAL_RCC_OscConfig+0x270>)
 8006d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d72:	6013      	str	r3, [r2, #0]
 8006d74:	e026      	b.n	8006dc4 <HAL_RCC_OscConfig+0x298>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d7e:	d115      	bne.n	8006dac <HAL_RCC_OscConfig+0x280>
 8006d80:	4b06      	ldr	r3, [pc, #24]	; (8006d9c <HAL_RCC_OscConfig+0x270>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a05      	ldr	r2, [pc, #20]	; (8006d9c <HAL_RCC_OscConfig+0x270>)
 8006d86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d8a:	6013      	str	r3, [r2, #0]
 8006d8c:	4b03      	ldr	r3, [pc, #12]	; (8006d9c <HAL_RCC_OscConfig+0x270>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a02      	ldr	r2, [pc, #8]	; (8006d9c <HAL_RCC_OscConfig+0x270>)
 8006d92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d96:	6013      	str	r3, [r2, #0]
 8006d98:	e014      	b.n	8006dc4 <HAL_RCC_OscConfig+0x298>
 8006d9a:	bf00      	nop
 8006d9c:	40021000 	.word	0x40021000
 8006da0:	0800b1c0 	.word	0x0800b1c0
 8006da4:	200001b8 	.word	0x200001b8
 8006da8:	200001e4 	.word	0x200001e4
 8006dac:	4ba0      	ldr	r3, [pc, #640]	; (8007030 <HAL_RCC_OscConfig+0x504>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a9f      	ldr	r2, [pc, #636]	; (8007030 <HAL_RCC_OscConfig+0x504>)
 8006db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006db6:	6013      	str	r3, [r2, #0]
 8006db8:	4b9d      	ldr	r3, [pc, #628]	; (8007030 <HAL_RCC_OscConfig+0x504>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a9c      	ldr	r2, [pc, #624]	; (8007030 <HAL_RCC_OscConfig+0x504>)
 8006dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006dc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d013      	beq.n	8006df4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dcc:	f7fb fd8c 	bl	80028e8 <HAL_GetTick>
 8006dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006dd2:	e008      	b.n	8006de6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006dd4:	f7fb fd88 	bl	80028e8 <HAL_GetTick>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	2b64      	cmp	r3, #100	; 0x64
 8006de0:	d901      	bls.n	8006de6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	e276      	b.n	80072d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006de6:	4b92      	ldr	r3, [pc, #584]	; (8007030 <HAL_RCC_OscConfig+0x504>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d0f0      	beq.n	8006dd4 <HAL_RCC_OscConfig+0x2a8>
 8006df2:	e014      	b.n	8006e1e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006df4:	f7fb fd78 	bl	80028e8 <HAL_GetTick>
 8006df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006dfa:	e008      	b.n	8006e0e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006dfc:	f7fb fd74 	bl	80028e8 <HAL_GetTick>
 8006e00:	4602      	mov	r2, r0
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	2b64      	cmp	r3, #100	; 0x64
 8006e08:	d901      	bls.n	8006e0e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e262      	b.n	80072d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006e0e:	4b88      	ldr	r3, [pc, #544]	; (8007030 <HAL_RCC_OscConfig+0x504>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1f0      	bne.n	8006dfc <HAL_RCC_OscConfig+0x2d0>
 8006e1a:	e000      	b.n	8006e1e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 0302 	and.w	r3, r3, #2
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d060      	beq.n	8006eec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	2b04      	cmp	r3, #4
 8006e2e:	d005      	beq.n	8006e3c <HAL_RCC_OscConfig+0x310>
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	2b0c      	cmp	r3, #12
 8006e34:	d119      	bne.n	8006e6a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d116      	bne.n	8006e6a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e3c:	4b7c      	ldr	r3, [pc, #496]	; (8007030 <HAL_RCC_OscConfig+0x504>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d005      	beq.n	8006e54 <HAL_RCC_OscConfig+0x328>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d101      	bne.n	8006e54 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e23f      	b.n	80072d4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e54:	4b76      	ldr	r3, [pc, #472]	; (8007030 <HAL_RCC_OscConfig+0x504>)
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	061b      	lsls	r3, r3, #24
 8006e62:	4973      	ldr	r1, [pc, #460]	; (8007030 <HAL_RCC_OscConfig+0x504>)
 8006e64:	4313      	orrs	r3, r2
 8006e66:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e68:	e040      	b.n	8006eec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d023      	beq.n	8006eba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e72:	4b6f      	ldr	r3, [pc, #444]	; (8007030 <HAL_RCC_OscConfig+0x504>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a6e      	ldr	r2, [pc, #440]	; (8007030 <HAL_RCC_OscConfig+0x504>)
 8006e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e7e:	f7fb fd33 	bl	80028e8 <HAL_GetTick>
 8006e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e84:	e008      	b.n	8006e98 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e86:	f7fb fd2f 	bl	80028e8 <HAL_GetTick>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	d901      	bls.n	8006e98 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e21d      	b.n	80072d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e98:	4b65      	ldr	r3, [pc, #404]	; (8007030 <HAL_RCC_OscConfig+0x504>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d0f0      	beq.n	8006e86 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ea4:	4b62      	ldr	r3, [pc, #392]	; (8007030 <HAL_RCC_OscConfig+0x504>)
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	061b      	lsls	r3, r3, #24
 8006eb2:	495f      	ldr	r1, [pc, #380]	; (8007030 <HAL_RCC_OscConfig+0x504>)
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	604b      	str	r3, [r1, #4]
 8006eb8:	e018      	b.n	8006eec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006eba:	4b5d      	ldr	r3, [pc, #372]	; (8007030 <HAL_RCC_OscConfig+0x504>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a5c      	ldr	r2, [pc, #368]	; (8007030 <HAL_RCC_OscConfig+0x504>)
 8006ec0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ec4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ec6:	f7fb fd0f 	bl	80028e8 <HAL_GetTick>
 8006eca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ecc:	e008      	b.n	8006ee0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ece:	f7fb fd0b 	bl	80028e8 <HAL_GetTick>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	1ad3      	subs	r3, r2, r3
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d901      	bls.n	8006ee0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e1f9      	b.n	80072d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ee0:	4b53      	ldr	r3, [pc, #332]	; (8007030 <HAL_RCC_OscConfig+0x504>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1f0      	bne.n	8006ece <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 0308 	and.w	r3, r3, #8
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d03c      	beq.n	8006f72 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	695b      	ldr	r3, [r3, #20]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d01c      	beq.n	8006f3a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f00:	4b4b      	ldr	r3, [pc, #300]	; (8007030 <HAL_RCC_OscConfig+0x504>)
 8006f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f06:	4a4a      	ldr	r2, [pc, #296]	; (8007030 <HAL_RCC_OscConfig+0x504>)
 8006f08:	f043 0301 	orr.w	r3, r3, #1
 8006f0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f10:	f7fb fcea 	bl	80028e8 <HAL_GetTick>
 8006f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006f16:	e008      	b.n	8006f2a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f18:	f7fb fce6 	bl	80028e8 <HAL_GetTick>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d901      	bls.n	8006f2a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	e1d4      	b.n	80072d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006f2a:	4b41      	ldr	r3, [pc, #260]	; (8007030 <HAL_RCC_OscConfig+0x504>)
 8006f2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f30:	f003 0302 	and.w	r3, r3, #2
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d0ef      	beq.n	8006f18 <HAL_RCC_OscConfig+0x3ec>
 8006f38:	e01b      	b.n	8006f72 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f3a:	4b3d      	ldr	r3, [pc, #244]	; (8007030 <HAL_RCC_OscConfig+0x504>)
 8006f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f40:	4a3b      	ldr	r2, [pc, #236]	; (8007030 <HAL_RCC_OscConfig+0x504>)
 8006f42:	f023 0301 	bic.w	r3, r3, #1
 8006f46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f4a:	f7fb fccd 	bl	80028e8 <HAL_GetTick>
 8006f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006f50:	e008      	b.n	8006f64 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f52:	f7fb fcc9 	bl	80028e8 <HAL_GetTick>
 8006f56:	4602      	mov	r2, r0
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	d901      	bls.n	8006f64 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006f60:	2303      	movs	r3, #3
 8006f62:	e1b7      	b.n	80072d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006f64:	4b32      	ldr	r3, [pc, #200]	; (8007030 <HAL_RCC_OscConfig+0x504>)
 8006f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f6a:	f003 0302 	and.w	r3, r3, #2
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1ef      	bne.n	8006f52 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0304 	and.w	r3, r3, #4
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f000 80a6 	beq.w	80070cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f80:	2300      	movs	r3, #0
 8006f82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006f84:	4b2a      	ldr	r3, [pc, #168]	; (8007030 <HAL_RCC_OscConfig+0x504>)
 8006f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10d      	bne.n	8006fac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f90:	4b27      	ldr	r3, [pc, #156]	; (8007030 <HAL_RCC_OscConfig+0x504>)
 8006f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f94:	4a26      	ldr	r2, [pc, #152]	; (8007030 <HAL_RCC_OscConfig+0x504>)
 8006f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f9a:	6593      	str	r3, [r2, #88]	; 0x58
 8006f9c:	4b24      	ldr	r3, [pc, #144]	; (8007030 <HAL_RCC_OscConfig+0x504>)
 8006f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fa4:	60bb      	str	r3, [r7, #8]
 8006fa6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fac:	4b21      	ldr	r3, [pc, #132]	; (8007034 <HAL_RCC_OscConfig+0x508>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d118      	bne.n	8006fea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006fb8:	4b1e      	ldr	r3, [pc, #120]	; (8007034 <HAL_RCC_OscConfig+0x508>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a1d      	ldr	r2, [pc, #116]	; (8007034 <HAL_RCC_OscConfig+0x508>)
 8006fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fc4:	f7fb fc90 	bl	80028e8 <HAL_GetTick>
 8006fc8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fca:	e008      	b.n	8006fde <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fcc:	f7fb fc8c 	bl	80028e8 <HAL_GetTick>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d901      	bls.n	8006fde <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e17a      	b.n	80072d4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fde:	4b15      	ldr	r3, [pc, #84]	; (8007034 <HAL_RCC_OscConfig+0x508>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d0f0      	beq.n	8006fcc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d108      	bne.n	8007004 <HAL_RCC_OscConfig+0x4d8>
 8006ff2:	4b0f      	ldr	r3, [pc, #60]	; (8007030 <HAL_RCC_OscConfig+0x504>)
 8006ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ff8:	4a0d      	ldr	r2, [pc, #52]	; (8007030 <HAL_RCC_OscConfig+0x504>)
 8006ffa:	f043 0301 	orr.w	r3, r3, #1
 8006ffe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007002:	e029      	b.n	8007058 <HAL_RCC_OscConfig+0x52c>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	2b05      	cmp	r3, #5
 800700a:	d115      	bne.n	8007038 <HAL_RCC_OscConfig+0x50c>
 800700c:	4b08      	ldr	r3, [pc, #32]	; (8007030 <HAL_RCC_OscConfig+0x504>)
 800700e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007012:	4a07      	ldr	r2, [pc, #28]	; (8007030 <HAL_RCC_OscConfig+0x504>)
 8007014:	f043 0304 	orr.w	r3, r3, #4
 8007018:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800701c:	4b04      	ldr	r3, [pc, #16]	; (8007030 <HAL_RCC_OscConfig+0x504>)
 800701e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007022:	4a03      	ldr	r2, [pc, #12]	; (8007030 <HAL_RCC_OscConfig+0x504>)
 8007024:	f043 0301 	orr.w	r3, r3, #1
 8007028:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800702c:	e014      	b.n	8007058 <HAL_RCC_OscConfig+0x52c>
 800702e:	bf00      	nop
 8007030:	40021000 	.word	0x40021000
 8007034:	40007000 	.word	0x40007000
 8007038:	4b9c      	ldr	r3, [pc, #624]	; (80072ac <HAL_RCC_OscConfig+0x780>)
 800703a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800703e:	4a9b      	ldr	r2, [pc, #620]	; (80072ac <HAL_RCC_OscConfig+0x780>)
 8007040:	f023 0301 	bic.w	r3, r3, #1
 8007044:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007048:	4b98      	ldr	r3, [pc, #608]	; (80072ac <HAL_RCC_OscConfig+0x780>)
 800704a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800704e:	4a97      	ldr	r2, [pc, #604]	; (80072ac <HAL_RCC_OscConfig+0x780>)
 8007050:	f023 0304 	bic.w	r3, r3, #4
 8007054:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d016      	beq.n	800708e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007060:	f7fb fc42 	bl	80028e8 <HAL_GetTick>
 8007064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007066:	e00a      	b.n	800707e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007068:	f7fb fc3e 	bl	80028e8 <HAL_GetTick>
 800706c:	4602      	mov	r2, r0
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	f241 3288 	movw	r2, #5000	; 0x1388
 8007076:	4293      	cmp	r3, r2
 8007078:	d901      	bls.n	800707e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800707a:	2303      	movs	r3, #3
 800707c:	e12a      	b.n	80072d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800707e:	4b8b      	ldr	r3, [pc, #556]	; (80072ac <HAL_RCC_OscConfig+0x780>)
 8007080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007084:	f003 0302 	and.w	r3, r3, #2
 8007088:	2b00      	cmp	r3, #0
 800708a:	d0ed      	beq.n	8007068 <HAL_RCC_OscConfig+0x53c>
 800708c:	e015      	b.n	80070ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800708e:	f7fb fc2b 	bl	80028e8 <HAL_GetTick>
 8007092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007094:	e00a      	b.n	80070ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007096:	f7fb fc27 	bl	80028e8 <HAL_GetTick>
 800709a:	4602      	mov	r2, r0
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d901      	bls.n	80070ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e113      	b.n	80072d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80070ac:	4b7f      	ldr	r3, [pc, #508]	; (80072ac <HAL_RCC_OscConfig+0x780>)
 80070ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070b2:	f003 0302 	and.w	r3, r3, #2
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1ed      	bne.n	8007096 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80070ba:	7ffb      	ldrb	r3, [r7, #31]
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d105      	bne.n	80070cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070c0:	4b7a      	ldr	r3, [pc, #488]	; (80072ac <HAL_RCC_OscConfig+0x780>)
 80070c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070c4:	4a79      	ldr	r2, [pc, #484]	; (80072ac <HAL_RCC_OscConfig+0x780>)
 80070c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070ca:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 80fe 	beq.w	80072d2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070da:	2b02      	cmp	r3, #2
 80070dc:	f040 80d0 	bne.w	8007280 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80070e0:	4b72      	ldr	r3, [pc, #456]	; (80072ac <HAL_RCC_OscConfig+0x780>)
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	f003 0203 	and.w	r2, r3, #3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d130      	bne.n	8007156 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070fe:	3b01      	subs	r3, #1
 8007100:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007102:	429a      	cmp	r2, r3
 8007104:	d127      	bne.n	8007156 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007110:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007112:	429a      	cmp	r2, r3
 8007114:	d11f      	bne.n	8007156 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007120:	2a07      	cmp	r2, #7
 8007122:	bf14      	ite	ne
 8007124:	2201      	movne	r2, #1
 8007126:	2200      	moveq	r2, #0
 8007128:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800712a:	4293      	cmp	r3, r2
 800712c:	d113      	bne.n	8007156 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007138:	085b      	lsrs	r3, r3, #1
 800713a:	3b01      	subs	r3, #1
 800713c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800713e:	429a      	cmp	r2, r3
 8007140:	d109      	bne.n	8007156 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714c:	085b      	lsrs	r3, r3, #1
 800714e:	3b01      	subs	r3, #1
 8007150:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007152:	429a      	cmp	r2, r3
 8007154:	d06e      	beq.n	8007234 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	2b0c      	cmp	r3, #12
 800715a:	d069      	beq.n	8007230 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800715c:	4b53      	ldr	r3, [pc, #332]	; (80072ac <HAL_RCC_OscConfig+0x780>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007164:	2b00      	cmp	r3, #0
 8007166:	d105      	bne.n	8007174 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007168:	4b50      	ldr	r3, [pc, #320]	; (80072ac <HAL_RCC_OscConfig+0x780>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007170:	2b00      	cmp	r3, #0
 8007172:	d001      	beq.n	8007178 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	e0ad      	b.n	80072d4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007178:	4b4c      	ldr	r3, [pc, #304]	; (80072ac <HAL_RCC_OscConfig+0x780>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a4b      	ldr	r2, [pc, #300]	; (80072ac <HAL_RCC_OscConfig+0x780>)
 800717e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007182:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007184:	f7fb fbb0 	bl	80028e8 <HAL_GetTick>
 8007188:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800718a:	e008      	b.n	800719e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800718c:	f7fb fbac 	bl	80028e8 <HAL_GetTick>
 8007190:	4602      	mov	r2, r0
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	2b02      	cmp	r3, #2
 8007198:	d901      	bls.n	800719e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800719a:	2303      	movs	r3, #3
 800719c:	e09a      	b.n	80072d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800719e:	4b43      	ldr	r3, [pc, #268]	; (80072ac <HAL_RCC_OscConfig+0x780>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1f0      	bne.n	800718c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80071aa:	4b40      	ldr	r3, [pc, #256]	; (80072ac <HAL_RCC_OscConfig+0x780>)
 80071ac:	68da      	ldr	r2, [r3, #12]
 80071ae:	4b40      	ldr	r3, [pc, #256]	; (80072b0 <HAL_RCC_OscConfig+0x784>)
 80071b0:	4013      	ands	r3, r2
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80071ba:	3a01      	subs	r2, #1
 80071bc:	0112      	lsls	r2, r2, #4
 80071be:	4311      	orrs	r1, r2
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80071c4:	0212      	lsls	r2, r2, #8
 80071c6:	4311      	orrs	r1, r2
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80071cc:	0852      	lsrs	r2, r2, #1
 80071ce:	3a01      	subs	r2, #1
 80071d0:	0552      	lsls	r2, r2, #21
 80071d2:	4311      	orrs	r1, r2
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80071d8:	0852      	lsrs	r2, r2, #1
 80071da:	3a01      	subs	r2, #1
 80071dc:	0652      	lsls	r2, r2, #25
 80071de:	4311      	orrs	r1, r2
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80071e4:	0912      	lsrs	r2, r2, #4
 80071e6:	0452      	lsls	r2, r2, #17
 80071e8:	430a      	orrs	r2, r1
 80071ea:	4930      	ldr	r1, [pc, #192]	; (80072ac <HAL_RCC_OscConfig+0x780>)
 80071ec:	4313      	orrs	r3, r2
 80071ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80071f0:	4b2e      	ldr	r3, [pc, #184]	; (80072ac <HAL_RCC_OscConfig+0x780>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a2d      	ldr	r2, [pc, #180]	; (80072ac <HAL_RCC_OscConfig+0x780>)
 80071f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80071fc:	4b2b      	ldr	r3, [pc, #172]	; (80072ac <HAL_RCC_OscConfig+0x780>)
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	4a2a      	ldr	r2, [pc, #168]	; (80072ac <HAL_RCC_OscConfig+0x780>)
 8007202:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007206:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007208:	f7fb fb6e 	bl	80028e8 <HAL_GetTick>
 800720c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800720e:	e008      	b.n	8007222 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007210:	f7fb fb6a 	bl	80028e8 <HAL_GetTick>
 8007214:	4602      	mov	r2, r0
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	2b02      	cmp	r3, #2
 800721c:	d901      	bls.n	8007222 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e058      	b.n	80072d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007222:	4b22      	ldr	r3, [pc, #136]	; (80072ac <HAL_RCC_OscConfig+0x780>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800722a:	2b00      	cmp	r3, #0
 800722c:	d0f0      	beq.n	8007210 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800722e:	e050      	b.n	80072d2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	e04f      	b.n	80072d4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007234:	4b1d      	ldr	r3, [pc, #116]	; (80072ac <HAL_RCC_OscConfig+0x780>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800723c:	2b00      	cmp	r3, #0
 800723e:	d148      	bne.n	80072d2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007240:	4b1a      	ldr	r3, [pc, #104]	; (80072ac <HAL_RCC_OscConfig+0x780>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a19      	ldr	r2, [pc, #100]	; (80072ac <HAL_RCC_OscConfig+0x780>)
 8007246:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800724a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800724c:	4b17      	ldr	r3, [pc, #92]	; (80072ac <HAL_RCC_OscConfig+0x780>)
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	4a16      	ldr	r2, [pc, #88]	; (80072ac <HAL_RCC_OscConfig+0x780>)
 8007252:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007256:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007258:	f7fb fb46 	bl	80028e8 <HAL_GetTick>
 800725c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800725e:	e008      	b.n	8007272 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007260:	f7fb fb42 	bl	80028e8 <HAL_GetTick>
 8007264:	4602      	mov	r2, r0
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	2b02      	cmp	r3, #2
 800726c:	d901      	bls.n	8007272 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800726e:	2303      	movs	r3, #3
 8007270:	e030      	b.n	80072d4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007272:	4b0e      	ldr	r3, [pc, #56]	; (80072ac <HAL_RCC_OscConfig+0x780>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800727a:	2b00      	cmp	r3, #0
 800727c:	d0f0      	beq.n	8007260 <HAL_RCC_OscConfig+0x734>
 800727e:	e028      	b.n	80072d2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	2b0c      	cmp	r3, #12
 8007284:	d023      	beq.n	80072ce <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007286:	4b09      	ldr	r3, [pc, #36]	; (80072ac <HAL_RCC_OscConfig+0x780>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a08      	ldr	r2, [pc, #32]	; (80072ac <HAL_RCC_OscConfig+0x780>)
 800728c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007290:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007292:	f7fb fb29 	bl	80028e8 <HAL_GetTick>
 8007296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007298:	e00c      	b.n	80072b4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800729a:	f7fb fb25 	bl	80028e8 <HAL_GetTick>
 800729e:	4602      	mov	r2, r0
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	1ad3      	subs	r3, r2, r3
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d905      	bls.n	80072b4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80072a8:	2303      	movs	r3, #3
 80072aa:	e013      	b.n	80072d4 <HAL_RCC_OscConfig+0x7a8>
 80072ac:	40021000 	.word	0x40021000
 80072b0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072b4:	4b09      	ldr	r3, [pc, #36]	; (80072dc <HAL_RCC_OscConfig+0x7b0>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1ec      	bne.n	800729a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80072c0:	4b06      	ldr	r3, [pc, #24]	; (80072dc <HAL_RCC_OscConfig+0x7b0>)
 80072c2:	68da      	ldr	r2, [r3, #12]
 80072c4:	4905      	ldr	r1, [pc, #20]	; (80072dc <HAL_RCC_OscConfig+0x7b0>)
 80072c6:	4b06      	ldr	r3, [pc, #24]	; (80072e0 <HAL_RCC_OscConfig+0x7b4>)
 80072c8:	4013      	ands	r3, r2
 80072ca:	60cb      	str	r3, [r1, #12]
 80072cc:	e001      	b.n	80072d2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e000      	b.n	80072d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3720      	adds	r7, #32
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	40021000 	.word	0x40021000
 80072e0:	feeefffc 	.word	0xfeeefffc

080072e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d101      	bne.n	80072f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e0e7      	b.n	80074c8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80072f8:	4b75      	ldr	r3, [pc, #468]	; (80074d0 <HAL_RCC_ClockConfig+0x1ec>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 0307 	and.w	r3, r3, #7
 8007300:	683a      	ldr	r2, [r7, #0]
 8007302:	429a      	cmp	r2, r3
 8007304:	d910      	bls.n	8007328 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007306:	4b72      	ldr	r3, [pc, #456]	; (80074d0 <HAL_RCC_ClockConfig+0x1ec>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f023 0207 	bic.w	r2, r3, #7
 800730e:	4970      	ldr	r1, [pc, #448]	; (80074d0 <HAL_RCC_ClockConfig+0x1ec>)
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	4313      	orrs	r3, r2
 8007314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007316:	4b6e      	ldr	r3, [pc, #440]	; (80074d0 <HAL_RCC_ClockConfig+0x1ec>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 0307 	and.w	r3, r3, #7
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	429a      	cmp	r2, r3
 8007322:	d001      	beq.n	8007328 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	e0cf      	b.n	80074c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0302 	and.w	r3, r3, #2
 8007330:	2b00      	cmp	r3, #0
 8007332:	d010      	beq.n	8007356 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	689a      	ldr	r2, [r3, #8]
 8007338:	4b66      	ldr	r3, [pc, #408]	; (80074d4 <HAL_RCC_ClockConfig+0x1f0>)
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007340:	429a      	cmp	r2, r3
 8007342:	d908      	bls.n	8007356 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007344:	4b63      	ldr	r3, [pc, #396]	; (80074d4 <HAL_RCC_ClockConfig+0x1f0>)
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	4960      	ldr	r1, [pc, #384]	; (80074d4 <HAL_RCC_ClockConfig+0x1f0>)
 8007352:	4313      	orrs	r3, r2
 8007354:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 0301 	and.w	r3, r3, #1
 800735e:	2b00      	cmp	r3, #0
 8007360:	d04c      	beq.n	80073fc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	2b03      	cmp	r3, #3
 8007368:	d107      	bne.n	800737a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800736a:	4b5a      	ldr	r3, [pc, #360]	; (80074d4 <HAL_RCC_ClockConfig+0x1f0>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007372:	2b00      	cmp	r3, #0
 8007374:	d121      	bne.n	80073ba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	e0a6      	b.n	80074c8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	2b02      	cmp	r3, #2
 8007380:	d107      	bne.n	8007392 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007382:	4b54      	ldr	r3, [pc, #336]	; (80074d4 <HAL_RCC_ClockConfig+0x1f0>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800738a:	2b00      	cmp	r3, #0
 800738c:	d115      	bne.n	80073ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	e09a      	b.n	80074c8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d107      	bne.n	80073aa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800739a:	4b4e      	ldr	r3, [pc, #312]	; (80074d4 <HAL_RCC_ClockConfig+0x1f0>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 0302 	and.w	r3, r3, #2
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d109      	bne.n	80073ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	e08e      	b.n	80074c8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80073aa:	4b4a      	ldr	r3, [pc, #296]	; (80074d4 <HAL_RCC_ClockConfig+0x1f0>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d101      	bne.n	80073ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e086      	b.n	80074c8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80073ba:	4b46      	ldr	r3, [pc, #280]	; (80074d4 <HAL_RCC_ClockConfig+0x1f0>)
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	f023 0203 	bic.w	r2, r3, #3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	4943      	ldr	r1, [pc, #268]	; (80074d4 <HAL_RCC_ClockConfig+0x1f0>)
 80073c8:	4313      	orrs	r3, r2
 80073ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073cc:	f7fb fa8c 	bl	80028e8 <HAL_GetTick>
 80073d0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073d2:	e00a      	b.n	80073ea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073d4:	f7fb fa88 	bl	80028e8 <HAL_GetTick>
 80073d8:	4602      	mov	r2, r0
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	f241 3288 	movw	r2, #5000	; 0x1388
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d901      	bls.n	80073ea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80073e6:	2303      	movs	r3, #3
 80073e8:	e06e      	b.n	80074c8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073ea:	4b3a      	ldr	r3, [pc, #232]	; (80074d4 <HAL_RCC_ClockConfig+0x1f0>)
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	f003 020c 	and.w	r2, r3, #12
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d1eb      	bne.n	80073d4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f003 0302 	and.w	r3, r3, #2
 8007404:	2b00      	cmp	r3, #0
 8007406:	d010      	beq.n	800742a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	689a      	ldr	r2, [r3, #8]
 800740c:	4b31      	ldr	r3, [pc, #196]	; (80074d4 <HAL_RCC_ClockConfig+0x1f0>)
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007414:	429a      	cmp	r2, r3
 8007416:	d208      	bcs.n	800742a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007418:	4b2e      	ldr	r3, [pc, #184]	; (80074d4 <HAL_RCC_ClockConfig+0x1f0>)
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	492b      	ldr	r1, [pc, #172]	; (80074d4 <HAL_RCC_ClockConfig+0x1f0>)
 8007426:	4313      	orrs	r3, r2
 8007428:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800742a:	4b29      	ldr	r3, [pc, #164]	; (80074d0 <HAL_RCC_ClockConfig+0x1ec>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 0307 	and.w	r3, r3, #7
 8007432:	683a      	ldr	r2, [r7, #0]
 8007434:	429a      	cmp	r2, r3
 8007436:	d210      	bcs.n	800745a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007438:	4b25      	ldr	r3, [pc, #148]	; (80074d0 <HAL_RCC_ClockConfig+0x1ec>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f023 0207 	bic.w	r2, r3, #7
 8007440:	4923      	ldr	r1, [pc, #140]	; (80074d0 <HAL_RCC_ClockConfig+0x1ec>)
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	4313      	orrs	r3, r2
 8007446:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007448:	4b21      	ldr	r3, [pc, #132]	; (80074d0 <HAL_RCC_ClockConfig+0x1ec>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 0307 	and.w	r3, r3, #7
 8007450:	683a      	ldr	r2, [r7, #0]
 8007452:	429a      	cmp	r2, r3
 8007454:	d001      	beq.n	800745a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e036      	b.n	80074c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 0304 	and.w	r3, r3, #4
 8007462:	2b00      	cmp	r3, #0
 8007464:	d008      	beq.n	8007478 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007466:	4b1b      	ldr	r3, [pc, #108]	; (80074d4 <HAL_RCC_ClockConfig+0x1f0>)
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	4918      	ldr	r1, [pc, #96]	; (80074d4 <HAL_RCC_ClockConfig+0x1f0>)
 8007474:	4313      	orrs	r3, r2
 8007476:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 0308 	and.w	r3, r3, #8
 8007480:	2b00      	cmp	r3, #0
 8007482:	d009      	beq.n	8007498 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007484:	4b13      	ldr	r3, [pc, #76]	; (80074d4 <HAL_RCC_ClockConfig+0x1f0>)
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	00db      	lsls	r3, r3, #3
 8007492:	4910      	ldr	r1, [pc, #64]	; (80074d4 <HAL_RCC_ClockConfig+0x1f0>)
 8007494:	4313      	orrs	r3, r2
 8007496:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007498:	f000 f824 	bl	80074e4 <HAL_RCC_GetSysClockFreq>
 800749c:	4602      	mov	r2, r0
 800749e:	4b0d      	ldr	r3, [pc, #52]	; (80074d4 <HAL_RCC_ClockConfig+0x1f0>)
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	091b      	lsrs	r3, r3, #4
 80074a4:	f003 030f 	and.w	r3, r3, #15
 80074a8:	490b      	ldr	r1, [pc, #44]	; (80074d8 <HAL_RCC_ClockConfig+0x1f4>)
 80074aa:	5ccb      	ldrb	r3, [r1, r3]
 80074ac:	f003 031f 	and.w	r3, r3, #31
 80074b0:	fa22 f303 	lsr.w	r3, r2, r3
 80074b4:	4a09      	ldr	r2, [pc, #36]	; (80074dc <HAL_RCC_ClockConfig+0x1f8>)
 80074b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80074b8:	4b09      	ldr	r3, [pc, #36]	; (80074e0 <HAL_RCC_ClockConfig+0x1fc>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4618      	mov	r0, r3
 80074be:	f7fa fc75 	bl	8001dac <HAL_InitTick>
 80074c2:	4603      	mov	r3, r0
 80074c4:	72fb      	strb	r3, [r7, #11]

  return status;
 80074c6:	7afb      	ldrb	r3, [r7, #11]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	40022000 	.word	0x40022000
 80074d4:	40021000 	.word	0x40021000
 80074d8:	0800b1c0 	.word	0x0800b1c0
 80074dc:	200001b8 	.word	0x200001b8
 80074e0:	200001e4 	.word	0x200001e4

080074e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b089      	sub	sp, #36	; 0x24
 80074e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80074ea:	2300      	movs	r3, #0
 80074ec:	61fb      	str	r3, [r7, #28]
 80074ee:	2300      	movs	r3, #0
 80074f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074f2:	4b3e      	ldr	r3, [pc, #248]	; (80075ec <HAL_RCC_GetSysClockFreq+0x108>)
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	f003 030c 	and.w	r3, r3, #12
 80074fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80074fc:	4b3b      	ldr	r3, [pc, #236]	; (80075ec <HAL_RCC_GetSysClockFreq+0x108>)
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	f003 0303 	and.w	r3, r3, #3
 8007504:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d005      	beq.n	8007518 <HAL_RCC_GetSysClockFreq+0x34>
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	2b0c      	cmp	r3, #12
 8007510:	d121      	bne.n	8007556 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2b01      	cmp	r3, #1
 8007516:	d11e      	bne.n	8007556 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007518:	4b34      	ldr	r3, [pc, #208]	; (80075ec <HAL_RCC_GetSysClockFreq+0x108>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0308 	and.w	r3, r3, #8
 8007520:	2b00      	cmp	r3, #0
 8007522:	d107      	bne.n	8007534 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007524:	4b31      	ldr	r3, [pc, #196]	; (80075ec <HAL_RCC_GetSysClockFreq+0x108>)
 8007526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800752a:	0a1b      	lsrs	r3, r3, #8
 800752c:	f003 030f 	and.w	r3, r3, #15
 8007530:	61fb      	str	r3, [r7, #28]
 8007532:	e005      	b.n	8007540 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007534:	4b2d      	ldr	r3, [pc, #180]	; (80075ec <HAL_RCC_GetSysClockFreq+0x108>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	091b      	lsrs	r3, r3, #4
 800753a:	f003 030f 	and.w	r3, r3, #15
 800753e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007540:	4a2b      	ldr	r2, [pc, #172]	; (80075f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007548:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10d      	bne.n	800756c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007554:	e00a      	b.n	800756c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	2b04      	cmp	r3, #4
 800755a:	d102      	bne.n	8007562 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800755c:	4b25      	ldr	r3, [pc, #148]	; (80075f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800755e:	61bb      	str	r3, [r7, #24]
 8007560:	e004      	b.n	800756c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	2b08      	cmp	r3, #8
 8007566:	d101      	bne.n	800756c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007568:	4b23      	ldr	r3, [pc, #140]	; (80075f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800756a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	2b0c      	cmp	r3, #12
 8007570:	d134      	bne.n	80075dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007572:	4b1e      	ldr	r3, [pc, #120]	; (80075ec <HAL_RCC_GetSysClockFreq+0x108>)
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	f003 0303 	and.w	r3, r3, #3
 800757a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	2b02      	cmp	r3, #2
 8007580:	d003      	beq.n	800758a <HAL_RCC_GetSysClockFreq+0xa6>
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	2b03      	cmp	r3, #3
 8007586:	d003      	beq.n	8007590 <HAL_RCC_GetSysClockFreq+0xac>
 8007588:	e005      	b.n	8007596 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800758a:	4b1a      	ldr	r3, [pc, #104]	; (80075f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800758c:	617b      	str	r3, [r7, #20]
      break;
 800758e:	e005      	b.n	800759c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007590:	4b19      	ldr	r3, [pc, #100]	; (80075f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8007592:	617b      	str	r3, [r7, #20]
      break;
 8007594:	e002      	b.n	800759c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	617b      	str	r3, [r7, #20]
      break;
 800759a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800759c:	4b13      	ldr	r3, [pc, #76]	; (80075ec <HAL_RCC_GetSysClockFreq+0x108>)
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	091b      	lsrs	r3, r3, #4
 80075a2:	f003 0307 	and.w	r3, r3, #7
 80075a6:	3301      	adds	r3, #1
 80075a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80075aa:	4b10      	ldr	r3, [pc, #64]	; (80075ec <HAL_RCC_GetSysClockFreq+0x108>)
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	0a1b      	lsrs	r3, r3, #8
 80075b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075b4:	697a      	ldr	r2, [r7, #20]
 80075b6:	fb03 f202 	mul.w	r2, r3, r2
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80075c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80075c2:	4b0a      	ldr	r3, [pc, #40]	; (80075ec <HAL_RCC_GetSysClockFreq+0x108>)
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	0e5b      	lsrs	r3, r3, #25
 80075c8:	f003 0303 	and.w	r3, r3, #3
 80075cc:	3301      	adds	r3, #1
 80075ce:	005b      	lsls	r3, r3, #1
 80075d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80075d2:	697a      	ldr	r2, [r7, #20]
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80075da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80075dc:	69bb      	ldr	r3, [r7, #24]
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3724      	adds	r7, #36	; 0x24
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
 80075ea:	bf00      	nop
 80075ec:	40021000 	.word	0x40021000
 80075f0:	0800b1d8 	.word	0x0800b1d8
 80075f4:	00f42400 	.word	0x00f42400
 80075f8:	007a1200 	.word	0x007a1200

080075fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075fc:	b480      	push	{r7}
 80075fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007600:	4b03      	ldr	r3, [pc, #12]	; (8007610 <HAL_RCC_GetHCLKFreq+0x14>)
 8007602:	681b      	ldr	r3, [r3, #0]
}
 8007604:	4618      	mov	r0, r3
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr
 800760e:	bf00      	nop
 8007610:	200001b8 	.word	0x200001b8

08007614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007618:	f7ff fff0 	bl	80075fc <HAL_RCC_GetHCLKFreq>
 800761c:	4602      	mov	r2, r0
 800761e:	4b06      	ldr	r3, [pc, #24]	; (8007638 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	0a1b      	lsrs	r3, r3, #8
 8007624:	f003 0307 	and.w	r3, r3, #7
 8007628:	4904      	ldr	r1, [pc, #16]	; (800763c <HAL_RCC_GetPCLK1Freq+0x28>)
 800762a:	5ccb      	ldrb	r3, [r1, r3]
 800762c:	f003 031f 	and.w	r3, r3, #31
 8007630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007634:	4618      	mov	r0, r3
 8007636:	bd80      	pop	{r7, pc}
 8007638:	40021000 	.word	0x40021000
 800763c:	0800b1d0 	.word	0x0800b1d0

08007640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007644:	f7ff ffda 	bl	80075fc <HAL_RCC_GetHCLKFreq>
 8007648:	4602      	mov	r2, r0
 800764a:	4b06      	ldr	r3, [pc, #24]	; (8007664 <HAL_RCC_GetPCLK2Freq+0x24>)
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	0adb      	lsrs	r3, r3, #11
 8007650:	f003 0307 	and.w	r3, r3, #7
 8007654:	4904      	ldr	r1, [pc, #16]	; (8007668 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007656:	5ccb      	ldrb	r3, [r1, r3]
 8007658:	f003 031f 	and.w	r3, r3, #31
 800765c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007660:	4618      	mov	r0, r3
 8007662:	bd80      	pop	{r7, pc}
 8007664:	40021000 	.word	0x40021000
 8007668:	0800b1d0 	.word	0x0800b1d0

0800766c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	220f      	movs	r2, #15
 800767a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800767c:	4b12      	ldr	r3, [pc, #72]	; (80076c8 <HAL_RCC_GetClockConfig+0x5c>)
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	f003 0203 	and.w	r2, r3, #3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8007688:	4b0f      	ldr	r3, [pc, #60]	; (80076c8 <HAL_RCC_GetClockConfig+0x5c>)
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007694:	4b0c      	ldr	r3, [pc, #48]	; (80076c8 <HAL_RCC_GetClockConfig+0x5c>)
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80076a0:	4b09      	ldr	r3, [pc, #36]	; (80076c8 <HAL_RCC_GetClockConfig+0x5c>)
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	08db      	lsrs	r3, r3, #3
 80076a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80076ae:	4b07      	ldr	r3, [pc, #28]	; (80076cc <HAL_RCC_GetClockConfig+0x60>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 0207 	and.w	r2, r3, #7
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	601a      	str	r2, [r3, #0]
}
 80076ba:	bf00      	nop
 80076bc:	370c      	adds	r7, #12
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	40021000 	.word	0x40021000
 80076cc:	40022000 	.word	0x40022000

080076d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80076d8:	2300      	movs	r3, #0
 80076da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80076dc:	4b2a      	ldr	r3, [pc, #168]	; (8007788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80076de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d003      	beq.n	80076f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80076e8:	f7ff f900 	bl	80068ec <HAL_PWREx_GetVoltageRange>
 80076ec:	6178      	str	r0, [r7, #20]
 80076ee:	e014      	b.n	800771a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80076f0:	4b25      	ldr	r3, [pc, #148]	; (8007788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80076f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076f4:	4a24      	ldr	r2, [pc, #144]	; (8007788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80076f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076fa:	6593      	str	r3, [r2, #88]	; 0x58
 80076fc:	4b22      	ldr	r3, [pc, #136]	; (8007788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80076fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007704:	60fb      	str	r3, [r7, #12]
 8007706:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007708:	f7ff f8f0 	bl	80068ec <HAL_PWREx_GetVoltageRange>
 800770c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800770e:	4b1e      	ldr	r3, [pc, #120]	; (8007788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007712:	4a1d      	ldr	r2, [pc, #116]	; (8007788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007714:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007718:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007720:	d10b      	bne.n	800773a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2b80      	cmp	r3, #128	; 0x80
 8007726:	d919      	bls.n	800775c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2ba0      	cmp	r3, #160	; 0xa0
 800772c:	d902      	bls.n	8007734 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800772e:	2302      	movs	r3, #2
 8007730:	613b      	str	r3, [r7, #16]
 8007732:	e013      	b.n	800775c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007734:	2301      	movs	r3, #1
 8007736:	613b      	str	r3, [r7, #16]
 8007738:	e010      	b.n	800775c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2b80      	cmp	r3, #128	; 0x80
 800773e:	d902      	bls.n	8007746 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007740:	2303      	movs	r3, #3
 8007742:	613b      	str	r3, [r7, #16]
 8007744:	e00a      	b.n	800775c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2b80      	cmp	r3, #128	; 0x80
 800774a:	d102      	bne.n	8007752 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800774c:	2302      	movs	r3, #2
 800774e:	613b      	str	r3, [r7, #16]
 8007750:	e004      	b.n	800775c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2b70      	cmp	r3, #112	; 0x70
 8007756:	d101      	bne.n	800775c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007758:	2301      	movs	r3, #1
 800775a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800775c:	4b0b      	ldr	r3, [pc, #44]	; (800778c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f023 0207 	bic.w	r2, r3, #7
 8007764:	4909      	ldr	r1, [pc, #36]	; (800778c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	4313      	orrs	r3, r2
 800776a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800776c:	4b07      	ldr	r3, [pc, #28]	; (800778c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 0307 	and.w	r3, r3, #7
 8007774:	693a      	ldr	r2, [r7, #16]
 8007776:	429a      	cmp	r2, r3
 8007778:	d001      	beq.n	800777e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e000      	b.n	8007780 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	3718      	adds	r7, #24
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}
 8007788:	40021000 	.word	0x40021000
 800778c:	40022000 	.word	0x40022000

08007790 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007798:	2300      	movs	r3, #0
 800779a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800779c:	2300      	movs	r3, #0
 800779e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d041      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80077b4:	d02a      	beq.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80077b6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80077ba:	d824      	bhi.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80077bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80077c0:	d008      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80077c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80077c6:	d81e      	bhi.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d00a      	beq.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80077cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077d0:	d010      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80077d2:	e018      	b.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80077d4:	4b86      	ldr	r3, [pc, #536]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	4a85      	ldr	r2, [pc, #532]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80077da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80077e0:	e015      	b.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	3304      	adds	r3, #4
 80077e6:	2100      	movs	r1, #0
 80077e8:	4618      	mov	r0, r3
 80077ea:	f000 fabb 	bl	8007d64 <RCCEx_PLLSAI1_Config>
 80077ee:	4603      	mov	r3, r0
 80077f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80077f2:	e00c      	b.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	3320      	adds	r3, #32
 80077f8:	2100      	movs	r1, #0
 80077fa:	4618      	mov	r0, r3
 80077fc:	f000 fba6 	bl	8007f4c <RCCEx_PLLSAI2_Config>
 8007800:	4603      	mov	r3, r0
 8007802:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007804:	e003      	b.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	74fb      	strb	r3, [r7, #19]
      break;
 800780a:	e000      	b.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800780c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800780e:	7cfb      	ldrb	r3, [r7, #19]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d10b      	bne.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007814:	4b76      	ldr	r3, [pc, #472]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800781a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007822:	4973      	ldr	r1, [pc, #460]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007824:	4313      	orrs	r3, r2
 8007826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800782a:	e001      	b.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800782c:	7cfb      	ldrb	r3, [r7, #19]
 800782e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007838:	2b00      	cmp	r3, #0
 800783a:	d041      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007840:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007844:	d02a      	beq.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8007846:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800784a:	d824      	bhi.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800784c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007850:	d008      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007852:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007856:	d81e      	bhi.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00a      	beq.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800785c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007860:	d010      	beq.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007862:	e018      	b.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007864:	4b62      	ldr	r3, [pc, #392]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	4a61      	ldr	r2, [pc, #388]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800786a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800786e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007870:	e015      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	3304      	adds	r3, #4
 8007876:	2100      	movs	r1, #0
 8007878:	4618      	mov	r0, r3
 800787a:	f000 fa73 	bl	8007d64 <RCCEx_PLLSAI1_Config>
 800787e:	4603      	mov	r3, r0
 8007880:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007882:	e00c      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	3320      	adds	r3, #32
 8007888:	2100      	movs	r1, #0
 800788a:	4618      	mov	r0, r3
 800788c:	f000 fb5e 	bl	8007f4c <RCCEx_PLLSAI2_Config>
 8007890:	4603      	mov	r3, r0
 8007892:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007894:	e003      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	74fb      	strb	r3, [r7, #19]
      break;
 800789a:	e000      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800789c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800789e:	7cfb      	ldrb	r3, [r7, #19]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d10b      	bne.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80078a4:	4b52      	ldr	r3, [pc, #328]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80078a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078b2:	494f      	ldr	r1, [pc, #316]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80078b4:	4313      	orrs	r3, r2
 80078b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80078ba:	e001      	b.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078bc:	7cfb      	ldrb	r3, [r7, #19]
 80078be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	f000 80a0 	beq.w	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078ce:	2300      	movs	r3, #0
 80078d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80078d2:	4b47      	ldr	r3, [pc, #284]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80078d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d101      	bne.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80078de:	2301      	movs	r3, #1
 80078e0:	e000      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80078e2:	2300      	movs	r3, #0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00d      	beq.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078e8:	4b41      	ldr	r3, [pc, #260]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80078ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ec:	4a40      	ldr	r2, [pc, #256]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80078ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078f2:	6593      	str	r3, [r2, #88]	; 0x58
 80078f4:	4b3e      	ldr	r3, [pc, #248]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80078f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078fc:	60bb      	str	r3, [r7, #8]
 80078fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007900:	2301      	movs	r3, #1
 8007902:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007904:	4b3b      	ldr	r3, [pc, #236]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a3a      	ldr	r2, [pc, #232]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800790a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800790e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007910:	f7fa ffea 	bl	80028e8 <HAL_GetTick>
 8007914:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007916:	e009      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007918:	f7fa ffe6 	bl	80028e8 <HAL_GetTick>
 800791c:	4602      	mov	r2, r0
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	2b02      	cmp	r3, #2
 8007924:	d902      	bls.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8007926:	2303      	movs	r3, #3
 8007928:	74fb      	strb	r3, [r7, #19]
        break;
 800792a:	e005      	b.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800792c:	4b31      	ldr	r3, [pc, #196]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007934:	2b00      	cmp	r3, #0
 8007936:	d0ef      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007938:	7cfb      	ldrb	r3, [r7, #19]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d15c      	bne.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800793e:	4b2c      	ldr	r3, [pc, #176]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007944:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007948:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d01f      	beq.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007956:	697a      	ldr	r2, [r7, #20]
 8007958:	429a      	cmp	r2, r3
 800795a:	d019      	beq.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800795c:	4b24      	ldr	r3, [pc, #144]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800795e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007966:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007968:	4b21      	ldr	r3, [pc, #132]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800796a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800796e:	4a20      	ldr	r2, [pc, #128]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007978:	4b1d      	ldr	r3, [pc, #116]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800797a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800797e:	4a1c      	ldr	r2, [pc, #112]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007980:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007984:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007988:	4a19      	ldr	r2, [pc, #100]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	f003 0301 	and.w	r3, r3, #1
 8007996:	2b00      	cmp	r3, #0
 8007998:	d016      	beq.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800799a:	f7fa ffa5 	bl	80028e8 <HAL_GetTick>
 800799e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80079a0:	e00b      	b.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079a2:	f7fa ffa1 	bl	80028e8 <HAL_GetTick>
 80079a6:	4602      	mov	r2, r0
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	1ad3      	subs	r3, r2, r3
 80079ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d902      	bls.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80079b4:	2303      	movs	r3, #3
 80079b6:	74fb      	strb	r3, [r7, #19]
            break;
 80079b8:	e006      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80079ba:	4b0d      	ldr	r3, [pc, #52]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80079bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079c0:	f003 0302 	and.w	r3, r3, #2
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d0ec      	beq.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80079c8:	7cfb      	ldrb	r3, [r7, #19]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10c      	bne.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079ce:	4b08      	ldr	r3, [pc, #32]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80079d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079de:	4904      	ldr	r1, [pc, #16]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80079e0:	4313      	orrs	r3, r2
 80079e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80079e6:	e009      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80079e8:	7cfb      	ldrb	r3, [r7, #19]
 80079ea:	74bb      	strb	r3, [r7, #18]
 80079ec:	e006      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80079ee:	bf00      	nop
 80079f0:	40021000 	.word	0x40021000
 80079f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079f8:	7cfb      	ldrb	r3, [r7, #19]
 80079fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80079fc:	7c7b      	ldrb	r3, [r7, #17]
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d105      	bne.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a02:	4b9e      	ldr	r3, [pc, #632]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a06:	4a9d      	ldr	r2, [pc, #628]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a0c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 0301 	and.w	r3, r3, #1
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00a      	beq.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007a1a:	4b98      	ldr	r3, [pc, #608]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a20:	f023 0203 	bic.w	r2, r3, #3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a28:	4994      	ldr	r1, [pc, #592]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 0302 	and.w	r3, r3, #2
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00a      	beq.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007a3c:	4b8f      	ldr	r3, [pc, #572]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a42:	f023 020c 	bic.w	r2, r3, #12
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a4a:	498c      	ldr	r1, [pc, #560]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f003 0304 	and.w	r3, r3, #4
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00a      	beq.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007a5e:	4b87      	ldr	r3, [pc, #540]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a64:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6c:	4983      	ldr	r1, [pc, #524]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 0308 	and.w	r3, r3, #8
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00a      	beq.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007a80:	4b7e      	ldr	r3, [pc, #504]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a86:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a8e:	497b      	ldr	r1, [pc, #492]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a90:	4313      	orrs	r3, r2
 8007a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 0310 	and.w	r3, r3, #16
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00a      	beq.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007aa2:	4b76      	ldr	r3, [pc, #472]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aa8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ab0:	4972      	ldr	r1, [pc, #456]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f003 0320 	and.w	r3, r3, #32
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d00a      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007ac4:	4b6d      	ldr	r3, [pc, #436]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ad2:	496a      	ldr	r1, [pc, #424]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00a      	beq.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007ae6:	4b65      	ldr	r3, [pc, #404]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007af4:	4961      	ldr	r1, [pc, #388]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007af6:	4313      	orrs	r3, r2
 8007af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00a      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007b08:	4b5c      	ldr	r3, [pc, #368]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b16:	4959      	ldr	r1, [pc, #356]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00a      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007b2a:	4b54      	ldr	r3, [pc, #336]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b30:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b38:	4950      	ldr	r1, [pc, #320]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00a      	beq.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007b4c:	4b4b      	ldr	r3, [pc, #300]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b52:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b5a:	4948      	ldr	r1, [pc, #288]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00a      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007b6e:	4b43      	ldr	r3, [pc, #268]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b7c:	493f      	ldr	r1, [pc, #252]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d028      	beq.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b90:	4b3a      	ldr	r3, [pc, #232]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b9e:	4937      	ldr	r1, [pc, #220]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007baa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bae:	d106      	bne.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007bb0:	4b32      	ldr	r3, [pc, #200]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	4a31      	ldr	r2, [pc, #196]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007bb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007bba:	60d3      	str	r3, [r2, #12]
 8007bbc:	e011      	b.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007bc6:	d10c      	bne.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	3304      	adds	r3, #4
 8007bcc:	2101      	movs	r1, #1
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f000 f8c8 	bl	8007d64 <RCCEx_PLLSAI1_Config>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007bd8:	7cfb      	ldrb	r3, [r7, #19]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d001      	beq.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8007bde:	7cfb      	ldrb	r3, [r7, #19]
 8007be0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d028      	beq.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007bee:	4b23      	ldr	r3, [pc, #140]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bf4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bfc:	491f      	ldr	r1, [pc, #124]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c0c:	d106      	bne.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c0e:	4b1b      	ldr	r3, [pc, #108]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	4a1a      	ldr	r2, [pc, #104]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c18:	60d3      	str	r3, [r2, #12]
 8007c1a:	e011      	b.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c24:	d10c      	bne.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	3304      	adds	r3, #4
 8007c2a:	2101      	movs	r1, #1
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f000 f899 	bl	8007d64 <RCCEx_PLLSAI1_Config>
 8007c32:	4603      	mov	r3, r0
 8007c34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007c36:	7cfb      	ldrb	r3, [r7, #19]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d001      	beq.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007c3c:	7cfb      	ldrb	r3, [r7, #19]
 8007c3e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d02b      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007c4c:	4b0b      	ldr	r3, [pc, #44]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c5a:	4908      	ldr	r1, [pc, #32]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c6a:	d109      	bne.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c6c:	4b03      	ldr	r3, [pc, #12]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	4a02      	ldr	r2, [pc, #8]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c76:	60d3      	str	r3, [r2, #12]
 8007c78:	e014      	b.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007c7a:	bf00      	nop
 8007c7c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c88:	d10c      	bne.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	3304      	adds	r3, #4
 8007c8e:	2101      	movs	r1, #1
 8007c90:	4618      	mov	r0, r3
 8007c92:	f000 f867 	bl	8007d64 <RCCEx_PLLSAI1_Config>
 8007c96:	4603      	mov	r3, r0
 8007c98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007c9a:	7cfb      	ldrb	r3, [r7, #19]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d001      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007ca0:	7cfb      	ldrb	r3, [r7, #19]
 8007ca2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d02f      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007cb0:	4b2b      	ldr	r3, [pc, #172]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cb6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cbe:	4928      	ldr	r1, [pc, #160]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007cce:	d10d      	bne.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	3304      	adds	r3, #4
 8007cd4:	2102      	movs	r1, #2
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f000 f844 	bl	8007d64 <RCCEx_PLLSAI1_Config>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007ce0:	7cfb      	ldrb	r3, [r7, #19]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d014      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007ce6:	7cfb      	ldrb	r3, [r7, #19]
 8007ce8:	74bb      	strb	r3, [r7, #18]
 8007cea:	e011      	b.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cf4:	d10c      	bne.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	3320      	adds	r3, #32
 8007cfa:	2102      	movs	r1, #2
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f000 f925 	bl	8007f4c <RCCEx_PLLSAI2_Config>
 8007d02:	4603      	mov	r3, r0
 8007d04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007d06:	7cfb      	ldrb	r3, [r7, #19]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d001      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007d0c:	7cfb      	ldrb	r3, [r7, #19]
 8007d0e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d00a      	beq.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007d1c:	4b10      	ldr	r3, [pc, #64]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d22:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d2a:	490d      	ldr	r1, [pc, #52]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00b      	beq.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007d3e:	4b08      	ldr	r3, [pc, #32]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d44:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d4e:	4904      	ldr	r1, [pc, #16]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007d50:	4313      	orrs	r3, r2
 8007d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007d56:	7cbb      	ldrb	r3, [r7, #18]
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3718      	adds	r7, #24
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	40021000 	.word	0x40021000

08007d64 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007d72:	4b75      	ldr	r3, [pc, #468]	; (8007f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	f003 0303 	and.w	r3, r3, #3
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d018      	beq.n	8007db0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007d7e:	4b72      	ldr	r3, [pc, #456]	; (8007f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	f003 0203 	and.w	r2, r3, #3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d10d      	bne.n	8007daa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
       ||
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d009      	beq.n	8007daa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007d96:	4b6c      	ldr	r3, [pc, #432]	; (8007f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	091b      	lsrs	r3, r3, #4
 8007d9c:	f003 0307 	and.w	r3, r3, #7
 8007da0:	1c5a      	adds	r2, r3, #1
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	685b      	ldr	r3, [r3, #4]
       ||
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d047      	beq.n	8007e3a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	73fb      	strb	r3, [r7, #15]
 8007dae:	e044      	b.n	8007e3a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2b03      	cmp	r3, #3
 8007db6:	d018      	beq.n	8007dea <RCCEx_PLLSAI1_Config+0x86>
 8007db8:	2b03      	cmp	r3, #3
 8007dba:	d825      	bhi.n	8007e08 <RCCEx_PLLSAI1_Config+0xa4>
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d002      	beq.n	8007dc6 <RCCEx_PLLSAI1_Config+0x62>
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	d009      	beq.n	8007dd8 <RCCEx_PLLSAI1_Config+0x74>
 8007dc4:	e020      	b.n	8007e08 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007dc6:	4b60      	ldr	r3, [pc, #384]	; (8007f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f003 0302 	and.w	r3, r3, #2
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d11d      	bne.n	8007e0e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007dd6:	e01a      	b.n	8007e0e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007dd8:	4b5b      	ldr	r3, [pc, #364]	; (8007f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d116      	bne.n	8007e12 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007de4:	2301      	movs	r3, #1
 8007de6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007de8:	e013      	b.n	8007e12 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007dea:	4b57      	ldr	r3, [pc, #348]	; (8007f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d10f      	bne.n	8007e16 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007df6:	4b54      	ldr	r3, [pc, #336]	; (8007f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d109      	bne.n	8007e16 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007e06:	e006      	b.n	8007e16 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e0c:	e004      	b.n	8007e18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007e0e:	bf00      	nop
 8007e10:	e002      	b.n	8007e18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007e12:	bf00      	nop
 8007e14:	e000      	b.n	8007e18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007e16:	bf00      	nop
    }

    if(status == HAL_OK)
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d10d      	bne.n	8007e3a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007e1e:	4b4a      	ldr	r3, [pc, #296]	; (8007f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6819      	ldr	r1, [r3, #0]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	3b01      	subs	r3, #1
 8007e30:	011b      	lsls	r3, r3, #4
 8007e32:	430b      	orrs	r3, r1
 8007e34:	4944      	ldr	r1, [pc, #272]	; (8007f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e36:	4313      	orrs	r3, r2
 8007e38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007e3a:	7bfb      	ldrb	r3, [r7, #15]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d17d      	bne.n	8007f3c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007e40:	4b41      	ldr	r3, [pc, #260]	; (8007f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a40      	ldr	r2, [pc, #256]	; (8007f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007e4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e4c:	f7fa fd4c 	bl	80028e8 <HAL_GetTick>
 8007e50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007e52:	e009      	b.n	8007e68 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007e54:	f7fa fd48 	bl	80028e8 <HAL_GetTick>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	1ad3      	subs	r3, r2, r3
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d902      	bls.n	8007e68 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007e62:	2303      	movs	r3, #3
 8007e64:	73fb      	strb	r3, [r7, #15]
        break;
 8007e66:	e005      	b.n	8007e74 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007e68:	4b37      	ldr	r3, [pc, #220]	; (8007f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d1ef      	bne.n	8007e54 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007e74:	7bfb      	ldrb	r3, [r7, #15]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d160      	bne.n	8007f3c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d111      	bne.n	8007ea4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007e80:	4b31      	ldr	r3, [pc, #196]	; (8007f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e82:	691b      	ldr	r3, [r3, #16]
 8007e84:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007e88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	6892      	ldr	r2, [r2, #8]
 8007e90:	0211      	lsls	r1, r2, #8
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	68d2      	ldr	r2, [r2, #12]
 8007e96:	0912      	lsrs	r2, r2, #4
 8007e98:	0452      	lsls	r2, r2, #17
 8007e9a:	430a      	orrs	r2, r1
 8007e9c:	492a      	ldr	r1, [pc, #168]	; (8007f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	610b      	str	r3, [r1, #16]
 8007ea2:	e027      	b.n	8007ef4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d112      	bne.n	8007ed0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007eaa:	4b27      	ldr	r3, [pc, #156]	; (8007f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007eb2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	6892      	ldr	r2, [r2, #8]
 8007eba:	0211      	lsls	r1, r2, #8
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	6912      	ldr	r2, [r2, #16]
 8007ec0:	0852      	lsrs	r2, r2, #1
 8007ec2:	3a01      	subs	r2, #1
 8007ec4:	0552      	lsls	r2, r2, #21
 8007ec6:	430a      	orrs	r2, r1
 8007ec8:	491f      	ldr	r1, [pc, #124]	; (8007f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	610b      	str	r3, [r1, #16]
 8007ece:	e011      	b.n	8007ef4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007ed0:	4b1d      	ldr	r3, [pc, #116]	; (8007f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007ed8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	6892      	ldr	r2, [r2, #8]
 8007ee0:	0211      	lsls	r1, r2, #8
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	6952      	ldr	r2, [r2, #20]
 8007ee6:	0852      	lsrs	r2, r2, #1
 8007ee8:	3a01      	subs	r2, #1
 8007eea:	0652      	lsls	r2, r2, #25
 8007eec:	430a      	orrs	r2, r1
 8007eee:	4916      	ldr	r1, [pc, #88]	; (8007f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007ef4:	4b14      	ldr	r3, [pc, #80]	; (8007f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a13      	ldr	r2, [pc, #76]	; (8007f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007efa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007efe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f00:	f7fa fcf2 	bl	80028e8 <HAL_GetTick>
 8007f04:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007f06:	e009      	b.n	8007f1c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007f08:	f7fa fcee 	bl	80028e8 <HAL_GetTick>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d902      	bls.n	8007f1c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8007f16:	2303      	movs	r3, #3
 8007f18:	73fb      	strb	r3, [r7, #15]
          break;
 8007f1a:	e005      	b.n	8007f28 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007f1c:	4b0a      	ldr	r3, [pc, #40]	; (8007f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d0ef      	beq.n	8007f08 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007f28:	7bfb      	ldrb	r3, [r7, #15]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d106      	bne.n	8007f3c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007f2e:	4b06      	ldr	r3, [pc, #24]	; (8007f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f30:	691a      	ldr	r2, [r3, #16]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	699b      	ldr	r3, [r3, #24]
 8007f36:	4904      	ldr	r1, [pc, #16]	; (8007f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	40021000 	.word	0x40021000

08007f4c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f56:	2300      	movs	r3, #0
 8007f58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007f5a:	4b6a      	ldr	r3, [pc, #424]	; (8008104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	f003 0303 	and.w	r3, r3, #3
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d018      	beq.n	8007f98 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007f66:	4b67      	ldr	r3, [pc, #412]	; (8008104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	f003 0203 	and.w	r2, r3, #3
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d10d      	bne.n	8007f92 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
       ||
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d009      	beq.n	8007f92 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007f7e:	4b61      	ldr	r3, [pc, #388]	; (8008104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	091b      	lsrs	r3, r3, #4
 8007f84:	f003 0307 	and.w	r3, r3, #7
 8007f88:	1c5a      	adds	r2, r3, #1
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	685b      	ldr	r3, [r3, #4]
       ||
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d047      	beq.n	8008022 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	73fb      	strb	r3, [r7, #15]
 8007f96:	e044      	b.n	8008022 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2b03      	cmp	r3, #3
 8007f9e:	d018      	beq.n	8007fd2 <RCCEx_PLLSAI2_Config+0x86>
 8007fa0:	2b03      	cmp	r3, #3
 8007fa2:	d825      	bhi.n	8007ff0 <RCCEx_PLLSAI2_Config+0xa4>
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d002      	beq.n	8007fae <RCCEx_PLLSAI2_Config+0x62>
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	d009      	beq.n	8007fc0 <RCCEx_PLLSAI2_Config+0x74>
 8007fac:	e020      	b.n	8007ff0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007fae:	4b55      	ldr	r3, [pc, #340]	; (8008104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f003 0302 	and.w	r3, r3, #2
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d11d      	bne.n	8007ff6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007fbe:	e01a      	b.n	8007ff6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007fc0:	4b50      	ldr	r3, [pc, #320]	; (8008104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d116      	bne.n	8007ffa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007fd0:	e013      	b.n	8007ffa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007fd2:	4b4c      	ldr	r3, [pc, #304]	; (8008104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d10f      	bne.n	8007ffe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007fde:	4b49      	ldr	r3, [pc, #292]	; (8008104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d109      	bne.n	8007ffe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007fee:	e006      	b.n	8007ffe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ff4:	e004      	b.n	8008000 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007ff6:	bf00      	nop
 8007ff8:	e002      	b.n	8008000 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007ffa:	bf00      	nop
 8007ffc:	e000      	b.n	8008000 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007ffe:	bf00      	nop
    }

    if(status == HAL_OK)
 8008000:	7bfb      	ldrb	r3, [r7, #15]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d10d      	bne.n	8008022 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008006:	4b3f      	ldr	r3, [pc, #252]	; (8008104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6819      	ldr	r1, [r3, #0]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	3b01      	subs	r3, #1
 8008018:	011b      	lsls	r3, r3, #4
 800801a:	430b      	orrs	r3, r1
 800801c:	4939      	ldr	r1, [pc, #228]	; (8008104 <RCCEx_PLLSAI2_Config+0x1b8>)
 800801e:	4313      	orrs	r3, r2
 8008020:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008022:	7bfb      	ldrb	r3, [r7, #15]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d167      	bne.n	80080f8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008028:	4b36      	ldr	r3, [pc, #216]	; (8008104 <RCCEx_PLLSAI2_Config+0x1b8>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a35      	ldr	r2, [pc, #212]	; (8008104 <RCCEx_PLLSAI2_Config+0x1b8>)
 800802e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008032:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008034:	f7fa fc58 	bl	80028e8 <HAL_GetTick>
 8008038:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800803a:	e009      	b.n	8008050 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800803c:	f7fa fc54 	bl	80028e8 <HAL_GetTick>
 8008040:	4602      	mov	r2, r0
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	1ad3      	subs	r3, r2, r3
 8008046:	2b02      	cmp	r3, #2
 8008048:	d902      	bls.n	8008050 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800804a:	2303      	movs	r3, #3
 800804c:	73fb      	strb	r3, [r7, #15]
        break;
 800804e:	e005      	b.n	800805c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008050:	4b2c      	ldr	r3, [pc, #176]	; (8008104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008058:	2b00      	cmp	r3, #0
 800805a:	d1ef      	bne.n	800803c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800805c:	7bfb      	ldrb	r3, [r7, #15]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d14a      	bne.n	80080f8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d111      	bne.n	800808c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008068:	4b26      	ldr	r3, [pc, #152]	; (8008104 <RCCEx_PLLSAI2_Config+0x1b8>)
 800806a:	695b      	ldr	r3, [r3, #20]
 800806c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008070:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	6892      	ldr	r2, [r2, #8]
 8008078:	0211      	lsls	r1, r2, #8
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	68d2      	ldr	r2, [r2, #12]
 800807e:	0912      	lsrs	r2, r2, #4
 8008080:	0452      	lsls	r2, r2, #17
 8008082:	430a      	orrs	r2, r1
 8008084:	491f      	ldr	r1, [pc, #124]	; (8008104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008086:	4313      	orrs	r3, r2
 8008088:	614b      	str	r3, [r1, #20]
 800808a:	e011      	b.n	80080b0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800808c:	4b1d      	ldr	r3, [pc, #116]	; (8008104 <RCCEx_PLLSAI2_Config+0x1b8>)
 800808e:	695b      	ldr	r3, [r3, #20]
 8008090:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008094:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	6892      	ldr	r2, [r2, #8]
 800809c:	0211      	lsls	r1, r2, #8
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	6912      	ldr	r2, [r2, #16]
 80080a2:	0852      	lsrs	r2, r2, #1
 80080a4:	3a01      	subs	r2, #1
 80080a6:	0652      	lsls	r2, r2, #25
 80080a8:	430a      	orrs	r2, r1
 80080aa:	4916      	ldr	r1, [pc, #88]	; (8008104 <RCCEx_PLLSAI2_Config+0x1b8>)
 80080ac:	4313      	orrs	r3, r2
 80080ae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80080b0:	4b14      	ldr	r3, [pc, #80]	; (8008104 <RCCEx_PLLSAI2_Config+0x1b8>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a13      	ldr	r2, [pc, #76]	; (8008104 <RCCEx_PLLSAI2_Config+0x1b8>)
 80080b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080bc:	f7fa fc14 	bl	80028e8 <HAL_GetTick>
 80080c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80080c2:	e009      	b.n	80080d8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80080c4:	f7fa fc10 	bl	80028e8 <HAL_GetTick>
 80080c8:	4602      	mov	r2, r0
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d902      	bls.n	80080d8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	73fb      	strb	r3, [r7, #15]
          break;
 80080d6:	e005      	b.n	80080e4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80080d8:	4b0a      	ldr	r3, [pc, #40]	; (8008104 <RCCEx_PLLSAI2_Config+0x1b8>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d0ef      	beq.n	80080c4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80080e4:	7bfb      	ldrb	r3, [r7, #15]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d106      	bne.n	80080f8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80080ea:	4b06      	ldr	r3, [pc, #24]	; (8008104 <RCCEx_PLLSAI2_Config+0x1b8>)
 80080ec:	695a      	ldr	r2, [r3, #20]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	695b      	ldr	r3, [r3, #20]
 80080f2:	4904      	ldr	r1, [pc, #16]	; (8008104 <RCCEx_PLLSAI2_Config+0x1b8>)
 80080f4:	4313      	orrs	r3, r2
 80080f6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80080f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3710      	adds	r7, #16
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	40021000 	.word	0x40021000

08008108 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d101      	bne.n	800811a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008116:	2301      	movs	r3, #1
 8008118:	e049      	b.n	80081ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008120:	b2db      	uxtb	r3, r3
 8008122:	2b00      	cmp	r3, #0
 8008124:	d106      	bne.n	8008134 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f841 	bl	80081b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2202      	movs	r2, #2
 8008138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	3304      	adds	r3, #4
 8008144:	4619      	mov	r1, r3
 8008146:	4610      	mov	r0, r2
 8008148:	f000 f9e0 	bl	800850c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3708      	adds	r7, #8
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80081b6:	b480      	push	{r7}
 80081b8:	b083      	sub	sp, #12
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80081be:	bf00      	nop
 80081c0:	370c      	adds	r7, #12
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr
	...

080081cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b085      	sub	sp, #20
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d001      	beq.n	80081e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80081e0:	2301      	movs	r3, #1
 80081e2:	e04f      	b.n	8008284 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2202      	movs	r2, #2
 80081e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	68da      	ldr	r2, [r3, #12]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f042 0201 	orr.w	r2, r2, #1
 80081fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a23      	ldr	r2, [pc, #140]	; (8008290 <HAL_TIM_Base_Start_IT+0xc4>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d01d      	beq.n	8008242 <HAL_TIM_Base_Start_IT+0x76>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800820e:	d018      	beq.n	8008242 <HAL_TIM_Base_Start_IT+0x76>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a1f      	ldr	r2, [pc, #124]	; (8008294 <HAL_TIM_Base_Start_IT+0xc8>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d013      	beq.n	8008242 <HAL_TIM_Base_Start_IT+0x76>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a1e      	ldr	r2, [pc, #120]	; (8008298 <HAL_TIM_Base_Start_IT+0xcc>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d00e      	beq.n	8008242 <HAL_TIM_Base_Start_IT+0x76>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a1c      	ldr	r2, [pc, #112]	; (800829c <HAL_TIM_Base_Start_IT+0xd0>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d009      	beq.n	8008242 <HAL_TIM_Base_Start_IT+0x76>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a1b      	ldr	r2, [pc, #108]	; (80082a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d004      	beq.n	8008242 <HAL_TIM_Base_Start_IT+0x76>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a19      	ldr	r2, [pc, #100]	; (80082a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d115      	bne.n	800826e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	689a      	ldr	r2, [r3, #8]
 8008248:	4b17      	ldr	r3, [pc, #92]	; (80082a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800824a:	4013      	ands	r3, r2
 800824c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2b06      	cmp	r3, #6
 8008252:	d015      	beq.n	8008280 <HAL_TIM_Base_Start_IT+0xb4>
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800825a:	d011      	beq.n	8008280 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f042 0201 	orr.w	r2, r2, #1
 800826a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800826c:	e008      	b.n	8008280 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f042 0201 	orr.w	r2, r2, #1
 800827c:	601a      	str	r2, [r3, #0]
 800827e:	e000      	b.n	8008282 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008280:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	3714      	adds	r7, #20
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr
 8008290:	40012c00 	.word	0x40012c00
 8008294:	40000400 	.word	0x40000400
 8008298:	40000800 	.word	0x40000800
 800829c:	40000c00 	.word	0x40000c00
 80082a0:	40013400 	.word	0x40013400
 80082a4:	40014000 	.word	0x40014000
 80082a8:	00010007 	.word	0x00010007

080082ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	68db      	ldr	r3, [r3, #12]
 80082ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	691b      	ldr	r3, [r3, #16]
 80082c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	f003 0302 	and.w	r3, r3, #2
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d020      	beq.n	8008310 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f003 0302 	and.w	r3, r3, #2
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d01b      	beq.n	8008310 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f06f 0202 	mvn.w	r2, #2
 80082e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2201      	movs	r2, #1
 80082e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	699b      	ldr	r3, [r3, #24]
 80082ee:	f003 0303 	and.w	r3, r3, #3
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d003      	beq.n	80082fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 f8e9 	bl	80084ce <HAL_TIM_IC_CaptureCallback>
 80082fc:	e005      	b.n	800830a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 f8db 	bl	80084ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 f8ec 	bl	80084e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	f003 0304 	and.w	r3, r3, #4
 8008316:	2b00      	cmp	r3, #0
 8008318:	d020      	beq.n	800835c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f003 0304 	and.w	r3, r3, #4
 8008320:	2b00      	cmp	r3, #0
 8008322:	d01b      	beq.n	800835c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f06f 0204 	mvn.w	r2, #4
 800832c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2202      	movs	r2, #2
 8008332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	699b      	ldr	r3, [r3, #24]
 800833a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800833e:	2b00      	cmp	r3, #0
 8008340:	d003      	beq.n	800834a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f8c3 	bl	80084ce <HAL_TIM_IC_CaptureCallback>
 8008348:	e005      	b.n	8008356 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 f8b5 	bl	80084ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f8c6 	bl	80084e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	f003 0308 	and.w	r3, r3, #8
 8008362:	2b00      	cmp	r3, #0
 8008364:	d020      	beq.n	80083a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f003 0308 	and.w	r3, r3, #8
 800836c:	2b00      	cmp	r3, #0
 800836e:	d01b      	beq.n	80083a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f06f 0208 	mvn.w	r2, #8
 8008378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2204      	movs	r2, #4
 800837e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	69db      	ldr	r3, [r3, #28]
 8008386:	f003 0303 	and.w	r3, r3, #3
 800838a:	2b00      	cmp	r3, #0
 800838c:	d003      	beq.n	8008396 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 f89d 	bl	80084ce <HAL_TIM_IC_CaptureCallback>
 8008394:	e005      	b.n	80083a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 f88f 	bl	80084ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 f8a0 	bl	80084e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	f003 0310 	and.w	r3, r3, #16
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d020      	beq.n	80083f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f003 0310 	and.w	r3, r3, #16
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d01b      	beq.n	80083f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f06f 0210 	mvn.w	r2, #16
 80083c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2208      	movs	r2, #8
 80083ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	69db      	ldr	r3, [r3, #28]
 80083d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d003      	beq.n	80083e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 f877 	bl	80084ce <HAL_TIM_IC_CaptureCallback>
 80083e0:	e005      	b.n	80083ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f869 	bl	80084ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 f87a 	bl	80084e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	f003 0301 	and.w	r3, r3, #1
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00c      	beq.n	8008418 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f003 0301 	and.w	r3, r3, #1
 8008404:	2b00      	cmp	r3, #0
 8008406:	d007      	beq.n	8008418 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f06f 0201 	mvn.w	r2, #1
 8008410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f7f9 fa66 	bl	80018e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800841e:	2b00      	cmp	r3, #0
 8008420:	d104      	bne.n	800842c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00c      	beq.n	8008446 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008432:	2b00      	cmp	r3, #0
 8008434:	d007      	beq.n	8008446 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800843e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 f913 	bl	800866c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00c      	beq.n	800846a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008456:	2b00      	cmp	r3, #0
 8008458:	d007      	beq.n	800846a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 f90b 	bl	8008680 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008470:	2b00      	cmp	r3, #0
 8008472:	d00c      	beq.n	800848e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800847a:	2b00      	cmp	r3, #0
 800847c:	d007      	beq.n	800848e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 f834 	bl	80084f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	f003 0320 	and.w	r3, r3, #32
 8008494:	2b00      	cmp	r3, #0
 8008496:	d00c      	beq.n	80084b2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f003 0320 	and.w	r3, r3, #32
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d007      	beq.n	80084b2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f06f 0220 	mvn.w	r2, #32
 80084aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 f8d3 	bl	8008658 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084b2:	bf00      	nop
 80084b4:	3710      	adds	r7, #16
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084ba:	b480      	push	{r7}
 80084bc:	b083      	sub	sp, #12
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084c2:	bf00      	nop
 80084c4:	370c      	adds	r7, #12
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr

080084ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80084ce:	b480      	push	{r7}
 80084d0:	b083      	sub	sp, #12
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80084d6:	bf00      	nop
 80084d8:	370c      	adds	r7, #12
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr

080084e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80084e2:	b480      	push	{r7}
 80084e4:	b083      	sub	sp, #12
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80084ea:	bf00      	nop
 80084ec:	370c      	adds	r7, #12
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr

080084f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80084f6:	b480      	push	{r7}
 80084f8:	b083      	sub	sp, #12
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80084fe:	bf00      	nop
 8008500:	370c      	adds	r7, #12
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr
	...

0800850c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800850c:	b480      	push	{r7}
 800850e:	b085      	sub	sp, #20
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	4a46      	ldr	r2, [pc, #280]	; (8008638 <TIM_Base_SetConfig+0x12c>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d013      	beq.n	800854c <TIM_Base_SetConfig+0x40>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800852a:	d00f      	beq.n	800854c <TIM_Base_SetConfig+0x40>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4a43      	ldr	r2, [pc, #268]	; (800863c <TIM_Base_SetConfig+0x130>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d00b      	beq.n	800854c <TIM_Base_SetConfig+0x40>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a42      	ldr	r2, [pc, #264]	; (8008640 <TIM_Base_SetConfig+0x134>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d007      	beq.n	800854c <TIM_Base_SetConfig+0x40>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4a41      	ldr	r2, [pc, #260]	; (8008644 <TIM_Base_SetConfig+0x138>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d003      	beq.n	800854c <TIM_Base_SetConfig+0x40>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4a40      	ldr	r2, [pc, #256]	; (8008648 <TIM_Base_SetConfig+0x13c>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d108      	bne.n	800855e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	68fa      	ldr	r2, [r7, #12]
 800855a:	4313      	orrs	r3, r2
 800855c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	4a35      	ldr	r2, [pc, #212]	; (8008638 <TIM_Base_SetConfig+0x12c>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d01f      	beq.n	80085a6 <TIM_Base_SetConfig+0x9a>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800856c:	d01b      	beq.n	80085a6 <TIM_Base_SetConfig+0x9a>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4a32      	ldr	r2, [pc, #200]	; (800863c <TIM_Base_SetConfig+0x130>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d017      	beq.n	80085a6 <TIM_Base_SetConfig+0x9a>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4a31      	ldr	r2, [pc, #196]	; (8008640 <TIM_Base_SetConfig+0x134>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d013      	beq.n	80085a6 <TIM_Base_SetConfig+0x9a>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4a30      	ldr	r2, [pc, #192]	; (8008644 <TIM_Base_SetConfig+0x138>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d00f      	beq.n	80085a6 <TIM_Base_SetConfig+0x9a>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a2f      	ldr	r2, [pc, #188]	; (8008648 <TIM_Base_SetConfig+0x13c>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d00b      	beq.n	80085a6 <TIM_Base_SetConfig+0x9a>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4a2e      	ldr	r2, [pc, #184]	; (800864c <TIM_Base_SetConfig+0x140>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d007      	beq.n	80085a6 <TIM_Base_SetConfig+0x9a>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4a2d      	ldr	r2, [pc, #180]	; (8008650 <TIM_Base_SetConfig+0x144>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d003      	beq.n	80085a6 <TIM_Base_SetConfig+0x9a>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4a2c      	ldr	r2, [pc, #176]	; (8008654 <TIM_Base_SetConfig+0x148>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d108      	bne.n	80085b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	68db      	ldr	r3, [r3, #12]
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	4313      	orrs	r3, r2
 80085b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	695b      	ldr	r3, [r3, #20]
 80085c2:	4313      	orrs	r3, r2
 80085c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	689a      	ldr	r2, [r3, #8]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4a16      	ldr	r2, [pc, #88]	; (8008638 <TIM_Base_SetConfig+0x12c>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d00f      	beq.n	8008604 <TIM_Base_SetConfig+0xf8>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4a18      	ldr	r2, [pc, #96]	; (8008648 <TIM_Base_SetConfig+0x13c>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d00b      	beq.n	8008604 <TIM_Base_SetConfig+0xf8>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	4a17      	ldr	r2, [pc, #92]	; (800864c <TIM_Base_SetConfig+0x140>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d007      	beq.n	8008604 <TIM_Base_SetConfig+0xf8>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4a16      	ldr	r2, [pc, #88]	; (8008650 <TIM_Base_SetConfig+0x144>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d003      	beq.n	8008604 <TIM_Base_SetConfig+0xf8>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4a15      	ldr	r2, [pc, #84]	; (8008654 <TIM_Base_SetConfig+0x148>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d103      	bne.n	800860c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	691a      	ldr	r2, [r3, #16]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2201      	movs	r2, #1
 8008610:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	691b      	ldr	r3, [r3, #16]
 8008616:	f003 0301 	and.w	r3, r3, #1
 800861a:	2b01      	cmp	r3, #1
 800861c:	d105      	bne.n	800862a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	691b      	ldr	r3, [r3, #16]
 8008622:	f023 0201 	bic.w	r2, r3, #1
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	611a      	str	r2, [r3, #16]
  }
}
 800862a:	bf00      	nop
 800862c:	3714      	adds	r7, #20
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop
 8008638:	40012c00 	.word	0x40012c00
 800863c:	40000400 	.word	0x40000400
 8008640:	40000800 	.word	0x40000800
 8008644:	40000c00 	.word	0x40000c00
 8008648:	40013400 	.word	0x40013400
 800864c:	40014000 	.word	0x40014000
 8008650:	40014400 	.word	0x40014400
 8008654:	40014800 	.word	0x40014800

08008658 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008660:	bf00      	nop
 8008662:	370c      	adds	r7, #12
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008674:	bf00      	nop
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008688:	bf00      	nop
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d101      	bne.n	80086a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	e040      	b.n	8008728 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d106      	bne.n	80086bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f7f9 fa82 	bl	8001bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2224      	movs	r2, #36	; 0x24
 80086c0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f022 0201 	bic.w	r2, r2, #1
 80086d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d002      	beq.n	80086e0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 fe90 	bl	8009400 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 fbd5 	bl	8008e90 <UART_SetConfig>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d101      	bne.n	80086f0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	e01b      	b.n	8008728 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	685a      	ldr	r2, [r3, #4]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80086fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	689a      	ldr	r2, [r3, #8]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800870e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f042 0201 	orr.w	r2, r2, #1
 800871e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 ff0f 	bl	8009544 <UART_CheckIdleState>
 8008726:	4603      	mov	r3, r0
}
 8008728:	4618      	mov	r0, r3
 800872a:	3708      	adds	r7, #8
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b08a      	sub	sp, #40	; 0x28
 8008734:	af02      	add	r7, sp, #8
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	603b      	str	r3, [r7, #0]
 800873c:	4613      	mov	r3, r2
 800873e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008744:	2b20      	cmp	r3, #32
 8008746:	d178      	bne.n	800883a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d002      	beq.n	8008754 <HAL_UART_Transmit+0x24>
 800874e:	88fb      	ldrh	r3, [r7, #6]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d101      	bne.n	8008758 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	e071      	b.n	800883c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2200      	movs	r2, #0
 800875c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2221      	movs	r2, #33	; 0x21
 8008764:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008766:	f7fa f8bf 	bl	80028e8 <HAL_GetTick>
 800876a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	88fa      	ldrh	r2, [r7, #6]
 8008770:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	88fa      	ldrh	r2, [r7, #6]
 8008778:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008784:	d108      	bne.n	8008798 <HAL_UART_Transmit+0x68>
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	691b      	ldr	r3, [r3, #16]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d104      	bne.n	8008798 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800878e:	2300      	movs	r3, #0
 8008790:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	61bb      	str	r3, [r7, #24]
 8008796:	e003      	b.n	80087a0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800879c:	2300      	movs	r3, #0
 800879e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80087a0:	e030      	b.n	8008804 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	9300      	str	r3, [sp, #0]
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	2200      	movs	r2, #0
 80087aa:	2180      	movs	r1, #128	; 0x80
 80087ac:	68f8      	ldr	r0, [r7, #12]
 80087ae:	f000 ff71 	bl	8009694 <UART_WaitOnFlagUntilTimeout>
 80087b2:	4603      	mov	r3, r0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d004      	beq.n	80087c2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2220      	movs	r2, #32
 80087bc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80087be:	2303      	movs	r3, #3
 80087c0:	e03c      	b.n	800883c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80087c2:	69fb      	ldr	r3, [r7, #28]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d10b      	bne.n	80087e0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80087c8:	69bb      	ldr	r3, [r7, #24]
 80087ca:	881a      	ldrh	r2, [r3, #0]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087d4:	b292      	uxth	r2, r2
 80087d6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80087d8:	69bb      	ldr	r3, [r7, #24]
 80087da:	3302      	adds	r3, #2
 80087dc:	61bb      	str	r3, [r7, #24]
 80087de:	e008      	b.n	80087f2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	781a      	ldrb	r2, [r3, #0]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	b292      	uxth	r2, r2
 80087ea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	3301      	adds	r3, #1
 80087f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	3b01      	subs	r3, #1
 80087fc:	b29a      	uxth	r2, r3
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800880a:	b29b      	uxth	r3, r3
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1c8      	bne.n	80087a2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	2200      	movs	r2, #0
 8008818:	2140      	movs	r1, #64	; 0x40
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	f000 ff3a 	bl	8009694 <UART_WaitOnFlagUntilTimeout>
 8008820:	4603      	mov	r3, r0
 8008822:	2b00      	cmp	r3, #0
 8008824:	d004      	beq.n	8008830 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2220      	movs	r2, #32
 800882a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800882c:	2303      	movs	r3, #3
 800882e:	e005      	b.n	800883c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2220      	movs	r2, #32
 8008834:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008836:	2300      	movs	r3, #0
 8008838:	e000      	b.n	800883c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800883a:	2302      	movs	r3, #2
  }
}
 800883c:	4618      	mov	r0, r3
 800883e:	3720      	adds	r7, #32
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b0ba      	sub	sp, #232	; 0xe8
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	69db      	ldr	r3, [r3, #28]
 8008852:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	689b      	ldr	r3, [r3, #8]
 8008866:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800886a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800886e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008872:	4013      	ands	r3, r2
 8008874:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008878:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800887c:	2b00      	cmp	r3, #0
 800887e:	d115      	bne.n	80088ac <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008884:	f003 0320 	and.w	r3, r3, #32
 8008888:	2b00      	cmp	r3, #0
 800888a:	d00f      	beq.n	80088ac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800888c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008890:	f003 0320 	and.w	r3, r3, #32
 8008894:	2b00      	cmp	r3, #0
 8008896:	d009      	beq.n	80088ac <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800889c:	2b00      	cmp	r3, #0
 800889e:	f000 82ca 	beq.w	8008e36 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	4798      	blx	r3
      }
      return;
 80088aa:	e2c4      	b.n	8008e36 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80088ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	f000 8117 	beq.w	8008ae4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80088b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088ba:	f003 0301 	and.w	r3, r3, #1
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d106      	bne.n	80088d0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80088c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80088c6:	4b85      	ldr	r3, [pc, #532]	; (8008adc <HAL_UART_IRQHandler+0x298>)
 80088c8:	4013      	ands	r3, r2
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	f000 810a 	beq.w	8008ae4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80088d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088d4:	f003 0301 	and.w	r3, r3, #1
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d011      	beq.n	8008900 <HAL_UART_IRQHandler+0xbc>
 80088dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d00b      	beq.n	8008900 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	2201      	movs	r2, #1
 80088ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088f6:	f043 0201 	orr.w	r2, r3, #1
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008904:	f003 0302 	and.w	r3, r3, #2
 8008908:	2b00      	cmp	r3, #0
 800890a:	d011      	beq.n	8008930 <HAL_UART_IRQHandler+0xec>
 800890c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008910:	f003 0301 	and.w	r3, r3, #1
 8008914:	2b00      	cmp	r3, #0
 8008916:	d00b      	beq.n	8008930 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2202      	movs	r2, #2
 800891e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008926:	f043 0204 	orr.w	r2, r3, #4
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008934:	f003 0304 	and.w	r3, r3, #4
 8008938:	2b00      	cmp	r3, #0
 800893a:	d011      	beq.n	8008960 <HAL_UART_IRQHandler+0x11c>
 800893c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008940:	f003 0301 	and.w	r3, r3, #1
 8008944:	2b00      	cmp	r3, #0
 8008946:	d00b      	beq.n	8008960 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2204      	movs	r2, #4
 800894e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008956:	f043 0202 	orr.w	r2, r3, #2
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008964:	f003 0308 	and.w	r3, r3, #8
 8008968:	2b00      	cmp	r3, #0
 800896a:	d017      	beq.n	800899c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800896c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008970:	f003 0320 	and.w	r3, r3, #32
 8008974:	2b00      	cmp	r3, #0
 8008976:	d105      	bne.n	8008984 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008978:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800897c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008980:	2b00      	cmp	r3, #0
 8008982:	d00b      	beq.n	800899c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2208      	movs	r2, #8
 800898a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008992:	f043 0208 	orr.w	r2, r3, #8
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800899c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d012      	beq.n	80089ce <HAL_UART_IRQHandler+0x18a>
 80089a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d00c      	beq.n	80089ce <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80089bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089c4:	f043 0220 	orr.w	r2, r3, #32
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f000 8230 	beq.w	8008e3a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80089da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089de:	f003 0320 	and.w	r3, r3, #32
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d00d      	beq.n	8008a02 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80089e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089ea:	f003 0320 	and.w	r3, r3, #32
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d007      	beq.n	8008a02 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d003      	beq.n	8008a02 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a16:	2b40      	cmp	r3, #64	; 0x40
 8008a18:	d005      	beq.n	8008a26 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008a1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d04f      	beq.n	8008ac6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 fea1 	bl	800976e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a36:	2b40      	cmp	r3, #64	; 0x40
 8008a38:	d141      	bne.n	8008abe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	3308      	adds	r3, #8
 8008a40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a48:	e853 3f00 	ldrex	r3, [r3]
 8008a4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008a50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008a54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	3308      	adds	r3, #8
 8008a62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008a66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008a6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008a72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008a76:	e841 2300 	strex	r3, r2, [r1]
 8008a7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008a7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d1d9      	bne.n	8008a3a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d013      	beq.n	8008ab6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a92:	4a13      	ldr	r2, [pc, #76]	; (8008ae0 <HAL_UART_IRQHandler+0x29c>)
 8008a94:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7fc f828 	bl	8004af0 <HAL_DMA_Abort_IT>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d017      	beq.n	8008ad6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008ab0:	4610      	mov	r0, r2
 8008ab2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ab4:	e00f      	b.n	8008ad6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f9d4 	bl	8008e64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008abc:	e00b      	b.n	8008ad6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 f9d0 	bl	8008e64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ac4:	e007      	b.n	8008ad6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 f9cc 	bl	8008e64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8008ad4:	e1b1      	b.n	8008e3a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ad6:	bf00      	nop
    return;
 8008ad8:	e1af      	b.n	8008e3a <HAL_UART_IRQHandler+0x5f6>
 8008ada:	bf00      	nop
 8008adc:	04000120 	.word	0x04000120
 8008ae0:	08009837 	.word	0x08009837

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	f040 816a 	bne.w	8008dc2 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008af2:	f003 0310 	and.w	r3, r3, #16
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	f000 8163 	beq.w	8008dc2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b00:	f003 0310 	and.w	r3, r3, #16
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	f000 815c 	beq.w	8008dc2 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	2210      	movs	r2, #16
 8008b10:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b1c:	2b40      	cmp	r3, #64	; 0x40
 8008b1e:	f040 80d4 	bne.w	8008cca <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008b2e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	f000 80ad 	beq.w	8008c92 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008b3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008b42:	429a      	cmp	r2, r3
 8008b44:	f080 80a5 	bcs.w	8008c92 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008b4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f003 0320 	and.w	r3, r3, #32
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	f040 8086 	bne.w	8008c70 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008b70:	e853 3f00 	ldrex	r3, [r3]
 8008b74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008b78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	461a      	mov	r2, r3
 8008b8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008b92:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b96:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008b9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008b9e:	e841 2300 	strex	r3, r2, [r1]
 8008ba2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008ba6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d1da      	bne.n	8008b64 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	3308      	adds	r3, #8
 8008bb4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bb8:	e853 3f00 	ldrex	r3, [r3]
 8008bbc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008bbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008bc0:	f023 0301 	bic.w	r3, r3, #1
 8008bc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	3308      	adds	r3, #8
 8008bce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008bd2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008bd6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008bda:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008bde:	e841 2300 	strex	r3, r2, [r1]
 8008be2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008be4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d1e1      	bne.n	8008bae <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	3308      	adds	r3, #8
 8008bf0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bf4:	e853 3f00 	ldrex	r3, [r3]
 8008bf8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008bfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	3308      	adds	r3, #8
 8008c0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008c0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008c10:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008c14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008c16:	e841 2300 	strex	r3, r2, [r1]
 8008c1a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008c1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d1e3      	bne.n	8008bea <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2220      	movs	r2, #32
 8008c26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c38:	e853 3f00 	ldrex	r3, [r3]
 8008c3c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c40:	f023 0310 	bic.w	r3, r3, #16
 8008c44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c52:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c54:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008c58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c5a:	e841 2300 	strex	r3, r2, [r1]
 8008c5e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008c60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d1e4      	bne.n	8008c30 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f7fb ff02 	bl	8004a74 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2202      	movs	r2, #2
 8008c74:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	1ad3      	subs	r3, r2, r3
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	4619      	mov	r1, r3
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 f8f4 	bl	8008e78 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008c90:	e0d5      	b.n	8008e3e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008c98:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	f040 80ce 	bne.w	8008e3e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f003 0320 	and.w	r3, r3, #32
 8008cae:	2b20      	cmp	r3, #32
 8008cb0:	f040 80c5 	bne.w	8008e3e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2202      	movs	r2, #2
 8008cb8:	665a      	str	r2, [r3, #100]	; 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 f8d8 	bl	8008e78 <HAL_UARTEx_RxEventCallback>
      return;
 8008cc8:	e0b9      	b.n	8008e3e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	f000 80ab 	beq.w	8008e42 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8008cec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f000 80a6 	beq.w	8008e42 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cfe:	e853 3f00 	ldrex	r3, [r3]
 8008d02:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	461a      	mov	r2, r3
 8008d14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008d18:	647b      	str	r3, [r7, #68]	; 0x44
 8008d1a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d20:	e841 2300 	strex	r3, r2, [r1]
 8008d24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d1e4      	bne.n	8008cf6 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	3308      	adds	r3, #8
 8008d32:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d36:	e853 3f00 	ldrex	r3, [r3]
 8008d3a:	623b      	str	r3, [r7, #32]
   return(result);
 8008d3c:	6a3b      	ldr	r3, [r7, #32]
 8008d3e:	f023 0301 	bic.w	r3, r3, #1
 8008d42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	3308      	adds	r3, #8
 8008d4c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008d50:	633a      	str	r2, [r7, #48]	; 0x30
 8008d52:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d58:	e841 2300 	strex	r3, r2, [r1]
 8008d5c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d1e3      	bne.n	8008d2c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2220      	movs	r2, #32
 8008d68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	e853 3f00 	ldrex	r3, [r3]
 8008d84:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f023 0310 	bic.w	r3, r3, #16
 8008d8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	461a      	mov	r2, r3
 8008d96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008d9a:	61fb      	str	r3, [r7, #28]
 8008d9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d9e:	69b9      	ldr	r1, [r7, #24]
 8008da0:	69fa      	ldr	r2, [r7, #28]
 8008da2:	e841 2300 	strex	r3, r2, [r1]
 8008da6:	617b      	str	r3, [r7, #20]
   return(result);
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d1e4      	bne.n	8008d78 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2202      	movs	r2, #2
 8008db2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008db4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008db8:	4619      	mov	r1, r3
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 f85c 	bl	8008e78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008dc0:	e03f      	b.n	8008e42 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d00e      	beq.n	8008dec <HAL_UART_IRQHandler+0x5a8>
 8008dce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d008      	beq.n	8008dec <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008de2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 fd66 	bl	80098b6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008dea:	e02d      	b.n	8008e48 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d00e      	beq.n	8008e16 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d008      	beq.n	8008e16 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d01c      	beq.n	8008e46 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	4798      	blx	r3
    }
    return;
 8008e14:	e017      	b.n	8008e46 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d012      	beq.n	8008e48 <HAL_UART_IRQHandler+0x604>
 8008e22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00c      	beq.n	8008e48 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 fd17 	bl	8009862 <UART_EndTransmit_IT>
    return;
 8008e34:	e008      	b.n	8008e48 <HAL_UART_IRQHandler+0x604>
      return;
 8008e36:	bf00      	nop
 8008e38:	e006      	b.n	8008e48 <HAL_UART_IRQHandler+0x604>
    return;
 8008e3a:	bf00      	nop
 8008e3c:	e004      	b.n	8008e48 <HAL_UART_IRQHandler+0x604>
      return;
 8008e3e:	bf00      	nop
 8008e40:	e002      	b.n	8008e48 <HAL_UART_IRQHandler+0x604>
      return;
 8008e42:	bf00      	nop
 8008e44:	e000      	b.n	8008e48 <HAL_UART_IRQHandler+0x604>
    return;
 8008e46:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008e48:	37e8      	adds	r7, #232	; 0xe8
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop

08008e50 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b083      	sub	sp, #12
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008e58:	bf00      	nop
 8008e5a:	370c      	adds	r7, #12
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b083      	sub	sp, #12
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008e6c:	bf00      	nop
 8008e6e:	370c      	adds	r7, #12
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	460b      	mov	r3, r1
 8008e82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008e84:	bf00      	nop
 8008e86:	370c      	adds	r7, #12
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr

08008e90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e94:	b08a      	sub	sp, #40	; 0x28
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	689a      	ldr	r2, [r3, #8]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	691b      	ldr	r3, [r3, #16]
 8008ea8:	431a      	orrs	r2, r3
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	695b      	ldr	r3, [r3, #20]
 8008eae:	431a      	orrs	r2, r3
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	69db      	ldr	r3, [r3, #28]
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	4ba4      	ldr	r3, [pc, #656]	; (8009150 <UART_SetConfig+0x2c0>)
 8008ec0:	4013      	ands	r3, r2
 8008ec2:	68fa      	ldr	r2, [r7, #12]
 8008ec4:	6812      	ldr	r2, [r2, #0]
 8008ec6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008ec8:	430b      	orrs	r3, r1
 8008eca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	68da      	ldr	r2, [r3, #12]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	430a      	orrs	r2, r1
 8008ee0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	699b      	ldr	r3, [r3, #24]
 8008ee6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a99      	ldr	r2, [pc, #612]	; (8009154 <UART_SetConfig+0x2c4>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d004      	beq.n	8008efc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	6a1b      	ldr	r3, [r3, #32]
 8008ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f0c:	430a      	orrs	r2, r1
 8008f0e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a90      	ldr	r2, [pc, #576]	; (8009158 <UART_SetConfig+0x2c8>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d126      	bne.n	8008f68 <UART_SetConfig+0xd8>
 8008f1a:	4b90      	ldr	r3, [pc, #576]	; (800915c <UART_SetConfig+0x2cc>)
 8008f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f20:	f003 0303 	and.w	r3, r3, #3
 8008f24:	2b03      	cmp	r3, #3
 8008f26:	d81b      	bhi.n	8008f60 <UART_SetConfig+0xd0>
 8008f28:	a201      	add	r2, pc, #4	; (adr r2, 8008f30 <UART_SetConfig+0xa0>)
 8008f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f2e:	bf00      	nop
 8008f30:	08008f41 	.word	0x08008f41
 8008f34:	08008f51 	.word	0x08008f51
 8008f38:	08008f49 	.word	0x08008f49
 8008f3c:	08008f59 	.word	0x08008f59
 8008f40:	2301      	movs	r3, #1
 8008f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f46:	e116      	b.n	8009176 <UART_SetConfig+0x2e6>
 8008f48:	2302      	movs	r3, #2
 8008f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f4e:	e112      	b.n	8009176 <UART_SetConfig+0x2e6>
 8008f50:	2304      	movs	r3, #4
 8008f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f56:	e10e      	b.n	8009176 <UART_SetConfig+0x2e6>
 8008f58:	2308      	movs	r3, #8
 8008f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f5e:	e10a      	b.n	8009176 <UART_SetConfig+0x2e6>
 8008f60:	2310      	movs	r3, #16
 8008f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f66:	e106      	b.n	8009176 <UART_SetConfig+0x2e6>
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a7c      	ldr	r2, [pc, #496]	; (8009160 <UART_SetConfig+0x2d0>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d138      	bne.n	8008fe4 <UART_SetConfig+0x154>
 8008f72:	4b7a      	ldr	r3, [pc, #488]	; (800915c <UART_SetConfig+0x2cc>)
 8008f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f78:	f003 030c 	and.w	r3, r3, #12
 8008f7c:	2b0c      	cmp	r3, #12
 8008f7e:	d82d      	bhi.n	8008fdc <UART_SetConfig+0x14c>
 8008f80:	a201      	add	r2, pc, #4	; (adr r2, 8008f88 <UART_SetConfig+0xf8>)
 8008f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f86:	bf00      	nop
 8008f88:	08008fbd 	.word	0x08008fbd
 8008f8c:	08008fdd 	.word	0x08008fdd
 8008f90:	08008fdd 	.word	0x08008fdd
 8008f94:	08008fdd 	.word	0x08008fdd
 8008f98:	08008fcd 	.word	0x08008fcd
 8008f9c:	08008fdd 	.word	0x08008fdd
 8008fa0:	08008fdd 	.word	0x08008fdd
 8008fa4:	08008fdd 	.word	0x08008fdd
 8008fa8:	08008fc5 	.word	0x08008fc5
 8008fac:	08008fdd 	.word	0x08008fdd
 8008fb0:	08008fdd 	.word	0x08008fdd
 8008fb4:	08008fdd 	.word	0x08008fdd
 8008fb8:	08008fd5 	.word	0x08008fd5
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008fc2:	e0d8      	b.n	8009176 <UART_SetConfig+0x2e6>
 8008fc4:	2302      	movs	r3, #2
 8008fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008fca:	e0d4      	b.n	8009176 <UART_SetConfig+0x2e6>
 8008fcc:	2304      	movs	r3, #4
 8008fce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008fd2:	e0d0      	b.n	8009176 <UART_SetConfig+0x2e6>
 8008fd4:	2308      	movs	r3, #8
 8008fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008fda:	e0cc      	b.n	8009176 <UART_SetConfig+0x2e6>
 8008fdc:	2310      	movs	r3, #16
 8008fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008fe2:	e0c8      	b.n	8009176 <UART_SetConfig+0x2e6>
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a5e      	ldr	r2, [pc, #376]	; (8009164 <UART_SetConfig+0x2d4>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d125      	bne.n	800903a <UART_SetConfig+0x1aa>
 8008fee:	4b5b      	ldr	r3, [pc, #364]	; (800915c <UART_SetConfig+0x2cc>)
 8008ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ff4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008ff8:	2b30      	cmp	r3, #48	; 0x30
 8008ffa:	d016      	beq.n	800902a <UART_SetConfig+0x19a>
 8008ffc:	2b30      	cmp	r3, #48	; 0x30
 8008ffe:	d818      	bhi.n	8009032 <UART_SetConfig+0x1a2>
 8009000:	2b20      	cmp	r3, #32
 8009002:	d00a      	beq.n	800901a <UART_SetConfig+0x18a>
 8009004:	2b20      	cmp	r3, #32
 8009006:	d814      	bhi.n	8009032 <UART_SetConfig+0x1a2>
 8009008:	2b00      	cmp	r3, #0
 800900a:	d002      	beq.n	8009012 <UART_SetConfig+0x182>
 800900c:	2b10      	cmp	r3, #16
 800900e:	d008      	beq.n	8009022 <UART_SetConfig+0x192>
 8009010:	e00f      	b.n	8009032 <UART_SetConfig+0x1a2>
 8009012:	2300      	movs	r3, #0
 8009014:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009018:	e0ad      	b.n	8009176 <UART_SetConfig+0x2e6>
 800901a:	2302      	movs	r3, #2
 800901c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009020:	e0a9      	b.n	8009176 <UART_SetConfig+0x2e6>
 8009022:	2304      	movs	r3, #4
 8009024:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009028:	e0a5      	b.n	8009176 <UART_SetConfig+0x2e6>
 800902a:	2308      	movs	r3, #8
 800902c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009030:	e0a1      	b.n	8009176 <UART_SetConfig+0x2e6>
 8009032:	2310      	movs	r3, #16
 8009034:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009038:	e09d      	b.n	8009176 <UART_SetConfig+0x2e6>
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a4a      	ldr	r2, [pc, #296]	; (8009168 <UART_SetConfig+0x2d8>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d125      	bne.n	8009090 <UART_SetConfig+0x200>
 8009044:	4b45      	ldr	r3, [pc, #276]	; (800915c <UART_SetConfig+0x2cc>)
 8009046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800904a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800904e:	2bc0      	cmp	r3, #192	; 0xc0
 8009050:	d016      	beq.n	8009080 <UART_SetConfig+0x1f0>
 8009052:	2bc0      	cmp	r3, #192	; 0xc0
 8009054:	d818      	bhi.n	8009088 <UART_SetConfig+0x1f8>
 8009056:	2b80      	cmp	r3, #128	; 0x80
 8009058:	d00a      	beq.n	8009070 <UART_SetConfig+0x1e0>
 800905a:	2b80      	cmp	r3, #128	; 0x80
 800905c:	d814      	bhi.n	8009088 <UART_SetConfig+0x1f8>
 800905e:	2b00      	cmp	r3, #0
 8009060:	d002      	beq.n	8009068 <UART_SetConfig+0x1d8>
 8009062:	2b40      	cmp	r3, #64	; 0x40
 8009064:	d008      	beq.n	8009078 <UART_SetConfig+0x1e8>
 8009066:	e00f      	b.n	8009088 <UART_SetConfig+0x1f8>
 8009068:	2300      	movs	r3, #0
 800906a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800906e:	e082      	b.n	8009176 <UART_SetConfig+0x2e6>
 8009070:	2302      	movs	r3, #2
 8009072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009076:	e07e      	b.n	8009176 <UART_SetConfig+0x2e6>
 8009078:	2304      	movs	r3, #4
 800907a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800907e:	e07a      	b.n	8009176 <UART_SetConfig+0x2e6>
 8009080:	2308      	movs	r3, #8
 8009082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009086:	e076      	b.n	8009176 <UART_SetConfig+0x2e6>
 8009088:	2310      	movs	r3, #16
 800908a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800908e:	e072      	b.n	8009176 <UART_SetConfig+0x2e6>
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a35      	ldr	r2, [pc, #212]	; (800916c <UART_SetConfig+0x2dc>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d12a      	bne.n	80090f0 <UART_SetConfig+0x260>
 800909a:	4b30      	ldr	r3, [pc, #192]	; (800915c <UART_SetConfig+0x2cc>)
 800909c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80090a8:	d01a      	beq.n	80090e0 <UART_SetConfig+0x250>
 80090aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80090ae:	d81b      	bhi.n	80090e8 <UART_SetConfig+0x258>
 80090b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090b4:	d00c      	beq.n	80090d0 <UART_SetConfig+0x240>
 80090b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090ba:	d815      	bhi.n	80090e8 <UART_SetConfig+0x258>
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d003      	beq.n	80090c8 <UART_SetConfig+0x238>
 80090c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090c4:	d008      	beq.n	80090d8 <UART_SetConfig+0x248>
 80090c6:	e00f      	b.n	80090e8 <UART_SetConfig+0x258>
 80090c8:	2300      	movs	r3, #0
 80090ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090ce:	e052      	b.n	8009176 <UART_SetConfig+0x2e6>
 80090d0:	2302      	movs	r3, #2
 80090d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090d6:	e04e      	b.n	8009176 <UART_SetConfig+0x2e6>
 80090d8:	2304      	movs	r3, #4
 80090da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090de:	e04a      	b.n	8009176 <UART_SetConfig+0x2e6>
 80090e0:	2308      	movs	r3, #8
 80090e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090e6:	e046      	b.n	8009176 <UART_SetConfig+0x2e6>
 80090e8:	2310      	movs	r3, #16
 80090ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090ee:	e042      	b.n	8009176 <UART_SetConfig+0x2e6>
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a17      	ldr	r2, [pc, #92]	; (8009154 <UART_SetConfig+0x2c4>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d13a      	bne.n	8009170 <UART_SetConfig+0x2e0>
 80090fa:	4b18      	ldr	r3, [pc, #96]	; (800915c <UART_SetConfig+0x2cc>)
 80090fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009100:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009104:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009108:	d01a      	beq.n	8009140 <UART_SetConfig+0x2b0>
 800910a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800910e:	d81b      	bhi.n	8009148 <UART_SetConfig+0x2b8>
 8009110:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009114:	d00c      	beq.n	8009130 <UART_SetConfig+0x2a0>
 8009116:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800911a:	d815      	bhi.n	8009148 <UART_SetConfig+0x2b8>
 800911c:	2b00      	cmp	r3, #0
 800911e:	d003      	beq.n	8009128 <UART_SetConfig+0x298>
 8009120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009124:	d008      	beq.n	8009138 <UART_SetConfig+0x2a8>
 8009126:	e00f      	b.n	8009148 <UART_SetConfig+0x2b8>
 8009128:	2300      	movs	r3, #0
 800912a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800912e:	e022      	b.n	8009176 <UART_SetConfig+0x2e6>
 8009130:	2302      	movs	r3, #2
 8009132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009136:	e01e      	b.n	8009176 <UART_SetConfig+0x2e6>
 8009138:	2304      	movs	r3, #4
 800913a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800913e:	e01a      	b.n	8009176 <UART_SetConfig+0x2e6>
 8009140:	2308      	movs	r3, #8
 8009142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009146:	e016      	b.n	8009176 <UART_SetConfig+0x2e6>
 8009148:	2310      	movs	r3, #16
 800914a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800914e:	e012      	b.n	8009176 <UART_SetConfig+0x2e6>
 8009150:	efff69f3 	.word	0xefff69f3
 8009154:	40008000 	.word	0x40008000
 8009158:	40013800 	.word	0x40013800
 800915c:	40021000 	.word	0x40021000
 8009160:	40004400 	.word	0x40004400
 8009164:	40004800 	.word	0x40004800
 8009168:	40004c00 	.word	0x40004c00
 800916c:	40005000 	.word	0x40005000
 8009170:	2310      	movs	r3, #16
 8009172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a9f      	ldr	r2, [pc, #636]	; (80093f8 <UART_SetConfig+0x568>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d17a      	bne.n	8009276 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009180:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009184:	2b08      	cmp	r3, #8
 8009186:	d824      	bhi.n	80091d2 <UART_SetConfig+0x342>
 8009188:	a201      	add	r2, pc, #4	; (adr r2, 8009190 <UART_SetConfig+0x300>)
 800918a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800918e:	bf00      	nop
 8009190:	080091b5 	.word	0x080091b5
 8009194:	080091d3 	.word	0x080091d3
 8009198:	080091bd 	.word	0x080091bd
 800919c:	080091d3 	.word	0x080091d3
 80091a0:	080091c3 	.word	0x080091c3
 80091a4:	080091d3 	.word	0x080091d3
 80091a8:	080091d3 	.word	0x080091d3
 80091ac:	080091d3 	.word	0x080091d3
 80091b0:	080091cb 	.word	0x080091cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091b4:	f7fe fa2e 	bl	8007614 <HAL_RCC_GetPCLK1Freq>
 80091b8:	61f8      	str	r0, [r7, #28]
        break;
 80091ba:	e010      	b.n	80091de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80091bc:	4b8f      	ldr	r3, [pc, #572]	; (80093fc <UART_SetConfig+0x56c>)
 80091be:	61fb      	str	r3, [r7, #28]
        break;
 80091c0:	e00d      	b.n	80091de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091c2:	f7fe f98f 	bl	80074e4 <HAL_RCC_GetSysClockFreq>
 80091c6:	61f8      	str	r0, [r7, #28]
        break;
 80091c8:	e009      	b.n	80091de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091ce:	61fb      	str	r3, [r7, #28]
        break;
 80091d0:	e005      	b.n	80091de <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80091d2:	2300      	movs	r3, #0
 80091d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80091dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80091de:	69fb      	ldr	r3, [r7, #28]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	f000 80fb 	beq.w	80093dc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	685a      	ldr	r2, [r3, #4]
 80091ea:	4613      	mov	r3, r2
 80091ec:	005b      	lsls	r3, r3, #1
 80091ee:	4413      	add	r3, r2
 80091f0:	69fa      	ldr	r2, [r7, #28]
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d305      	bcc.n	8009202 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80091fc:	69fa      	ldr	r2, [r7, #28]
 80091fe:	429a      	cmp	r2, r3
 8009200:	d903      	bls.n	800920a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009208:	e0e8      	b.n	80093dc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800920a:	69fb      	ldr	r3, [r7, #28]
 800920c:	2200      	movs	r2, #0
 800920e:	461c      	mov	r4, r3
 8009210:	4615      	mov	r5, r2
 8009212:	f04f 0200 	mov.w	r2, #0
 8009216:	f04f 0300 	mov.w	r3, #0
 800921a:	022b      	lsls	r3, r5, #8
 800921c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009220:	0222      	lsls	r2, r4, #8
 8009222:	68f9      	ldr	r1, [r7, #12]
 8009224:	6849      	ldr	r1, [r1, #4]
 8009226:	0849      	lsrs	r1, r1, #1
 8009228:	2000      	movs	r0, #0
 800922a:	4688      	mov	r8, r1
 800922c:	4681      	mov	r9, r0
 800922e:	eb12 0a08 	adds.w	sl, r2, r8
 8009232:	eb43 0b09 	adc.w	fp, r3, r9
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	603b      	str	r3, [r7, #0]
 800923e:	607a      	str	r2, [r7, #4]
 8009240:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009244:	4650      	mov	r0, sl
 8009246:	4659      	mov	r1, fp
 8009248:	f7f7 fcfe 	bl	8000c48 <__aeabi_uldivmod>
 800924c:	4602      	mov	r2, r0
 800924e:	460b      	mov	r3, r1
 8009250:	4613      	mov	r3, r2
 8009252:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009254:	69bb      	ldr	r3, [r7, #24]
 8009256:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800925a:	d308      	bcc.n	800926e <UART_SetConfig+0x3de>
 800925c:	69bb      	ldr	r3, [r7, #24]
 800925e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009262:	d204      	bcs.n	800926e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	69ba      	ldr	r2, [r7, #24]
 800926a:	60da      	str	r2, [r3, #12]
 800926c:	e0b6      	b.n	80093dc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800926e:	2301      	movs	r3, #1
 8009270:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009274:	e0b2      	b.n	80093dc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	69db      	ldr	r3, [r3, #28]
 800927a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800927e:	d15e      	bne.n	800933e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8009280:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009284:	2b08      	cmp	r3, #8
 8009286:	d828      	bhi.n	80092da <UART_SetConfig+0x44a>
 8009288:	a201      	add	r2, pc, #4	; (adr r2, 8009290 <UART_SetConfig+0x400>)
 800928a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800928e:	bf00      	nop
 8009290:	080092b5 	.word	0x080092b5
 8009294:	080092bd 	.word	0x080092bd
 8009298:	080092c5 	.word	0x080092c5
 800929c:	080092db 	.word	0x080092db
 80092a0:	080092cb 	.word	0x080092cb
 80092a4:	080092db 	.word	0x080092db
 80092a8:	080092db 	.word	0x080092db
 80092ac:	080092db 	.word	0x080092db
 80092b0:	080092d3 	.word	0x080092d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092b4:	f7fe f9ae 	bl	8007614 <HAL_RCC_GetPCLK1Freq>
 80092b8:	61f8      	str	r0, [r7, #28]
        break;
 80092ba:	e014      	b.n	80092e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80092bc:	f7fe f9c0 	bl	8007640 <HAL_RCC_GetPCLK2Freq>
 80092c0:	61f8      	str	r0, [r7, #28]
        break;
 80092c2:	e010      	b.n	80092e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80092c4:	4b4d      	ldr	r3, [pc, #308]	; (80093fc <UART_SetConfig+0x56c>)
 80092c6:	61fb      	str	r3, [r7, #28]
        break;
 80092c8:	e00d      	b.n	80092e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80092ca:	f7fe f90b 	bl	80074e4 <HAL_RCC_GetSysClockFreq>
 80092ce:	61f8      	str	r0, [r7, #28]
        break;
 80092d0:	e009      	b.n	80092e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092d6:	61fb      	str	r3, [r7, #28]
        break;
 80092d8:	e005      	b.n	80092e6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80092da:	2300      	movs	r3, #0
 80092dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80092de:	2301      	movs	r3, #1
 80092e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80092e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d077      	beq.n	80093dc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	005a      	lsls	r2, r3, #1
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	085b      	lsrs	r3, r3, #1
 80092f6:	441a      	add	r2, r3
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009300:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009302:	69bb      	ldr	r3, [r7, #24]
 8009304:	2b0f      	cmp	r3, #15
 8009306:	d916      	bls.n	8009336 <UART_SetConfig+0x4a6>
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800930e:	d212      	bcs.n	8009336 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	b29b      	uxth	r3, r3
 8009314:	f023 030f 	bic.w	r3, r3, #15
 8009318:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800931a:	69bb      	ldr	r3, [r7, #24]
 800931c:	085b      	lsrs	r3, r3, #1
 800931e:	b29b      	uxth	r3, r3
 8009320:	f003 0307 	and.w	r3, r3, #7
 8009324:	b29a      	uxth	r2, r3
 8009326:	8afb      	ldrh	r3, [r7, #22]
 8009328:	4313      	orrs	r3, r2
 800932a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	8afa      	ldrh	r2, [r7, #22]
 8009332:	60da      	str	r2, [r3, #12]
 8009334:	e052      	b.n	80093dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009336:	2301      	movs	r3, #1
 8009338:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800933c:	e04e      	b.n	80093dc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800933e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009342:	2b08      	cmp	r3, #8
 8009344:	d827      	bhi.n	8009396 <UART_SetConfig+0x506>
 8009346:	a201      	add	r2, pc, #4	; (adr r2, 800934c <UART_SetConfig+0x4bc>)
 8009348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800934c:	08009371 	.word	0x08009371
 8009350:	08009379 	.word	0x08009379
 8009354:	08009381 	.word	0x08009381
 8009358:	08009397 	.word	0x08009397
 800935c:	08009387 	.word	0x08009387
 8009360:	08009397 	.word	0x08009397
 8009364:	08009397 	.word	0x08009397
 8009368:	08009397 	.word	0x08009397
 800936c:	0800938f 	.word	0x0800938f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009370:	f7fe f950 	bl	8007614 <HAL_RCC_GetPCLK1Freq>
 8009374:	61f8      	str	r0, [r7, #28]
        break;
 8009376:	e014      	b.n	80093a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009378:	f7fe f962 	bl	8007640 <HAL_RCC_GetPCLK2Freq>
 800937c:	61f8      	str	r0, [r7, #28]
        break;
 800937e:	e010      	b.n	80093a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009380:	4b1e      	ldr	r3, [pc, #120]	; (80093fc <UART_SetConfig+0x56c>)
 8009382:	61fb      	str	r3, [r7, #28]
        break;
 8009384:	e00d      	b.n	80093a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009386:	f7fe f8ad 	bl	80074e4 <HAL_RCC_GetSysClockFreq>
 800938a:	61f8      	str	r0, [r7, #28]
        break;
 800938c:	e009      	b.n	80093a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800938e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009392:	61fb      	str	r3, [r7, #28]
        break;
 8009394:	e005      	b.n	80093a2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8009396:	2300      	movs	r3, #0
 8009398:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80093a0:	bf00      	nop
    }

    if (pclk != 0U)
 80093a2:	69fb      	ldr	r3, [r7, #28]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d019      	beq.n	80093dc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	085a      	lsrs	r2, r3, #1
 80093ae:	69fb      	ldr	r3, [r7, #28]
 80093b0:	441a      	add	r2, r3
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80093ba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093bc:	69bb      	ldr	r3, [r7, #24]
 80093be:	2b0f      	cmp	r3, #15
 80093c0:	d909      	bls.n	80093d6 <UART_SetConfig+0x546>
 80093c2:	69bb      	ldr	r3, [r7, #24]
 80093c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093c8:	d205      	bcs.n	80093d6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80093ca:	69bb      	ldr	r3, [r7, #24]
 80093cc:	b29a      	uxth	r2, r3
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	60da      	str	r2, [r3, #12]
 80093d4:	e002      	b.n	80093dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80093d6:	2301      	movs	r3, #1
 80093d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2200      	movs	r2, #0
 80093e0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2200      	movs	r2, #0
 80093e6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80093e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3728      	adds	r7, #40	; 0x28
 80093f0:	46bd      	mov	sp, r7
 80093f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80093f6:	bf00      	nop
 80093f8:	40008000 	.word	0x40008000
 80093fc:	00f42400 	.word	0x00f42400

08009400 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800940c:	f003 0308 	and.w	r3, r3, #8
 8009410:	2b00      	cmp	r3, #0
 8009412:	d00a      	beq.n	800942a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	430a      	orrs	r2, r1
 8009428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800942e:	f003 0301 	and.w	r3, r3, #1
 8009432:	2b00      	cmp	r3, #0
 8009434:	d00a      	beq.n	800944c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	430a      	orrs	r2, r1
 800944a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009450:	f003 0302 	and.w	r3, r3, #2
 8009454:	2b00      	cmp	r3, #0
 8009456:	d00a      	beq.n	800946e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	430a      	orrs	r2, r1
 800946c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009472:	f003 0304 	and.w	r3, r3, #4
 8009476:	2b00      	cmp	r3, #0
 8009478:	d00a      	beq.n	8009490 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	430a      	orrs	r2, r1
 800948e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009494:	f003 0310 	and.w	r3, r3, #16
 8009498:	2b00      	cmp	r3, #0
 800949a:	d00a      	beq.n	80094b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	430a      	orrs	r2, r1
 80094b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b6:	f003 0320 	and.w	r3, r3, #32
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00a      	beq.n	80094d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	430a      	orrs	r2, r1
 80094d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d01a      	beq.n	8009516 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	430a      	orrs	r2, r1
 80094f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094fe:	d10a      	bne.n	8009516 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	430a      	orrs	r2, r1
 8009514:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800951a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800951e:	2b00      	cmp	r3, #0
 8009520:	d00a      	beq.n	8009538 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	430a      	orrs	r2, r1
 8009536:	605a      	str	r2, [r3, #4]
  }
}
 8009538:	bf00      	nop
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b098      	sub	sp, #96	; 0x60
 8009548:	af02      	add	r7, sp, #8
 800954a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009554:	f7f9 f9c8 	bl	80028e8 <HAL_GetTick>
 8009558:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f003 0308 	and.w	r3, r3, #8
 8009564:	2b08      	cmp	r3, #8
 8009566:	d12e      	bne.n	80095c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009568:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800956c:	9300      	str	r3, [sp, #0]
 800956e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009570:	2200      	movs	r2, #0
 8009572:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 f88c 	bl	8009694 <UART_WaitOnFlagUntilTimeout>
 800957c:	4603      	mov	r3, r0
 800957e:	2b00      	cmp	r3, #0
 8009580:	d021      	beq.n	80095c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800958a:	e853 3f00 	ldrex	r3, [r3]
 800958e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009592:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009596:	653b      	str	r3, [r7, #80]	; 0x50
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	461a      	mov	r2, r3
 800959e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095a0:	647b      	str	r3, [r7, #68]	; 0x44
 80095a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80095a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095a8:	e841 2300 	strex	r3, r2, [r1]
 80095ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80095ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d1e6      	bne.n	8009582 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2220      	movs	r2, #32
 80095b8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2200      	movs	r2, #0
 80095be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095c2:	2303      	movs	r3, #3
 80095c4:	e062      	b.n	800968c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f003 0304 	and.w	r3, r3, #4
 80095d0:	2b04      	cmp	r3, #4
 80095d2:	d149      	bne.n	8009668 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80095d8:	9300      	str	r3, [sp, #0]
 80095da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095dc:	2200      	movs	r2, #0
 80095de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 f856 	bl	8009694 <UART_WaitOnFlagUntilTimeout>
 80095e8:	4603      	mov	r3, r0
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d03c      	beq.n	8009668 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f6:	e853 3f00 	ldrex	r3, [r3]
 80095fa:	623b      	str	r3, [r7, #32]
   return(result);
 80095fc:	6a3b      	ldr	r3, [r7, #32]
 80095fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009602:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	461a      	mov	r2, r3
 800960a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800960c:	633b      	str	r3, [r7, #48]	; 0x30
 800960e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009610:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009614:	e841 2300 	strex	r3, r2, [r1]
 8009618:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800961a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961c:	2b00      	cmp	r3, #0
 800961e:	d1e6      	bne.n	80095ee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	3308      	adds	r3, #8
 8009626:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	e853 3f00 	ldrex	r3, [r3]
 800962e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f023 0301 	bic.w	r3, r3, #1
 8009636:	64bb      	str	r3, [r7, #72]	; 0x48
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	3308      	adds	r3, #8
 800963e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009640:	61fa      	str	r2, [r7, #28]
 8009642:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009644:	69b9      	ldr	r1, [r7, #24]
 8009646:	69fa      	ldr	r2, [r7, #28]
 8009648:	e841 2300 	strex	r3, r2, [r1]
 800964c:	617b      	str	r3, [r7, #20]
   return(result);
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d1e5      	bne.n	8009620 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2220      	movs	r2, #32
 8009658:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009664:	2303      	movs	r3, #3
 8009666:	e011      	b.n	800968c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2220      	movs	r2, #32
 800966c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2220      	movs	r2, #32
 8009672:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2200      	movs	r2, #0
 800967a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800968a:	2300      	movs	r3, #0
}
 800968c:	4618      	mov	r0, r3
 800968e:	3758      	adds	r7, #88	; 0x58
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	603b      	str	r3, [r7, #0]
 80096a0:	4613      	mov	r3, r2
 80096a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096a4:	e04f      	b.n	8009746 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ac:	d04b      	beq.n	8009746 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096ae:	f7f9 f91b 	bl	80028e8 <HAL_GetTick>
 80096b2:	4602      	mov	r2, r0
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	1ad3      	subs	r3, r2, r3
 80096b8:	69ba      	ldr	r2, [r7, #24]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d302      	bcc.n	80096c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80096be:	69bb      	ldr	r3, [r7, #24]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d101      	bne.n	80096c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80096c4:	2303      	movs	r3, #3
 80096c6:	e04e      	b.n	8009766 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f003 0304 	and.w	r3, r3, #4
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d037      	beq.n	8009746 <UART_WaitOnFlagUntilTimeout+0xb2>
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	2b80      	cmp	r3, #128	; 0x80
 80096da:	d034      	beq.n	8009746 <UART_WaitOnFlagUntilTimeout+0xb2>
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	2b40      	cmp	r3, #64	; 0x40
 80096e0:	d031      	beq.n	8009746 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	69db      	ldr	r3, [r3, #28]
 80096e8:	f003 0308 	and.w	r3, r3, #8
 80096ec:	2b08      	cmp	r3, #8
 80096ee:	d110      	bne.n	8009712 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	2208      	movs	r2, #8
 80096f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80096f8:	68f8      	ldr	r0, [r7, #12]
 80096fa:	f000 f838 	bl	800976e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2208      	movs	r2, #8
 8009702:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2200      	movs	r2, #0
 800970a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800970e:	2301      	movs	r3, #1
 8009710:	e029      	b.n	8009766 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	69db      	ldr	r3, [r3, #28]
 8009718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800971c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009720:	d111      	bne.n	8009746 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800972a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800972c:	68f8      	ldr	r0, [r7, #12]
 800972e:	f000 f81e 	bl	800976e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2220      	movs	r2, #32
 8009736:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2200      	movs	r2, #0
 800973e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009742:	2303      	movs	r3, #3
 8009744:	e00f      	b.n	8009766 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	69da      	ldr	r2, [r3, #28]
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	4013      	ands	r3, r2
 8009750:	68ba      	ldr	r2, [r7, #8]
 8009752:	429a      	cmp	r2, r3
 8009754:	bf0c      	ite	eq
 8009756:	2301      	moveq	r3, #1
 8009758:	2300      	movne	r3, #0
 800975a:	b2db      	uxtb	r3, r3
 800975c:	461a      	mov	r2, r3
 800975e:	79fb      	ldrb	r3, [r7, #7]
 8009760:	429a      	cmp	r2, r3
 8009762:	d0a0      	beq.n	80096a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009764:	2300      	movs	r3, #0
}
 8009766:	4618      	mov	r0, r3
 8009768:	3710      	adds	r7, #16
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}

0800976e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800976e:	b480      	push	{r7}
 8009770:	b095      	sub	sp, #84	; 0x54
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800977c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800977e:	e853 3f00 	ldrex	r3, [r3]
 8009782:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009786:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800978a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	461a      	mov	r2, r3
 8009792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009794:	643b      	str	r3, [r7, #64]	; 0x40
 8009796:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009798:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800979a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800979c:	e841 2300 	strex	r3, r2, [r1]
 80097a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80097a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d1e6      	bne.n	8009776 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	3308      	adds	r3, #8
 80097ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b0:	6a3b      	ldr	r3, [r7, #32]
 80097b2:	e853 3f00 	ldrex	r3, [r3]
 80097b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80097b8:	69fb      	ldr	r3, [r7, #28]
 80097ba:	f023 0301 	bic.w	r3, r3, #1
 80097be:	64bb      	str	r3, [r7, #72]	; 0x48
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	3308      	adds	r3, #8
 80097c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80097ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097d0:	e841 2300 	strex	r3, r2, [r1]
 80097d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d1e5      	bne.n	80097a8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d118      	bne.n	8009816 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	e853 3f00 	ldrex	r3, [r3]
 80097f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	f023 0310 	bic.w	r3, r3, #16
 80097f8:	647b      	str	r3, [r7, #68]	; 0x44
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	461a      	mov	r2, r3
 8009800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009802:	61bb      	str	r3, [r7, #24]
 8009804:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009806:	6979      	ldr	r1, [r7, #20]
 8009808:	69ba      	ldr	r2, [r7, #24]
 800980a:	e841 2300 	strex	r3, r2, [r1]
 800980e:	613b      	str	r3, [r7, #16]
   return(result);
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d1e6      	bne.n	80097e4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2220      	movs	r2, #32
 800981a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2200      	movs	r2, #0
 8009822:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	669a      	str	r2, [r3, #104]	; 0x68
}
 800982a:	bf00      	nop
 800982c:	3754      	adds	r7, #84	; 0x54
 800982e:	46bd      	mov	sp, r7
 8009830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009834:	4770      	bx	lr

08009836 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009836:	b580      	push	{r7, lr}
 8009838:	b084      	sub	sp, #16
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009842:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2200      	movs	r2, #0
 8009848:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2200      	movs	r2, #0
 8009850:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009854:	68f8      	ldr	r0, [r7, #12]
 8009856:	f7ff fb05 	bl	8008e64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800985a:	bf00      	nop
 800985c:	3710      	adds	r7, #16
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}

08009862 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b088      	sub	sp, #32
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	e853 3f00 	ldrex	r3, [r3]
 8009876:	60bb      	str	r3, [r7, #8]
   return(result);
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800987e:	61fb      	str	r3, [r7, #28]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	461a      	mov	r2, r3
 8009886:	69fb      	ldr	r3, [r7, #28]
 8009888:	61bb      	str	r3, [r7, #24]
 800988a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800988c:	6979      	ldr	r1, [r7, #20]
 800988e:	69ba      	ldr	r2, [r7, #24]
 8009890:	e841 2300 	strex	r3, r2, [r1]
 8009894:	613b      	str	r3, [r7, #16]
   return(result);
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d1e6      	bne.n	800986a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2220      	movs	r2, #32
 80098a0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f7ff fad1 	bl	8008e50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098ae:	bf00      	nop
 80098b0:	3720      	adds	r7, #32
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}

080098b6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80098b6:	b480      	push	{r7}
 80098b8:	b083      	sub	sp, #12
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80098be:	bf00      	nop
 80098c0:	370c      	adds	r7, #12
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr
	...

080098cc <sniprintf>:
 80098cc:	b40c      	push	{r2, r3}
 80098ce:	b530      	push	{r4, r5, lr}
 80098d0:	4b17      	ldr	r3, [pc, #92]	; (8009930 <sniprintf+0x64>)
 80098d2:	1e0c      	subs	r4, r1, #0
 80098d4:	681d      	ldr	r5, [r3, #0]
 80098d6:	b09d      	sub	sp, #116	; 0x74
 80098d8:	da08      	bge.n	80098ec <sniprintf+0x20>
 80098da:	238b      	movs	r3, #139	; 0x8b
 80098dc:	602b      	str	r3, [r5, #0]
 80098de:	f04f 30ff 	mov.w	r0, #4294967295
 80098e2:	b01d      	add	sp, #116	; 0x74
 80098e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098e8:	b002      	add	sp, #8
 80098ea:	4770      	bx	lr
 80098ec:	f44f 7302 	mov.w	r3, #520	; 0x208
 80098f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80098f4:	bf14      	ite	ne
 80098f6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80098fa:	4623      	moveq	r3, r4
 80098fc:	9304      	str	r3, [sp, #16]
 80098fe:	9307      	str	r3, [sp, #28]
 8009900:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009904:	9002      	str	r0, [sp, #8]
 8009906:	9006      	str	r0, [sp, #24]
 8009908:	f8ad 3016 	strh.w	r3, [sp, #22]
 800990c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800990e:	ab21      	add	r3, sp, #132	; 0x84
 8009910:	a902      	add	r1, sp, #8
 8009912:	4628      	mov	r0, r5
 8009914:	9301      	str	r3, [sp, #4]
 8009916:	f000 f9a1 	bl	8009c5c <_svfiprintf_r>
 800991a:	1c43      	adds	r3, r0, #1
 800991c:	bfbc      	itt	lt
 800991e:	238b      	movlt	r3, #139	; 0x8b
 8009920:	602b      	strlt	r3, [r5, #0]
 8009922:	2c00      	cmp	r4, #0
 8009924:	d0dd      	beq.n	80098e2 <sniprintf+0x16>
 8009926:	9b02      	ldr	r3, [sp, #8]
 8009928:	2200      	movs	r2, #0
 800992a:	701a      	strb	r2, [r3, #0]
 800992c:	e7d9      	b.n	80098e2 <sniprintf+0x16>
 800992e:	bf00      	nop
 8009930:	20000238 	.word	0x20000238

08009934 <memset>:
 8009934:	4402      	add	r2, r0
 8009936:	4603      	mov	r3, r0
 8009938:	4293      	cmp	r3, r2
 800993a:	d100      	bne.n	800993e <memset+0xa>
 800993c:	4770      	bx	lr
 800993e:	f803 1b01 	strb.w	r1, [r3], #1
 8009942:	e7f9      	b.n	8009938 <memset+0x4>

08009944 <__errno>:
 8009944:	4b01      	ldr	r3, [pc, #4]	; (800994c <__errno+0x8>)
 8009946:	6818      	ldr	r0, [r3, #0]
 8009948:	4770      	bx	lr
 800994a:	bf00      	nop
 800994c:	20000238 	.word	0x20000238

08009950 <__libc_init_array>:
 8009950:	b570      	push	{r4, r5, r6, lr}
 8009952:	4d0d      	ldr	r5, [pc, #52]	; (8009988 <__libc_init_array+0x38>)
 8009954:	4c0d      	ldr	r4, [pc, #52]	; (800998c <__libc_init_array+0x3c>)
 8009956:	1b64      	subs	r4, r4, r5
 8009958:	10a4      	asrs	r4, r4, #2
 800995a:	2600      	movs	r6, #0
 800995c:	42a6      	cmp	r6, r4
 800995e:	d109      	bne.n	8009974 <__libc_init_array+0x24>
 8009960:	4d0b      	ldr	r5, [pc, #44]	; (8009990 <__libc_init_array+0x40>)
 8009962:	4c0c      	ldr	r4, [pc, #48]	; (8009994 <__libc_init_array+0x44>)
 8009964:	f001 fbdc 	bl	800b120 <_init>
 8009968:	1b64      	subs	r4, r4, r5
 800996a:	10a4      	asrs	r4, r4, #2
 800996c:	2600      	movs	r6, #0
 800996e:	42a6      	cmp	r6, r4
 8009970:	d105      	bne.n	800997e <__libc_init_array+0x2e>
 8009972:	bd70      	pop	{r4, r5, r6, pc}
 8009974:	f855 3b04 	ldr.w	r3, [r5], #4
 8009978:	4798      	blx	r3
 800997a:	3601      	adds	r6, #1
 800997c:	e7ee      	b.n	800995c <__libc_init_array+0xc>
 800997e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009982:	4798      	blx	r3
 8009984:	3601      	adds	r6, #1
 8009986:	e7f2      	b.n	800996e <__libc_init_array+0x1e>
 8009988:	0800b278 	.word	0x0800b278
 800998c:	0800b278 	.word	0x0800b278
 8009990:	0800b278 	.word	0x0800b278
 8009994:	0800b27c 	.word	0x0800b27c

08009998 <__retarget_lock_acquire_recursive>:
 8009998:	4770      	bx	lr

0800999a <__retarget_lock_release_recursive>:
 800999a:	4770      	bx	lr

0800999c <memcpy>:
 800999c:	440a      	add	r2, r1
 800999e:	4291      	cmp	r1, r2
 80099a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80099a4:	d100      	bne.n	80099a8 <memcpy+0xc>
 80099a6:	4770      	bx	lr
 80099a8:	b510      	push	{r4, lr}
 80099aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099b2:	4291      	cmp	r1, r2
 80099b4:	d1f9      	bne.n	80099aa <memcpy+0xe>
 80099b6:	bd10      	pop	{r4, pc}

080099b8 <_free_r>:
 80099b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099ba:	2900      	cmp	r1, #0
 80099bc:	d044      	beq.n	8009a48 <_free_r+0x90>
 80099be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099c2:	9001      	str	r0, [sp, #4]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	f1a1 0404 	sub.w	r4, r1, #4
 80099ca:	bfb8      	it	lt
 80099cc:	18e4      	addlt	r4, r4, r3
 80099ce:	f000 f8df 	bl	8009b90 <__malloc_lock>
 80099d2:	4a1e      	ldr	r2, [pc, #120]	; (8009a4c <_free_r+0x94>)
 80099d4:	9801      	ldr	r0, [sp, #4]
 80099d6:	6813      	ldr	r3, [r2, #0]
 80099d8:	b933      	cbnz	r3, 80099e8 <_free_r+0x30>
 80099da:	6063      	str	r3, [r4, #4]
 80099dc:	6014      	str	r4, [r2, #0]
 80099de:	b003      	add	sp, #12
 80099e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80099e4:	f000 b8da 	b.w	8009b9c <__malloc_unlock>
 80099e8:	42a3      	cmp	r3, r4
 80099ea:	d908      	bls.n	80099fe <_free_r+0x46>
 80099ec:	6825      	ldr	r5, [r4, #0]
 80099ee:	1961      	adds	r1, r4, r5
 80099f0:	428b      	cmp	r3, r1
 80099f2:	bf01      	itttt	eq
 80099f4:	6819      	ldreq	r1, [r3, #0]
 80099f6:	685b      	ldreq	r3, [r3, #4]
 80099f8:	1949      	addeq	r1, r1, r5
 80099fa:	6021      	streq	r1, [r4, #0]
 80099fc:	e7ed      	b.n	80099da <_free_r+0x22>
 80099fe:	461a      	mov	r2, r3
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	b10b      	cbz	r3, 8009a08 <_free_r+0x50>
 8009a04:	42a3      	cmp	r3, r4
 8009a06:	d9fa      	bls.n	80099fe <_free_r+0x46>
 8009a08:	6811      	ldr	r1, [r2, #0]
 8009a0a:	1855      	adds	r5, r2, r1
 8009a0c:	42a5      	cmp	r5, r4
 8009a0e:	d10b      	bne.n	8009a28 <_free_r+0x70>
 8009a10:	6824      	ldr	r4, [r4, #0]
 8009a12:	4421      	add	r1, r4
 8009a14:	1854      	adds	r4, r2, r1
 8009a16:	42a3      	cmp	r3, r4
 8009a18:	6011      	str	r1, [r2, #0]
 8009a1a:	d1e0      	bne.n	80099de <_free_r+0x26>
 8009a1c:	681c      	ldr	r4, [r3, #0]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	6053      	str	r3, [r2, #4]
 8009a22:	440c      	add	r4, r1
 8009a24:	6014      	str	r4, [r2, #0]
 8009a26:	e7da      	b.n	80099de <_free_r+0x26>
 8009a28:	d902      	bls.n	8009a30 <_free_r+0x78>
 8009a2a:	230c      	movs	r3, #12
 8009a2c:	6003      	str	r3, [r0, #0]
 8009a2e:	e7d6      	b.n	80099de <_free_r+0x26>
 8009a30:	6825      	ldr	r5, [r4, #0]
 8009a32:	1961      	adds	r1, r4, r5
 8009a34:	428b      	cmp	r3, r1
 8009a36:	bf04      	itt	eq
 8009a38:	6819      	ldreq	r1, [r3, #0]
 8009a3a:	685b      	ldreq	r3, [r3, #4]
 8009a3c:	6063      	str	r3, [r4, #4]
 8009a3e:	bf04      	itt	eq
 8009a40:	1949      	addeq	r1, r1, r5
 8009a42:	6021      	streq	r1, [r4, #0]
 8009a44:	6054      	str	r4, [r2, #4]
 8009a46:	e7ca      	b.n	80099de <_free_r+0x26>
 8009a48:	b003      	add	sp, #12
 8009a4a:	bd30      	pop	{r4, r5, pc}
 8009a4c:	20000904 	.word	0x20000904

08009a50 <sbrk_aligned>:
 8009a50:	b570      	push	{r4, r5, r6, lr}
 8009a52:	4e0e      	ldr	r6, [pc, #56]	; (8009a8c <sbrk_aligned+0x3c>)
 8009a54:	460c      	mov	r4, r1
 8009a56:	6831      	ldr	r1, [r6, #0]
 8009a58:	4605      	mov	r5, r0
 8009a5a:	b911      	cbnz	r1, 8009a62 <sbrk_aligned+0x12>
 8009a5c:	f000 fba6 	bl	800a1ac <_sbrk_r>
 8009a60:	6030      	str	r0, [r6, #0]
 8009a62:	4621      	mov	r1, r4
 8009a64:	4628      	mov	r0, r5
 8009a66:	f000 fba1 	bl	800a1ac <_sbrk_r>
 8009a6a:	1c43      	adds	r3, r0, #1
 8009a6c:	d00a      	beq.n	8009a84 <sbrk_aligned+0x34>
 8009a6e:	1cc4      	adds	r4, r0, #3
 8009a70:	f024 0403 	bic.w	r4, r4, #3
 8009a74:	42a0      	cmp	r0, r4
 8009a76:	d007      	beq.n	8009a88 <sbrk_aligned+0x38>
 8009a78:	1a21      	subs	r1, r4, r0
 8009a7a:	4628      	mov	r0, r5
 8009a7c:	f000 fb96 	bl	800a1ac <_sbrk_r>
 8009a80:	3001      	adds	r0, #1
 8009a82:	d101      	bne.n	8009a88 <sbrk_aligned+0x38>
 8009a84:	f04f 34ff 	mov.w	r4, #4294967295
 8009a88:	4620      	mov	r0, r4
 8009a8a:	bd70      	pop	{r4, r5, r6, pc}
 8009a8c:	20000908 	.word	0x20000908

08009a90 <_malloc_r>:
 8009a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a94:	1ccd      	adds	r5, r1, #3
 8009a96:	f025 0503 	bic.w	r5, r5, #3
 8009a9a:	3508      	adds	r5, #8
 8009a9c:	2d0c      	cmp	r5, #12
 8009a9e:	bf38      	it	cc
 8009aa0:	250c      	movcc	r5, #12
 8009aa2:	2d00      	cmp	r5, #0
 8009aa4:	4607      	mov	r7, r0
 8009aa6:	db01      	blt.n	8009aac <_malloc_r+0x1c>
 8009aa8:	42a9      	cmp	r1, r5
 8009aaa:	d905      	bls.n	8009ab8 <_malloc_r+0x28>
 8009aac:	230c      	movs	r3, #12
 8009aae:	603b      	str	r3, [r7, #0]
 8009ab0:	2600      	movs	r6, #0
 8009ab2:	4630      	mov	r0, r6
 8009ab4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ab8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009b8c <_malloc_r+0xfc>
 8009abc:	f000 f868 	bl	8009b90 <__malloc_lock>
 8009ac0:	f8d8 3000 	ldr.w	r3, [r8]
 8009ac4:	461c      	mov	r4, r3
 8009ac6:	bb5c      	cbnz	r4, 8009b20 <_malloc_r+0x90>
 8009ac8:	4629      	mov	r1, r5
 8009aca:	4638      	mov	r0, r7
 8009acc:	f7ff ffc0 	bl	8009a50 <sbrk_aligned>
 8009ad0:	1c43      	adds	r3, r0, #1
 8009ad2:	4604      	mov	r4, r0
 8009ad4:	d155      	bne.n	8009b82 <_malloc_r+0xf2>
 8009ad6:	f8d8 4000 	ldr.w	r4, [r8]
 8009ada:	4626      	mov	r6, r4
 8009adc:	2e00      	cmp	r6, #0
 8009ade:	d145      	bne.n	8009b6c <_malloc_r+0xdc>
 8009ae0:	2c00      	cmp	r4, #0
 8009ae2:	d048      	beq.n	8009b76 <_malloc_r+0xe6>
 8009ae4:	6823      	ldr	r3, [r4, #0]
 8009ae6:	4631      	mov	r1, r6
 8009ae8:	4638      	mov	r0, r7
 8009aea:	eb04 0903 	add.w	r9, r4, r3
 8009aee:	f000 fb5d 	bl	800a1ac <_sbrk_r>
 8009af2:	4581      	cmp	r9, r0
 8009af4:	d13f      	bne.n	8009b76 <_malloc_r+0xe6>
 8009af6:	6821      	ldr	r1, [r4, #0]
 8009af8:	1a6d      	subs	r5, r5, r1
 8009afa:	4629      	mov	r1, r5
 8009afc:	4638      	mov	r0, r7
 8009afe:	f7ff ffa7 	bl	8009a50 <sbrk_aligned>
 8009b02:	3001      	adds	r0, #1
 8009b04:	d037      	beq.n	8009b76 <_malloc_r+0xe6>
 8009b06:	6823      	ldr	r3, [r4, #0]
 8009b08:	442b      	add	r3, r5
 8009b0a:	6023      	str	r3, [r4, #0]
 8009b0c:	f8d8 3000 	ldr.w	r3, [r8]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d038      	beq.n	8009b86 <_malloc_r+0xf6>
 8009b14:	685a      	ldr	r2, [r3, #4]
 8009b16:	42a2      	cmp	r2, r4
 8009b18:	d12b      	bne.n	8009b72 <_malloc_r+0xe2>
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	605a      	str	r2, [r3, #4]
 8009b1e:	e00f      	b.n	8009b40 <_malloc_r+0xb0>
 8009b20:	6822      	ldr	r2, [r4, #0]
 8009b22:	1b52      	subs	r2, r2, r5
 8009b24:	d41f      	bmi.n	8009b66 <_malloc_r+0xd6>
 8009b26:	2a0b      	cmp	r2, #11
 8009b28:	d917      	bls.n	8009b5a <_malloc_r+0xca>
 8009b2a:	1961      	adds	r1, r4, r5
 8009b2c:	42a3      	cmp	r3, r4
 8009b2e:	6025      	str	r5, [r4, #0]
 8009b30:	bf18      	it	ne
 8009b32:	6059      	strne	r1, [r3, #4]
 8009b34:	6863      	ldr	r3, [r4, #4]
 8009b36:	bf08      	it	eq
 8009b38:	f8c8 1000 	streq.w	r1, [r8]
 8009b3c:	5162      	str	r2, [r4, r5]
 8009b3e:	604b      	str	r3, [r1, #4]
 8009b40:	4638      	mov	r0, r7
 8009b42:	f104 060b 	add.w	r6, r4, #11
 8009b46:	f000 f829 	bl	8009b9c <__malloc_unlock>
 8009b4a:	f026 0607 	bic.w	r6, r6, #7
 8009b4e:	1d23      	adds	r3, r4, #4
 8009b50:	1af2      	subs	r2, r6, r3
 8009b52:	d0ae      	beq.n	8009ab2 <_malloc_r+0x22>
 8009b54:	1b9b      	subs	r3, r3, r6
 8009b56:	50a3      	str	r3, [r4, r2]
 8009b58:	e7ab      	b.n	8009ab2 <_malloc_r+0x22>
 8009b5a:	42a3      	cmp	r3, r4
 8009b5c:	6862      	ldr	r2, [r4, #4]
 8009b5e:	d1dd      	bne.n	8009b1c <_malloc_r+0x8c>
 8009b60:	f8c8 2000 	str.w	r2, [r8]
 8009b64:	e7ec      	b.n	8009b40 <_malloc_r+0xb0>
 8009b66:	4623      	mov	r3, r4
 8009b68:	6864      	ldr	r4, [r4, #4]
 8009b6a:	e7ac      	b.n	8009ac6 <_malloc_r+0x36>
 8009b6c:	4634      	mov	r4, r6
 8009b6e:	6876      	ldr	r6, [r6, #4]
 8009b70:	e7b4      	b.n	8009adc <_malloc_r+0x4c>
 8009b72:	4613      	mov	r3, r2
 8009b74:	e7cc      	b.n	8009b10 <_malloc_r+0x80>
 8009b76:	230c      	movs	r3, #12
 8009b78:	603b      	str	r3, [r7, #0]
 8009b7a:	4638      	mov	r0, r7
 8009b7c:	f000 f80e 	bl	8009b9c <__malloc_unlock>
 8009b80:	e797      	b.n	8009ab2 <_malloc_r+0x22>
 8009b82:	6025      	str	r5, [r4, #0]
 8009b84:	e7dc      	b.n	8009b40 <_malloc_r+0xb0>
 8009b86:	605b      	str	r3, [r3, #4]
 8009b88:	deff      	udf	#255	; 0xff
 8009b8a:	bf00      	nop
 8009b8c:	20000904 	.word	0x20000904

08009b90 <__malloc_lock>:
 8009b90:	4801      	ldr	r0, [pc, #4]	; (8009b98 <__malloc_lock+0x8>)
 8009b92:	f7ff bf01 	b.w	8009998 <__retarget_lock_acquire_recursive>
 8009b96:	bf00      	nop
 8009b98:	20000900 	.word	0x20000900

08009b9c <__malloc_unlock>:
 8009b9c:	4801      	ldr	r0, [pc, #4]	; (8009ba4 <__malloc_unlock+0x8>)
 8009b9e:	f7ff befc 	b.w	800999a <__retarget_lock_release_recursive>
 8009ba2:	bf00      	nop
 8009ba4:	20000900 	.word	0x20000900

08009ba8 <__ssputs_r>:
 8009ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bac:	688e      	ldr	r6, [r1, #8]
 8009bae:	461f      	mov	r7, r3
 8009bb0:	42be      	cmp	r6, r7
 8009bb2:	680b      	ldr	r3, [r1, #0]
 8009bb4:	4682      	mov	sl, r0
 8009bb6:	460c      	mov	r4, r1
 8009bb8:	4690      	mov	r8, r2
 8009bba:	d82c      	bhi.n	8009c16 <__ssputs_r+0x6e>
 8009bbc:	898a      	ldrh	r2, [r1, #12]
 8009bbe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009bc2:	d026      	beq.n	8009c12 <__ssputs_r+0x6a>
 8009bc4:	6965      	ldr	r5, [r4, #20]
 8009bc6:	6909      	ldr	r1, [r1, #16]
 8009bc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009bcc:	eba3 0901 	sub.w	r9, r3, r1
 8009bd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009bd4:	1c7b      	adds	r3, r7, #1
 8009bd6:	444b      	add	r3, r9
 8009bd8:	106d      	asrs	r5, r5, #1
 8009bda:	429d      	cmp	r5, r3
 8009bdc:	bf38      	it	cc
 8009bde:	461d      	movcc	r5, r3
 8009be0:	0553      	lsls	r3, r2, #21
 8009be2:	d527      	bpl.n	8009c34 <__ssputs_r+0x8c>
 8009be4:	4629      	mov	r1, r5
 8009be6:	f7ff ff53 	bl	8009a90 <_malloc_r>
 8009bea:	4606      	mov	r6, r0
 8009bec:	b360      	cbz	r0, 8009c48 <__ssputs_r+0xa0>
 8009bee:	6921      	ldr	r1, [r4, #16]
 8009bf0:	464a      	mov	r2, r9
 8009bf2:	f7ff fed3 	bl	800999c <memcpy>
 8009bf6:	89a3      	ldrh	r3, [r4, #12]
 8009bf8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c00:	81a3      	strh	r3, [r4, #12]
 8009c02:	6126      	str	r6, [r4, #16]
 8009c04:	6165      	str	r5, [r4, #20]
 8009c06:	444e      	add	r6, r9
 8009c08:	eba5 0509 	sub.w	r5, r5, r9
 8009c0c:	6026      	str	r6, [r4, #0]
 8009c0e:	60a5      	str	r5, [r4, #8]
 8009c10:	463e      	mov	r6, r7
 8009c12:	42be      	cmp	r6, r7
 8009c14:	d900      	bls.n	8009c18 <__ssputs_r+0x70>
 8009c16:	463e      	mov	r6, r7
 8009c18:	6820      	ldr	r0, [r4, #0]
 8009c1a:	4632      	mov	r2, r6
 8009c1c:	4641      	mov	r1, r8
 8009c1e:	f000 faab 	bl	800a178 <memmove>
 8009c22:	68a3      	ldr	r3, [r4, #8]
 8009c24:	1b9b      	subs	r3, r3, r6
 8009c26:	60a3      	str	r3, [r4, #8]
 8009c28:	6823      	ldr	r3, [r4, #0]
 8009c2a:	4433      	add	r3, r6
 8009c2c:	6023      	str	r3, [r4, #0]
 8009c2e:	2000      	movs	r0, #0
 8009c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c34:	462a      	mov	r2, r5
 8009c36:	f000 fac9 	bl	800a1cc <_realloc_r>
 8009c3a:	4606      	mov	r6, r0
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	d1e0      	bne.n	8009c02 <__ssputs_r+0x5a>
 8009c40:	6921      	ldr	r1, [r4, #16]
 8009c42:	4650      	mov	r0, sl
 8009c44:	f7ff feb8 	bl	80099b8 <_free_r>
 8009c48:	230c      	movs	r3, #12
 8009c4a:	f8ca 3000 	str.w	r3, [sl]
 8009c4e:	89a3      	ldrh	r3, [r4, #12]
 8009c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c54:	81a3      	strh	r3, [r4, #12]
 8009c56:	f04f 30ff 	mov.w	r0, #4294967295
 8009c5a:	e7e9      	b.n	8009c30 <__ssputs_r+0x88>

08009c5c <_svfiprintf_r>:
 8009c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c60:	4698      	mov	r8, r3
 8009c62:	898b      	ldrh	r3, [r1, #12]
 8009c64:	061b      	lsls	r3, r3, #24
 8009c66:	b09d      	sub	sp, #116	; 0x74
 8009c68:	4607      	mov	r7, r0
 8009c6a:	460d      	mov	r5, r1
 8009c6c:	4614      	mov	r4, r2
 8009c6e:	d50e      	bpl.n	8009c8e <_svfiprintf_r+0x32>
 8009c70:	690b      	ldr	r3, [r1, #16]
 8009c72:	b963      	cbnz	r3, 8009c8e <_svfiprintf_r+0x32>
 8009c74:	2140      	movs	r1, #64	; 0x40
 8009c76:	f7ff ff0b 	bl	8009a90 <_malloc_r>
 8009c7a:	6028      	str	r0, [r5, #0]
 8009c7c:	6128      	str	r0, [r5, #16]
 8009c7e:	b920      	cbnz	r0, 8009c8a <_svfiprintf_r+0x2e>
 8009c80:	230c      	movs	r3, #12
 8009c82:	603b      	str	r3, [r7, #0]
 8009c84:	f04f 30ff 	mov.w	r0, #4294967295
 8009c88:	e0d0      	b.n	8009e2c <_svfiprintf_r+0x1d0>
 8009c8a:	2340      	movs	r3, #64	; 0x40
 8009c8c:	616b      	str	r3, [r5, #20]
 8009c8e:	2300      	movs	r3, #0
 8009c90:	9309      	str	r3, [sp, #36]	; 0x24
 8009c92:	2320      	movs	r3, #32
 8009c94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c98:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c9c:	2330      	movs	r3, #48	; 0x30
 8009c9e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009e44 <_svfiprintf_r+0x1e8>
 8009ca2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ca6:	f04f 0901 	mov.w	r9, #1
 8009caa:	4623      	mov	r3, r4
 8009cac:	469a      	mov	sl, r3
 8009cae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cb2:	b10a      	cbz	r2, 8009cb8 <_svfiprintf_r+0x5c>
 8009cb4:	2a25      	cmp	r2, #37	; 0x25
 8009cb6:	d1f9      	bne.n	8009cac <_svfiprintf_r+0x50>
 8009cb8:	ebba 0b04 	subs.w	fp, sl, r4
 8009cbc:	d00b      	beq.n	8009cd6 <_svfiprintf_r+0x7a>
 8009cbe:	465b      	mov	r3, fp
 8009cc0:	4622      	mov	r2, r4
 8009cc2:	4629      	mov	r1, r5
 8009cc4:	4638      	mov	r0, r7
 8009cc6:	f7ff ff6f 	bl	8009ba8 <__ssputs_r>
 8009cca:	3001      	adds	r0, #1
 8009ccc:	f000 80a9 	beq.w	8009e22 <_svfiprintf_r+0x1c6>
 8009cd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cd2:	445a      	add	r2, fp
 8009cd4:	9209      	str	r2, [sp, #36]	; 0x24
 8009cd6:	f89a 3000 	ldrb.w	r3, [sl]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	f000 80a1 	beq.w	8009e22 <_svfiprintf_r+0x1c6>
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ce6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cea:	f10a 0a01 	add.w	sl, sl, #1
 8009cee:	9304      	str	r3, [sp, #16]
 8009cf0:	9307      	str	r3, [sp, #28]
 8009cf2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009cf6:	931a      	str	r3, [sp, #104]	; 0x68
 8009cf8:	4654      	mov	r4, sl
 8009cfa:	2205      	movs	r2, #5
 8009cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d00:	4850      	ldr	r0, [pc, #320]	; (8009e44 <_svfiprintf_r+0x1e8>)
 8009d02:	f7f6 fa6d 	bl	80001e0 <memchr>
 8009d06:	9a04      	ldr	r2, [sp, #16]
 8009d08:	b9d8      	cbnz	r0, 8009d42 <_svfiprintf_r+0xe6>
 8009d0a:	06d0      	lsls	r0, r2, #27
 8009d0c:	bf44      	itt	mi
 8009d0e:	2320      	movmi	r3, #32
 8009d10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d14:	0711      	lsls	r1, r2, #28
 8009d16:	bf44      	itt	mi
 8009d18:	232b      	movmi	r3, #43	; 0x2b
 8009d1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d1e:	f89a 3000 	ldrb.w	r3, [sl]
 8009d22:	2b2a      	cmp	r3, #42	; 0x2a
 8009d24:	d015      	beq.n	8009d52 <_svfiprintf_r+0xf6>
 8009d26:	9a07      	ldr	r2, [sp, #28]
 8009d28:	4654      	mov	r4, sl
 8009d2a:	2000      	movs	r0, #0
 8009d2c:	f04f 0c0a 	mov.w	ip, #10
 8009d30:	4621      	mov	r1, r4
 8009d32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d36:	3b30      	subs	r3, #48	; 0x30
 8009d38:	2b09      	cmp	r3, #9
 8009d3a:	d94d      	bls.n	8009dd8 <_svfiprintf_r+0x17c>
 8009d3c:	b1b0      	cbz	r0, 8009d6c <_svfiprintf_r+0x110>
 8009d3e:	9207      	str	r2, [sp, #28]
 8009d40:	e014      	b.n	8009d6c <_svfiprintf_r+0x110>
 8009d42:	eba0 0308 	sub.w	r3, r0, r8
 8009d46:	fa09 f303 	lsl.w	r3, r9, r3
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	9304      	str	r3, [sp, #16]
 8009d4e:	46a2      	mov	sl, r4
 8009d50:	e7d2      	b.n	8009cf8 <_svfiprintf_r+0x9c>
 8009d52:	9b03      	ldr	r3, [sp, #12]
 8009d54:	1d19      	adds	r1, r3, #4
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	9103      	str	r1, [sp, #12]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	bfbb      	ittet	lt
 8009d5e:	425b      	neglt	r3, r3
 8009d60:	f042 0202 	orrlt.w	r2, r2, #2
 8009d64:	9307      	strge	r3, [sp, #28]
 8009d66:	9307      	strlt	r3, [sp, #28]
 8009d68:	bfb8      	it	lt
 8009d6a:	9204      	strlt	r2, [sp, #16]
 8009d6c:	7823      	ldrb	r3, [r4, #0]
 8009d6e:	2b2e      	cmp	r3, #46	; 0x2e
 8009d70:	d10c      	bne.n	8009d8c <_svfiprintf_r+0x130>
 8009d72:	7863      	ldrb	r3, [r4, #1]
 8009d74:	2b2a      	cmp	r3, #42	; 0x2a
 8009d76:	d134      	bne.n	8009de2 <_svfiprintf_r+0x186>
 8009d78:	9b03      	ldr	r3, [sp, #12]
 8009d7a:	1d1a      	adds	r2, r3, #4
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	9203      	str	r2, [sp, #12]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	bfb8      	it	lt
 8009d84:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d88:	3402      	adds	r4, #2
 8009d8a:	9305      	str	r3, [sp, #20]
 8009d8c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009e54 <_svfiprintf_r+0x1f8>
 8009d90:	7821      	ldrb	r1, [r4, #0]
 8009d92:	2203      	movs	r2, #3
 8009d94:	4650      	mov	r0, sl
 8009d96:	f7f6 fa23 	bl	80001e0 <memchr>
 8009d9a:	b138      	cbz	r0, 8009dac <_svfiprintf_r+0x150>
 8009d9c:	9b04      	ldr	r3, [sp, #16]
 8009d9e:	eba0 000a 	sub.w	r0, r0, sl
 8009da2:	2240      	movs	r2, #64	; 0x40
 8009da4:	4082      	lsls	r2, r0
 8009da6:	4313      	orrs	r3, r2
 8009da8:	3401      	adds	r4, #1
 8009daa:	9304      	str	r3, [sp, #16]
 8009dac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009db0:	4825      	ldr	r0, [pc, #148]	; (8009e48 <_svfiprintf_r+0x1ec>)
 8009db2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009db6:	2206      	movs	r2, #6
 8009db8:	f7f6 fa12 	bl	80001e0 <memchr>
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	d038      	beq.n	8009e32 <_svfiprintf_r+0x1d6>
 8009dc0:	4b22      	ldr	r3, [pc, #136]	; (8009e4c <_svfiprintf_r+0x1f0>)
 8009dc2:	bb1b      	cbnz	r3, 8009e0c <_svfiprintf_r+0x1b0>
 8009dc4:	9b03      	ldr	r3, [sp, #12]
 8009dc6:	3307      	adds	r3, #7
 8009dc8:	f023 0307 	bic.w	r3, r3, #7
 8009dcc:	3308      	adds	r3, #8
 8009dce:	9303      	str	r3, [sp, #12]
 8009dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dd2:	4433      	add	r3, r6
 8009dd4:	9309      	str	r3, [sp, #36]	; 0x24
 8009dd6:	e768      	b.n	8009caa <_svfiprintf_r+0x4e>
 8009dd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ddc:	460c      	mov	r4, r1
 8009dde:	2001      	movs	r0, #1
 8009de0:	e7a6      	b.n	8009d30 <_svfiprintf_r+0xd4>
 8009de2:	2300      	movs	r3, #0
 8009de4:	3401      	adds	r4, #1
 8009de6:	9305      	str	r3, [sp, #20]
 8009de8:	4619      	mov	r1, r3
 8009dea:	f04f 0c0a 	mov.w	ip, #10
 8009dee:	4620      	mov	r0, r4
 8009df0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009df4:	3a30      	subs	r2, #48	; 0x30
 8009df6:	2a09      	cmp	r2, #9
 8009df8:	d903      	bls.n	8009e02 <_svfiprintf_r+0x1a6>
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d0c6      	beq.n	8009d8c <_svfiprintf_r+0x130>
 8009dfe:	9105      	str	r1, [sp, #20]
 8009e00:	e7c4      	b.n	8009d8c <_svfiprintf_r+0x130>
 8009e02:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e06:	4604      	mov	r4, r0
 8009e08:	2301      	movs	r3, #1
 8009e0a:	e7f0      	b.n	8009dee <_svfiprintf_r+0x192>
 8009e0c:	ab03      	add	r3, sp, #12
 8009e0e:	9300      	str	r3, [sp, #0]
 8009e10:	462a      	mov	r2, r5
 8009e12:	4b0f      	ldr	r3, [pc, #60]	; (8009e50 <_svfiprintf_r+0x1f4>)
 8009e14:	a904      	add	r1, sp, #16
 8009e16:	4638      	mov	r0, r7
 8009e18:	f3af 8000 	nop.w
 8009e1c:	1c42      	adds	r2, r0, #1
 8009e1e:	4606      	mov	r6, r0
 8009e20:	d1d6      	bne.n	8009dd0 <_svfiprintf_r+0x174>
 8009e22:	89ab      	ldrh	r3, [r5, #12]
 8009e24:	065b      	lsls	r3, r3, #25
 8009e26:	f53f af2d 	bmi.w	8009c84 <_svfiprintf_r+0x28>
 8009e2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e2c:	b01d      	add	sp, #116	; 0x74
 8009e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e32:	ab03      	add	r3, sp, #12
 8009e34:	9300      	str	r3, [sp, #0]
 8009e36:	462a      	mov	r2, r5
 8009e38:	4b05      	ldr	r3, [pc, #20]	; (8009e50 <_svfiprintf_r+0x1f4>)
 8009e3a:	a904      	add	r1, sp, #16
 8009e3c:	4638      	mov	r0, r7
 8009e3e:	f000 f879 	bl	8009f34 <_printf_i>
 8009e42:	e7eb      	b.n	8009e1c <_svfiprintf_r+0x1c0>
 8009e44:	0800b208 	.word	0x0800b208
 8009e48:	0800b212 	.word	0x0800b212
 8009e4c:	00000000 	.word	0x00000000
 8009e50:	08009ba9 	.word	0x08009ba9
 8009e54:	0800b20e 	.word	0x0800b20e

08009e58 <_printf_common>:
 8009e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e5c:	4616      	mov	r6, r2
 8009e5e:	4699      	mov	r9, r3
 8009e60:	688a      	ldr	r2, [r1, #8]
 8009e62:	690b      	ldr	r3, [r1, #16]
 8009e64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	bfb8      	it	lt
 8009e6c:	4613      	movlt	r3, r2
 8009e6e:	6033      	str	r3, [r6, #0]
 8009e70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e74:	4607      	mov	r7, r0
 8009e76:	460c      	mov	r4, r1
 8009e78:	b10a      	cbz	r2, 8009e7e <_printf_common+0x26>
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	6033      	str	r3, [r6, #0]
 8009e7e:	6823      	ldr	r3, [r4, #0]
 8009e80:	0699      	lsls	r1, r3, #26
 8009e82:	bf42      	ittt	mi
 8009e84:	6833      	ldrmi	r3, [r6, #0]
 8009e86:	3302      	addmi	r3, #2
 8009e88:	6033      	strmi	r3, [r6, #0]
 8009e8a:	6825      	ldr	r5, [r4, #0]
 8009e8c:	f015 0506 	ands.w	r5, r5, #6
 8009e90:	d106      	bne.n	8009ea0 <_printf_common+0x48>
 8009e92:	f104 0a19 	add.w	sl, r4, #25
 8009e96:	68e3      	ldr	r3, [r4, #12]
 8009e98:	6832      	ldr	r2, [r6, #0]
 8009e9a:	1a9b      	subs	r3, r3, r2
 8009e9c:	42ab      	cmp	r3, r5
 8009e9e:	dc26      	bgt.n	8009eee <_printf_common+0x96>
 8009ea0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ea4:	1e13      	subs	r3, r2, #0
 8009ea6:	6822      	ldr	r2, [r4, #0]
 8009ea8:	bf18      	it	ne
 8009eaa:	2301      	movne	r3, #1
 8009eac:	0692      	lsls	r2, r2, #26
 8009eae:	d42b      	bmi.n	8009f08 <_printf_common+0xb0>
 8009eb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009eb4:	4649      	mov	r1, r9
 8009eb6:	4638      	mov	r0, r7
 8009eb8:	47c0      	blx	r8
 8009eba:	3001      	adds	r0, #1
 8009ebc:	d01e      	beq.n	8009efc <_printf_common+0xa4>
 8009ebe:	6823      	ldr	r3, [r4, #0]
 8009ec0:	6922      	ldr	r2, [r4, #16]
 8009ec2:	f003 0306 	and.w	r3, r3, #6
 8009ec6:	2b04      	cmp	r3, #4
 8009ec8:	bf02      	ittt	eq
 8009eca:	68e5      	ldreq	r5, [r4, #12]
 8009ecc:	6833      	ldreq	r3, [r6, #0]
 8009ece:	1aed      	subeq	r5, r5, r3
 8009ed0:	68a3      	ldr	r3, [r4, #8]
 8009ed2:	bf0c      	ite	eq
 8009ed4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ed8:	2500      	movne	r5, #0
 8009eda:	4293      	cmp	r3, r2
 8009edc:	bfc4      	itt	gt
 8009ede:	1a9b      	subgt	r3, r3, r2
 8009ee0:	18ed      	addgt	r5, r5, r3
 8009ee2:	2600      	movs	r6, #0
 8009ee4:	341a      	adds	r4, #26
 8009ee6:	42b5      	cmp	r5, r6
 8009ee8:	d11a      	bne.n	8009f20 <_printf_common+0xc8>
 8009eea:	2000      	movs	r0, #0
 8009eec:	e008      	b.n	8009f00 <_printf_common+0xa8>
 8009eee:	2301      	movs	r3, #1
 8009ef0:	4652      	mov	r2, sl
 8009ef2:	4649      	mov	r1, r9
 8009ef4:	4638      	mov	r0, r7
 8009ef6:	47c0      	blx	r8
 8009ef8:	3001      	adds	r0, #1
 8009efa:	d103      	bne.n	8009f04 <_printf_common+0xac>
 8009efc:	f04f 30ff 	mov.w	r0, #4294967295
 8009f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f04:	3501      	adds	r5, #1
 8009f06:	e7c6      	b.n	8009e96 <_printf_common+0x3e>
 8009f08:	18e1      	adds	r1, r4, r3
 8009f0a:	1c5a      	adds	r2, r3, #1
 8009f0c:	2030      	movs	r0, #48	; 0x30
 8009f0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f12:	4422      	add	r2, r4
 8009f14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f1c:	3302      	adds	r3, #2
 8009f1e:	e7c7      	b.n	8009eb0 <_printf_common+0x58>
 8009f20:	2301      	movs	r3, #1
 8009f22:	4622      	mov	r2, r4
 8009f24:	4649      	mov	r1, r9
 8009f26:	4638      	mov	r0, r7
 8009f28:	47c0      	blx	r8
 8009f2a:	3001      	adds	r0, #1
 8009f2c:	d0e6      	beq.n	8009efc <_printf_common+0xa4>
 8009f2e:	3601      	adds	r6, #1
 8009f30:	e7d9      	b.n	8009ee6 <_printf_common+0x8e>
	...

08009f34 <_printf_i>:
 8009f34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f38:	7e0f      	ldrb	r7, [r1, #24]
 8009f3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f3c:	2f78      	cmp	r7, #120	; 0x78
 8009f3e:	4691      	mov	r9, r2
 8009f40:	4680      	mov	r8, r0
 8009f42:	460c      	mov	r4, r1
 8009f44:	469a      	mov	sl, r3
 8009f46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009f4a:	d807      	bhi.n	8009f5c <_printf_i+0x28>
 8009f4c:	2f62      	cmp	r7, #98	; 0x62
 8009f4e:	d80a      	bhi.n	8009f66 <_printf_i+0x32>
 8009f50:	2f00      	cmp	r7, #0
 8009f52:	f000 80d4 	beq.w	800a0fe <_printf_i+0x1ca>
 8009f56:	2f58      	cmp	r7, #88	; 0x58
 8009f58:	f000 80c0 	beq.w	800a0dc <_printf_i+0x1a8>
 8009f5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009f64:	e03a      	b.n	8009fdc <_printf_i+0xa8>
 8009f66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009f6a:	2b15      	cmp	r3, #21
 8009f6c:	d8f6      	bhi.n	8009f5c <_printf_i+0x28>
 8009f6e:	a101      	add	r1, pc, #4	; (adr r1, 8009f74 <_printf_i+0x40>)
 8009f70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f74:	08009fcd 	.word	0x08009fcd
 8009f78:	08009fe1 	.word	0x08009fe1
 8009f7c:	08009f5d 	.word	0x08009f5d
 8009f80:	08009f5d 	.word	0x08009f5d
 8009f84:	08009f5d 	.word	0x08009f5d
 8009f88:	08009f5d 	.word	0x08009f5d
 8009f8c:	08009fe1 	.word	0x08009fe1
 8009f90:	08009f5d 	.word	0x08009f5d
 8009f94:	08009f5d 	.word	0x08009f5d
 8009f98:	08009f5d 	.word	0x08009f5d
 8009f9c:	08009f5d 	.word	0x08009f5d
 8009fa0:	0800a0e5 	.word	0x0800a0e5
 8009fa4:	0800a00d 	.word	0x0800a00d
 8009fa8:	0800a09f 	.word	0x0800a09f
 8009fac:	08009f5d 	.word	0x08009f5d
 8009fb0:	08009f5d 	.word	0x08009f5d
 8009fb4:	0800a107 	.word	0x0800a107
 8009fb8:	08009f5d 	.word	0x08009f5d
 8009fbc:	0800a00d 	.word	0x0800a00d
 8009fc0:	08009f5d 	.word	0x08009f5d
 8009fc4:	08009f5d 	.word	0x08009f5d
 8009fc8:	0800a0a7 	.word	0x0800a0a7
 8009fcc:	682b      	ldr	r3, [r5, #0]
 8009fce:	1d1a      	adds	r2, r3, #4
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	602a      	str	r2, [r5, #0]
 8009fd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009fdc:	2301      	movs	r3, #1
 8009fde:	e09f      	b.n	800a120 <_printf_i+0x1ec>
 8009fe0:	6820      	ldr	r0, [r4, #0]
 8009fe2:	682b      	ldr	r3, [r5, #0]
 8009fe4:	0607      	lsls	r7, r0, #24
 8009fe6:	f103 0104 	add.w	r1, r3, #4
 8009fea:	6029      	str	r1, [r5, #0]
 8009fec:	d501      	bpl.n	8009ff2 <_printf_i+0xbe>
 8009fee:	681e      	ldr	r6, [r3, #0]
 8009ff0:	e003      	b.n	8009ffa <_printf_i+0xc6>
 8009ff2:	0646      	lsls	r6, r0, #25
 8009ff4:	d5fb      	bpl.n	8009fee <_printf_i+0xba>
 8009ff6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009ffa:	2e00      	cmp	r6, #0
 8009ffc:	da03      	bge.n	800a006 <_printf_i+0xd2>
 8009ffe:	232d      	movs	r3, #45	; 0x2d
 800a000:	4276      	negs	r6, r6
 800a002:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a006:	485a      	ldr	r0, [pc, #360]	; (800a170 <_printf_i+0x23c>)
 800a008:	230a      	movs	r3, #10
 800a00a:	e012      	b.n	800a032 <_printf_i+0xfe>
 800a00c:	682b      	ldr	r3, [r5, #0]
 800a00e:	6820      	ldr	r0, [r4, #0]
 800a010:	1d19      	adds	r1, r3, #4
 800a012:	6029      	str	r1, [r5, #0]
 800a014:	0605      	lsls	r5, r0, #24
 800a016:	d501      	bpl.n	800a01c <_printf_i+0xe8>
 800a018:	681e      	ldr	r6, [r3, #0]
 800a01a:	e002      	b.n	800a022 <_printf_i+0xee>
 800a01c:	0641      	lsls	r1, r0, #25
 800a01e:	d5fb      	bpl.n	800a018 <_printf_i+0xe4>
 800a020:	881e      	ldrh	r6, [r3, #0]
 800a022:	4853      	ldr	r0, [pc, #332]	; (800a170 <_printf_i+0x23c>)
 800a024:	2f6f      	cmp	r7, #111	; 0x6f
 800a026:	bf0c      	ite	eq
 800a028:	2308      	moveq	r3, #8
 800a02a:	230a      	movne	r3, #10
 800a02c:	2100      	movs	r1, #0
 800a02e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a032:	6865      	ldr	r5, [r4, #4]
 800a034:	60a5      	str	r5, [r4, #8]
 800a036:	2d00      	cmp	r5, #0
 800a038:	bfa2      	ittt	ge
 800a03a:	6821      	ldrge	r1, [r4, #0]
 800a03c:	f021 0104 	bicge.w	r1, r1, #4
 800a040:	6021      	strge	r1, [r4, #0]
 800a042:	b90e      	cbnz	r6, 800a048 <_printf_i+0x114>
 800a044:	2d00      	cmp	r5, #0
 800a046:	d04b      	beq.n	800a0e0 <_printf_i+0x1ac>
 800a048:	4615      	mov	r5, r2
 800a04a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a04e:	fb03 6711 	mls	r7, r3, r1, r6
 800a052:	5dc7      	ldrb	r7, [r0, r7]
 800a054:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a058:	4637      	mov	r7, r6
 800a05a:	42bb      	cmp	r3, r7
 800a05c:	460e      	mov	r6, r1
 800a05e:	d9f4      	bls.n	800a04a <_printf_i+0x116>
 800a060:	2b08      	cmp	r3, #8
 800a062:	d10b      	bne.n	800a07c <_printf_i+0x148>
 800a064:	6823      	ldr	r3, [r4, #0]
 800a066:	07de      	lsls	r6, r3, #31
 800a068:	d508      	bpl.n	800a07c <_printf_i+0x148>
 800a06a:	6923      	ldr	r3, [r4, #16]
 800a06c:	6861      	ldr	r1, [r4, #4]
 800a06e:	4299      	cmp	r1, r3
 800a070:	bfde      	ittt	le
 800a072:	2330      	movle	r3, #48	; 0x30
 800a074:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a078:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a07c:	1b52      	subs	r2, r2, r5
 800a07e:	6122      	str	r2, [r4, #16]
 800a080:	f8cd a000 	str.w	sl, [sp]
 800a084:	464b      	mov	r3, r9
 800a086:	aa03      	add	r2, sp, #12
 800a088:	4621      	mov	r1, r4
 800a08a:	4640      	mov	r0, r8
 800a08c:	f7ff fee4 	bl	8009e58 <_printf_common>
 800a090:	3001      	adds	r0, #1
 800a092:	d14a      	bne.n	800a12a <_printf_i+0x1f6>
 800a094:	f04f 30ff 	mov.w	r0, #4294967295
 800a098:	b004      	add	sp, #16
 800a09a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a09e:	6823      	ldr	r3, [r4, #0]
 800a0a0:	f043 0320 	orr.w	r3, r3, #32
 800a0a4:	6023      	str	r3, [r4, #0]
 800a0a6:	4833      	ldr	r0, [pc, #204]	; (800a174 <_printf_i+0x240>)
 800a0a8:	2778      	movs	r7, #120	; 0x78
 800a0aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a0ae:	6823      	ldr	r3, [r4, #0]
 800a0b0:	6829      	ldr	r1, [r5, #0]
 800a0b2:	061f      	lsls	r7, r3, #24
 800a0b4:	f851 6b04 	ldr.w	r6, [r1], #4
 800a0b8:	d402      	bmi.n	800a0c0 <_printf_i+0x18c>
 800a0ba:	065f      	lsls	r7, r3, #25
 800a0bc:	bf48      	it	mi
 800a0be:	b2b6      	uxthmi	r6, r6
 800a0c0:	07df      	lsls	r7, r3, #31
 800a0c2:	bf48      	it	mi
 800a0c4:	f043 0320 	orrmi.w	r3, r3, #32
 800a0c8:	6029      	str	r1, [r5, #0]
 800a0ca:	bf48      	it	mi
 800a0cc:	6023      	strmi	r3, [r4, #0]
 800a0ce:	b91e      	cbnz	r6, 800a0d8 <_printf_i+0x1a4>
 800a0d0:	6823      	ldr	r3, [r4, #0]
 800a0d2:	f023 0320 	bic.w	r3, r3, #32
 800a0d6:	6023      	str	r3, [r4, #0]
 800a0d8:	2310      	movs	r3, #16
 800a0da:	e7a7      	b.n	800a02c <_printf_i+0xf8>
 800a0dc:	4824      	ldr	r0, [pc, #144]	; (800a170 <_printf_i+0x23c>)
 800a0de:	e7e4      	b.n	800a0aa <_printf_i+0x176>
 800a0e0:	4615      	mov	r5, r2
 800a0e2:	e7bd      	b.n	800a060 <_printf_i+0x12c>
 800a0e4:	682b      	ldr	r3, [r5, #0]
 800a0e6:	6826      	ldr	r6, [r4, #0]
 800a0e8:	6961      	ldr	r1, [r4, #20]
 800a0ea:	1d18      	adds	r0, r3, #4
 800a0ec:	6028      	str	r0, [r5, #0]
 800a0ee:	0635      	lsls	r5, r6, #24
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	d501      	bpl.n	800a0f8 <_printf_i+0x1c4>
 800a0f4:	6019      	str	r1, [r3, #0]
 800a0f6:	e002      	b.n	800a0fe <_printf_i+0x1ca>
 800a0f8:	0670      	lsls	r0, r6, #25
 800a0fa:	d5fb      	bpl.n	800a0f4 <_printf_i+0x1c0>
 800a0fc:	8019      	strh	r1, [r3, #0]
 800a0fe:	2300      	movs	r3, #0
 800a100:	6123      	str	r3, [r4, #16]
 800a102:	4615      	mov	r5, r2
 800a104:	e7bc      	b.n	800a080 <_printf_i+0x14c>
 800a106:	682b      	ldr	r3, [r5, #0]
 800a108:	1d1a      	adds	r2, r3, #4
 800a10a:	602a      	str	r2, [r5, #0]
 800a10c:	681d      	ldr	r5, [r3, #0]
 800a10e:	6862      	ldr	r2, [r4, #4]
 800a110:	2100      	movs	r1, #0
 800a112:	4628      	mov	r0, r5
 800a114:	f7f6 f864 	bl	80001e0 <memchr>
 800a118:	b108      	cbz	r0, 800a11e <_printf_i+0x1ea>
 800a11a:	1b40      	subs	r0, r0, r5
 800a11c:	6060      	str	r0, [r4, #4]
 800a11e:	6863      	ldr	r3, [r4, #4]
 800a120:	6123      	str	r3, [r4, #16]
 800a122:	2300      	movs	r3, #0
 800a124:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a128:	e7aa      	b.n	800a080 <_printf_i+0x14c>
 800a12a:	6923      	ldr	r3, [r4, #16]
 800a12c:	462a      	mov	r2, r5
 800a12e:	4649      	mov	r1, r9
 800a130:	4640      	mov	r0, r8
 800a132:	47d0      	blx	sl
 800a134:	3001      	adds	r0, #1
 800a136:	d0ad      	beq.n	800a094 <_printf_i+0x160>
 800a138:	6823      	ldr	r3, [r4, #0]
 800a13a:	079b      	lsls	r3, r3, #30
 800a13c:	d413      	bmi.n	800a166 <_printf_i+0x232>
 800a13e:	68e0      	ldr	r0, [r4, #12]
 800a140:	9b03      	ldr	r3, [sp, #12]
 800a142:	4298      	cmp	r0, r3
 800a144:	bfb8      	it	lt
 800a146:	4618      	movlt	r0, r3
 800a148:	e7a6      	b.n	800a098 <_printf_i+0x164>
 800a14a:	2301      	movs	r3, #1
 800a14c:	4632      	mov	r2, r6
 800a14e:	4649      	mov	r1, r9
 800a150:	4640      	mov	r0, r8
 800a152:	47d0      	blx	sl
 800a154:	3001      	adds	r0, #1
 800a156:	d09d      	beq.n	800a094 <_printf_i+0x160>
 800a158:	3501      	adds	r5, #1
 800a15a:	68e3      	ldr	r3, [r4, #12]
 800a15c:	9903      	ldr	r1, [sp, #12]
 800a15e:	1a5b      	subs	r3, r3, r1
 800a160:	42ab      	cmp	r3, r5
 800a162:	dcf2      	bgt.n	800a14a <_printf_i+0x216>
 800a164:	e7eb      	b.n	800a13e <_printf_i+0x20a>
 800a166:	2500      	movs	r5, #0
 800a168:	f104 0619 	add.w	r6, r4, #25
 800a16c:	e7f5      	b.n	800a15a <_printf_i+0x226>
 800a16e:	bf00      	nop
 800a170:	0800b219 	.word	0x0800b219
 800a174:	0800b22a 	.word	0x0800b22a

0800a178 <memmove>:
 800a178:	4288      	cmp	r0, r1
 800a17a:	b510      	push	{r4, lr}
 800a17c:	eb01 0402 	add.w	r4, r1, r2
 800a180:	d902      	bls.n	800a188 <memmove+0x10>
 800a182:	4284      	cmp	r4, r0
 800a184:	4623      	mov	r3, r4
 800a186:	d807      	bhi.n	800a198 <memmove+0x20>
 800a188:	1e43      	subs	r3, r0, #1
 800a18a:	42a1      	cmp	r1, r4
 800a18c:	d008      	beq.n	800a1a0 <memmove+0x28>
 800a18e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a192:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a196:	e7f8      	b.n	800a18a <memmove+0x12>
 800a198:	4402      	add	r2, r0
 800a19a:	4601      	mov	r1, r0
 800a19c:	428a      	cmp	r2, r1
 800a19e:	d100      	bne.n	800a1a2 <memmove+0x2a>
 800a1a0:	bd10      	pop	{r4, pc}
 800a1a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a1a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a1aa:	e7f7      	b.n	800a19c <memmove+0x24>

0800a1ac <_sbrk_r>:
 800a1ac:	b538      	push	{r3, r4, r5, lr}
 800a1ae:	4d06      	ldr	r5, [pc, #24]	; (800a1c8 <_sbrk_r+0x1c>)
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	4604      	mov	r4, r0
 800a1b4:	4608      	mov	r0, r1
 800a1b6:	602b      	str	r3, [r5, #0]
 800a1b8:	f7f7 fece 	bl	8001f58 <_sbrk>
 800a1bc:	1c43      	adds	r3, r0, #1
 800a1be:	d102      	bne.n	800a1c6 <_sbrk_r+0x1a>
 800a1c0:	682b      	ldr	r3, [r5, #0]
 800a1c2:	b103      	cbz	r3, 800a1c6 <_sbrk_r+0x1a>
 800a1c4:	6023      	str	r3, [r4, #0]
 800a1c6:	bd38      	pop	{r3, r4, r5, pc}
 800a1c8:	200008fc 	.word	0x200008fc

0800a1cc <_realloc_r>:
 800a1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1d0:	4680      	mov	r8, r0
 800a1d2:	4614      	mov	r4, r2
 800a1d4:	460e      	mov	r6, r1
 800a1d6:	b921      	cbnz	r1, 800a1e2 <_realloc_r+0x16>
 800a1d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1dc:	4611      	mov	r1, r2
 800a1de:	f7ff bc57 	b.w	8009a90 <_malloc_r>
 800a1e2:	b92a      	cbnz	r2, 800a1f0 <_realloc_r+0x24>
 800a1e4:	f7ff fbe8 	bl	80099b8 <_free_r>
 800a1e8:	4625      	mov	r5, r4
 800a1ea:	4628      	mov	r0, r5
 800a1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1f0:	f000 f81b 	bl	800a22a <_malloc_usable_size_r>
 800a1f4:	4284      	cmp	r4, r0
 800a1f6:	4607      	mov	r7, r0
 800a1f8:	d802      	bhi.n	800a200 <_realloc_r+0x34>
 800a1fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a1fe:	d812      	bhi.n	800a226 <_realloc_r+0x5a>
 800a200:	4621      	mov	r1, r4
 800a202:	4640      	mov	r0, r8
 800a204:	f7ff fc44 	bl	8009a90 <_malloc_r>
 800a208:	4605      	mov	r5, r0
 800a20a:	2800      	cmp	r0, #0
 800a20c:	d0ed      	beq.n	800a1ea <_realloc_r+0x1e>
 800a20e:	42bc      	cmp	r4, r7
 800a210:	4622      	mov	r2, r4
 800a212:	4631      	mov	r1, r6
 800a214:	bf28      	it	cs
 800a216:	463a      	movcs	r2, r7
 800a218:	f7ff fbc0 	bl	800999c <memcpy>
 800a21c:	4631      	mov	r1, r6
 800a21e:	4640      	mov	r0, r8
 800a220:	f7ff fbca 	bl	80099b8 <_free_r>
 800a224:	e7e1      	b.n	800a1ea <_realloc_r+0x1e>
 800a226:	4635      	mov	r5, r6
 800a228:	e7df      	b.n	800a1ea <_realloc_r+0x1e>

0800a22a <_malloc_usable_size_r>:
 800a22a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a22e:	1f18      	subs	r0, r3, #4
 800a230:	2b00      	cmp	r3, #0
 800a232:	bfbc      	itt	lt
 800a234:	580b      	ldrlt	r3, [r1, r0]
 800a236:	18c0      	addlt	r0, r0, r3
 800a238:	4770      	bx	lr
	...

0800a23c <pow>:
 800a23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a23e:	ed2d 8b02 	vpush	{d8}
 800a242:	eeb0 8a40 	vmov.f32	s16, s0
 800a246:	eef0 8a60 	vmov.f32	s17, s1
 800a24a:	ec55 4b11 	vmov	r4, r5, d1
 800a24e:	f000 f8ab 	bl	800a3a8 <__ieee754_pow>
 800a252:	4622      	mov	r2, r4
 800a254:	462b      	mov	r3, r5
 800a256:	4620      	mov	r0, r4
 800a258:	4629      	mov	r1, r5
 800a25a:	ec57 6b10 	vmov	r6, r7, d0
 800a25e:	f7f6 fc65 	bl	8000b2c <__aeabi_dcmpun>
 800a262:	2800      	cmp	r0, #0
 800a264:	d13b      	bne.n	800a2de <pow+0xa2>
 800a266:	ec51 0b18 	vmov	r0, r1, d8
 800a26a:	2200      	movs	r2, #0
 800a26c:	2300      	movs	r3, #0
 800a26e:	f7f6 fc2b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a272:	b1b8      	cbz	r0, 800a2a4 <pow+0x68>
 800a274:	2200      	movs	r2, #0
 800a276:	2300      	movs	r3, #0
 800a278:	4620      	mov	r0, r4
 800a27a:	4629      	mov	r1, r5
 800a27c:	f7f6 fc24 	bl	8000ac8 <__aeabi_dcmpeq>
 800a280:	2800      	cmp	r0, #0
 800a282:	d146      	bne.n	800a312 <pow+0xd6>
 800a284:	ec45 4b10 	vmov	d0, r4, r5
 800a288:	f000 f848 	bl	800a31c <finite>
 800a28c:	b338      	cbz	r0, 800a2de <pow+0xa2>
 800a28e:	2200      	movs	r2, #0
 800a290:	2300      	movs	r3, #0
 800a292:	4620      	mov	r0, r4
 800a294:	4629      	mov	r1, r5
 800a296:	f7f6 fc21 	bl	8000adc <__aeabi_dcmplt>
 800a29a:	b300      	cbz	r0, 800a2de <pow+0xa2>
 800a29c:	f7ff fb52 	bl	8009944 <__errno>
 800a2a0:	2322      	movs	r3, #34	; 0x22
 800a2a2:	e01b      	b.n	800a2dc <pow+0xa0>
 800a2a4:	ec47 6b10 	vmov	d0, r6, r7
 800a2a8:	f000 f838 	bl	800a31c <finite>
 800a2ac:	b9e0      	cbnz	r0, 800a2e8 <pow+0xac>
 800a2ae:	eeb0 0a48 	vmov.f32	s0, s16
 800a2b2:	eef0 0a68 	vmov.f32	s1, s17
 800a2b6:	f000 f831 	bl	800a31c <finite>
 800a2ba:	b1a8      	cbz	r0, 800a2e8 <pow+0xac>
 800a2bc:	ec45 4b10 	vmov	d0, r4, r5
 800a2c0:	f000 f82c 	bl	800a31c <finite>
 800a2c4:	b180      	cbz	r0, 800a2e8 <pow+0xac>
 800a2c6:	4632      	mov	r2, r6
 800a2c8:	463b      	mov	r3, r7
 800a2ca:	4630      	mov	r0, r6
 800a2cc:	4639      	mov	r1, r7
 800a2ce:	f7f6 fc2d 	bl	8000b2c <__aeabi_dcmpun>
 800a2d2:	2800      	cmp	r0, #0
 800a2d4:	d0e2      	beq.n	800a29c <pow+0x60>
 800a2d6:	f7ff fb35 	bl	8009944 <__errno>
 800a2da:	2321      	movs	r3, #33	; 0x21
 800a2dc:	6003      	str	r3, [r0, #0]
 800a2de:	ecbd 8b02 	vpop	{d8}
 800a2e2:	ec47 6b10 	vmov	d0, r6, r7
 800a2e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	4630      	mov	r0, r6
 800a2ee:	4639      	mov	r1, r7
 800a2f0:	f7f6 fbea 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2f4:	2800      	cmp	r0, #0
 800a2f6:	d0f2      	beq.n	800a2de <pow+0xa2>
 800a2f8:	eeb0 0a48 	vmov.f32	s0, s16
 800a2fc:	eef0 0a68 	vmov.f32	s1, s17
 800a300:	f000 f80c 	bl	800a31c <finite>
 800a304:	2800      	cmp	r0, #0
 800a306:	d0ea      	beq.n	800a2de <pow+0xa2>
 800a308:	ec45 4b10 	vmov	d0, r4, r5
 800a30c:	f000 f806 	bl	800a31c <finite>
 800a310:	e7c3      	b.n	800a29a <pow+0x5e>
 800a312:	4f01      	ldr	r7, [pc, #4]	; (800a318 <pow+0xdc>)
 800a314:	2600      	movs	r6, #0
 800a316:	e7e2      	b.n	800a2de <pow+0xa2>
 800a318:	3ff00000 	.word	0x3ff00000

0800a31c <finite>:
 800a31c:	b082      	sub	sp, #8
 800a31e:	ed8d 0b00 	vstr	d0, [sp]
 800a322:	9801      	ldr	r0, [sp, #4]
 800a324:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a328:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a32c:	0fc0      	lsrs	r0, r0, #31
 800a32e:	b002      	add	sp, #8
 800a330:	4770      	bx	lr
	...

0800a334 <trunc>:
 800a334:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 800a338:	ec5c bb10 	vmov	fp, ip, d0
 800a33c:	f3cc 500a 	ubfx	r0, ip, #20, #11
 800a340:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 800a344:	2913      	cmp	r1, #19
 800a346:	4664      	mov	r4, ip
 800a348:	dc11      	bgt.n	800a36e <trunc+0x3a>
 800a34a:	2900      	cmp	r1, #0
 800a34c:	bfa7      	ittee	ge
 800a34e:	4b15      	ldrge	r3, [pc, #84]	; (800a3a4 <trunc+0x70>)
 800a350:	fa43 f101 	asrge.w	r1, r3, r1
 800a354:	2200      	movlt	r2, #0
 800a356:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 800a35a:	bfa4      	itt	ge
 800a35c:	2200      	movge	r2, #0
 800a35e:	ea01 030c 	andge.w	r3, r1, ip
 800a362:	4693      	mov	fp, r2
 800a364:	469c      	mov	ip, r3
 800a366:	ec4c bb10 	vmov	d0, fp, ip
 800a36a:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 800a36e:	2933      	cmp	r1, #51	; 0x33
 800a370:	dd0d      	ble.n	800a38e <trunc+0x5a>
 800a372:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a376:	d1f6      	bne.n	800a366 <trunc+0x32>
 800a378:	4663      	mov	r3, ip
 800a37a:	ee10 2a10 	vmov	r2, s0
 800a37e:	ee10 0a10 	vmov	r0, s0
 800a382:	4621      	mov	r1, r4
 800a384:	f7f5 ff82 	bl	800028c <__adddf3>
 800a388:	4683      	mov	fp, r0
 800a38a:	468c      	mov	ip, r1
 800a38c:	e7eb      	b.n	800a366 <trunc+0x32>
 800a38e:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 800a392:	f04f 33ff 	mov.w	r3, #4294967295
 800a396:	40c3      	lsrs	r3, r0
 800a398:	ea2b 0603 	bic.w	r6, fp, r3
 800a39c:	46b3      	mov	fp, r6
 800a39e:	46a4      	mov	ip, r4
 800a3a0:	e7e1      	b.n	800a366 <trunc+0x32>
 800a3a2:	bf00      	nop
 800a3a4:	fff00000 	.word	0xfff00000

0800a3a8 <__ieee754_pow>:
 800a3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ac:	ed2d 8b06 	vpush	{d8-d10}
 800a3b0:	b089      	sub	sp, #36	; 0x24
 800a3b2:	ed8d 1b00 	vstr	d1, [sp]
 800a3b6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800a3ba:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a3be:	ea58 0102 	orrs.w	r1, r8, r2
 800a3c2:	ec57 6b10 	vmov	r6, r7, d0
 800a3c6:	d115      	bne.n	800a3f4 <__ieee754_pow+0x4c>
 800a3c8:	19b3      	adds	r3, r6, r6
 800a3ca:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800a3ce:	4152      	adcs	r2, r2
 800a3d0:	4299      	cmp	r1, r3
 800a3d2:	4b89      	ldr	r3, [pc, #548]	; (800a5f8 <__ieee754_pow+0x250>)
 800a3d4:	4193      	sbcs	r3, r2
 800a3d6:	f080 84d1 	bcs.w	800ad7c <__ieee754_pow+0x9d4>
 800a3da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a3de:	4630      	mov	r0, r6
 800a3e0:	4639      	mov	r1, r7
 800a3e2:	f7f5 ff53 	bl	800028c <__adddf3>
 800a3e6:	ec41 0b10 	vmov	d0, r0, r1
 800a3ea:	b009      	add	sp, #36	; 0x24
 800a3ec:	ecbd 8b06 	vpop	{d8-d10}
 800a3f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3f4:	4b81      	ldr	r3, [pc, #516]	; (800a5fc <__ieee754_pow+0x254>)
 800a3f6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800a3fa:	429c      	cmp	r4, r3
 800a3fc:	ee10 aa10 	vmov	sl, s0
 800a400:	463d      	mov	r5, r7
 800a402:	dc06      	bgt.n	800a412 <__ieee754_pow+0x6a>
 800a404:	d101      	bne.n	800a40a <__ieee754_pow+0x62>
 800a406:	2e00      	cmp	r6, #0
 800a408:	d1e7      	bne.n	800a3da <__ieee754_pow+0x32>
 800a40a:	4598      	cmp	r8, r3
 800a40c:	dc01      	bgt.n	800a412 <__ieee754_pow+0x6a>
 800a40e:	d10f      	bne.n	800a430 <__ieee754_pow+0x88>
 800a410:	b172      	cbz	r2, 800a430 <__ieee754_pow+0x88>
 800a412:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800a416:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800a41a:	ea55 050a 	orrs.w	r5, r5, sl
 800a41e:	d1dc      	bne.n	800a3da <__ieee754_pow+0x32>
 800a420:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a424:	18db      	adds	r3, r3, r3
 800a426:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800a42a:	4152      	adcs	r2, r2
 800a42c:	429d      	cmp	r5, r3
 800a42e:	e7d0      	b.n	800a3d2 <__ieee754_pow+0x2a>
 800a430:	2d00      	cmp	r5, #0
 800a432:	da3b      	bge.n	800a4ac <__ieee754_pow+0x104>
 800a434:	4b72      	ldr	r3, [pc, #456]	; (800a600 <__ieee754_pow+0x258>)
 800a436:	4598      	cmp	r8, r3
 800a438:	dc51      	bgt.n	800a4de <__ieee754_pow+0x136>
 800a43a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a43e:	4598      	cmp	r8, r3
 800a440:	f340 84ab 	ble.w	800ad9a <__ieee754_pow+0x9f2>
 800a444:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a448:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a44c:	2b14      	cmp	r3, #20
 800a44e:	dd0f      	ble.n	800a470 <__ieee754_pow+0xc8>
 800a450:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a454:	fa22 f103 	lsr.w	r1, r2, r3
 800a458:	fa01 f303 	lsl.w	r3, r1, r3
 800a45c:	4293      	cmp	r3, r2
 800a45e:	f040 849c 	bne.w	800ad9a <__ieee754_pow+0x9f2>
 800a462:	f001 0101 	and.w	r1, r1, #1
 800a466:	f1c1 0302 	rsb	r3, r1, #2
 800a46a:	9304      	str	r3, [sp, #16]
 800a46c:	b182      	cbz	r2, 800a490 <__ieee754_pow+0xe8>
 800a46e:	e05f      	b.n	800a530 <__ieee754_pow+0x188>
 800a470:	2a00      	cmp	r2, #0
 800a472:	d15b      	bne.n	800a52c <__ieee754_pow+0x184>
 800a474:	f1c3 0314 	rsb	r3, r3, #20
 800a478:	fa48 f103 	asr.w	r1, r8, r3
 800a47c:	fa01 f303 	lsl.w	r3, r1, r3
 800a480:	4543      	cmp	r3, r8
 800a482:	f040 8487 	bne.w	800ad94 <__ieee754_pow+0x9ec>
 800a486:	f001 0101 	and.w	r1, r1, #1
 800a48a:	f1c1 0302 	rsb	r3, r1, #2
 800a48e:	9304      	str	r3, [sp, #16]
 800a490:	4b5c      	ldr	r3, [pc, #368]	; (800a604 <__ieee754_pow+0x25c>)
 800a492:	4598      	cmp	r8, r3
 800a494:	d132      	bne.n	800a4fc <__ieee754_pow+0x154>
 800a496:	f1b9 0f00 	cmp.w	r9, #0
 800a49a:	f280 8477 	bge.w	800ad8c <__ieee754_pow+0x9e4>
 800a49e:	4959      	ldr	r1, [pc, #356]	; (800a604 <__ieee754_pow+0x25c>)
 800a4a0:	4632      	mov	r2, r6
 800a4a2:	463b      	mov	r3, r7
 800a4a4:	2000      	movs	r0, #0
 800a4a6:	f7f6 f9d1 	bl	800084c <__aeabi_ddiv>
 800a4aa:	e79c      	b.n	800a3e6 <__ieee754_pow+0x3e>
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	9304      	str	r3, [sp, #16]
 800a4b0:	2a00      	cmp	r2, #0
 800a4b2:	d13d      	bne.n	800a530 <__ieee754_pow+0x188>
 800a4b4:	4b51      	ldr	r3, [pc, #324]	; (800a5fc <__ieee754_pow+0x254>)
 800a4b6:	4598      	cmp	r8, r3
 800a4b8:	d1ea      	bne.n	800a490 <__ieee754_pow+0xe8>
 800a4ba:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a4be:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a4c2:	ea53 030a 	orrs.w	r3, r3, sl
 800a4c6:	f000 8459 	beq.w	800ad7c <__ieee754_pow+0x9d4>
 800a4ca:	4b4f      	ldr	r3, [pc, #316]	; (800a608 <__ieee754_pow+0x260>)
 800a4cc:	429c      	cmp	r4, r3
 800a4ce:	dd08      	ble.n	800a4e2 <__ieee754_pow+0x13a>
 800a4d0:	f1b9 0f00 	cmp.w	r9, #0
 800a4d4:	f2c0 8456 	blt.w	800ad84 <__ieee754_pow+0x9dc>
 800a4d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4dc:	e783      	b.n	800a3e6 <__ieee754_pow+0x3e>
 800a4de:	2302      	movs	r3, #2
 800a4e0:	e7e5      	b.n	800a4ae <__ieee754_pow+0x106>
 800a4e2:	f1b9 0f00 	cmp.w	r9, #0
 800a4e6:	f04f 0000 	mov.w	r0, #0
 800a4ea:	f04f 0100 	mov.w	r1, #0
 800a4ee:	f6bf af7a 	bge.w	800a3e6 <__ieee754_pow+0x3e>
 800a4f2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a4f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a4fa:	e774      	b.n	800a3e6 <__ieee754_pow+0x3e>
 800a4fc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a500:	d106      	bne.n	800a510 <__ieee754_pow+0x168>
 800a502:	4632      	mov	r2, r6
 800a504:	463b      	mov	r3, r7
 800a506:	4630      	mov	r0, r6
 800a508:	4639      	mov	r1, r7
 800a50a:	f7f6 f875 	bl	80005f8 <__aeabi_dmul>
 800a50e:	e76a      	b.n	800a3e6 <__ieee754_pow+0x3e>
 800a510:	4b3e      	ldr	r3, [pc, #248]	; (800a60c <__ieee754_pow+0x264>)
 800a512:	4599      	cmp	r9, r3
 800a514:	d10c      	bne.n	800a530 <__ieee754_pow+0x188>
 800a516:	2d00      	cmp	r5, #0
 800a518:	db0a      	blt.n	800a530 <__ieee754_pow+0x188>
 800a51a:	ec47 6b10 	vmov	d0, r6, r7
 800a51e:	b009      	add	sp, #36	; 0x24
 800a520:	ecbd 8b06 	vpop	{d8-d10}
 800a524:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a528:	f000 bd20 	b.w	800af6c <__ieee754_sqrt>
 800a52c:	2300      	movs	r3, #0
 800a52e:	9304      	str	r3, [sp, #16]
 800a530:	ec47 6b10 	vmov	d0, r6, r7
 800a534:	f000 fc62 	bl	800adfc <fabs>
 800a538:	ec51 0b10 	vmov	r0, r1, d0
 800a53c:	f1ba 0f00 	cmp.w	sl, #0
 800a540:	d129      	bne.n	800a596 <__ieee754_pow+0x1ee>
 800a542:	b124      	cbz	r4, 800a54e <__ieee754_pow+0x1a6>
 800a544:	4b2f      	ldr	r3, [pc, #188]	; (800a604 <__ieee754_pow+0x25c>)
 800a546:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d123      	bne.n	800a596 <__ieee754_pow+0x1ee>
 800a54e:	f1b9 0f00 	cmp.w	r9, #0
 800a552:	da05      	bge.n	800a560 <__ieee754_pow+0x1b8>
 800a554:	4602      	mov	r2, r0
 800a556:	460b      	mov	r3, r1
 800a558:	2000      	movs	r0, #0
 800a55a:	492a      	ldr	r1, [pc, #168]	; (800a604 <__ieee754_pow+0x25c>)
 800a55c:	f7f6 f976 	bl	800084c <__aeabi_ddiv>
 800a560:	2d00      	cmp	r5, #0
 800a562:	f6bf af40 	bge.w	800a3e6 <__ieee754_pow+0x3e>
 800a566:	9b04      	ldr	r3, [sp, #16]
 800a568:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a56c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a570:	431c      	orrs	r4, r3
 800a572:	d108      	bne.n	800a586 <__ieee754_pow+0x1de>
 800a574:	4602      	mov	r2, r0
 800a576:	460b      	mov	r3, r1
 800a578:	4610      	mov	r0, r2
 800a57a:	4619      	mov	r1, r3
 800a57c:	f7f5 fe84 	bl	8000288 <__aeabi_dsub>
 800a580:	4602      	mov	r2, r0
 800a582:	460b      	mov	r3, r1
 800a584:	e78f      	b.n	800a4a6 <__ieee754_pow+0xfe>
 800a586:	9b04      	ldr	r3, [sp, #16]
 800a588:	2b01      	cmp	r3, #1
 800a58a:	f47f af2c 	bne.w	800a3e6 <__ieee754_pow+0x3e>
 800a58e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a592:	4619      	mov	r1, r3
 800a594:	e727      	b.n	800a3e6 <__ieee754_pow+0x3e>
 800a596:	0feb      	lsrs	r3, r5, #31
 800a598:	3b01      	subs	r3, #1
 800a59a:	9306      	str	r3, [sp, #24]
 800a59c:	9a06      	ldr	r2, [sp, #24]
 800a59e:	9b04      	ldr	r3, [sp, #16]
 800a5a0:	4313      	orrs	r3, r2
 800a5a2:	d102      	bne.n	800a5aa <__ieee754_pow+0x202>
 800a5a4:	4632      	mov	r2, r6
 800a5a6:	463b      	mov	r3, r7
 800a5a8:	e7e6      	b.n	800a578 <__ieee754_pow+0x1d0>
 800a5aa:	4b19      	ldr	r3, [pc, #100]	; (800a610 <__ieee754_pow+0x268>)
 800a5ac:	4598      	cmp	r8, r3
 800a5ae:	f340 80fb 	ble.w	800a7a8 <__ieee754_pow+0x400>
 800a5b2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a5b6:	4598      	cmp	r8, r3
 800a5b8:	4b13      	ldr	r3, [pc, #76]	; (800a608 <__ieee754_pow+0x260>)
 800a5ba:	dd0c      	ble.n	800a5d6 <__ieee754_pow+0x22e>
 800a5bc:	429c      	cmp	r4, r3
 800a5be:	dc0f      	bgt.n	800a5e0 <__ieee754_pow+0x238>
 800a5c0:	f1b9 0f00 	cmp.w	r9, #0
 800a5c4:	da0f      	bge.n	800a5e6 <__ieee754_pow+0x23e>
 800a5c6:	2000      	movs	r0, #0
 800a5c8:	b009      	add	sp, #36	; 0x24
 800a5ca:	ecbd 8b06 	vpop	{d8-d10}
 800a5ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d2:	f000 bcc2 	b.w	800af5a <__math_oflow>
 800a5d6:	429c      	cmp	r4, r3
 800a5d8:	dbf2      	blt.n	800a5c0 <__ieee754_pow+0x218>
 800a5da:	4b0a      	ldr	r3, [pc, #40]	; (800a604 <__ieee754_pow+0x25c>)
 800a5dc:	429c      	cmp	r4, r3
 800a5de:	dd19      	ble.n	800a614 <__ieee754_pow+0x26c>
 800a5e0:	f1b9 0f00 	cmp.w	r9, #0
 800a5e4:	dcef      	bgt.n	800a5c6 <__ieee754_pow+0x21e>
 800a5e6:	2000      	movs	r0, #0
 800a5e8:	b009      	add	sp, #36	; 0x24
 800a5ea:	ecbd 8b06 	vpop	{d8-d10}
 800a5ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f2:	f000 bca9 	b.w	800af48 <__math_uflow>
 800a5f6:	bf00      	nop
 800a5f8:	fff00000 	.word	0xfff00000
 800a5fc:	7ff00000 	.word	0x7ff00000
 800a600:	433fffff 	.word	0x433fffff
 800a604:	3ff00000 	.word	0x3ff00000
 800a608:	3fefffff 	.word	0x3fefffff
 800a60c:	3fe00000 	.word	0x3fe00000
 800a610:	41e00000 	.word	0x41e00000
 800a614:	4b60      	ldr	r3, [pc, #384]	; (800a798 <__ieee754_pow+0x3f0>)
 800a616:	2200      	movs	r2, #0
 800a618:	f7f5 fe36 	bl	8000288 <__aeabi_dsub>
 800a61c:	a354      	add	r3, pc, #336	; (adr r3, 800a770 <__ieee754_pow+0x3c8>)
 800a61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a622:	4604      	mov	r4, r0
 800a624:	460d      	mov	r5, r1
 800a626:	f7f5 ffe7 	bl	80005f8 <__aeabi_dmul>
 800a62a:	a353      	add	r3, pc, #332	; (adr r3, 800a778 <__ieee754_pow+0x3d0>)
 800a62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a630:	4606      	mov	r6, r0
 800a632:	460f      	mov	r7, r1
 800a634:	4620      	mov	r0, r4
 800a636:	4629      	mov	r1, r5
 800a638:	f7f5 ffde 	bl	80005f8 <__aeabi_dmul>
 800a63c:	4b57      	ldr	r3, [pc, #348]	; (800a79c <__ieee754_pow+0x3f4>)
 800a63e:	4682      	mov	sl, r0
 800a640:	468b      	mov	fp, r1
 800a642:	2200      	movs	r2, #0
 800a644:	4620      	mov	r0, r4
 800a646:	4629      	mov	r1, r5
 800a648:	f7f5 ffd6 	bl	80005f8 <__aeabi_dmul>
 800a64c:	4602      	mov	r2, r0
 800a64e:	460b      	mov	r3, r1
 800a650:	a14b      	add	r1, pc, #300	; (adr r1, 800a780 <__ieee754_pow+0x3d8>)
 800a652:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a656:	f7f5 fe17 	bl	8000288 <__aeabi_dsub>
 800a65a:	4622      	mov	r2, r4
 800a65c:	462b      	mov	r3, r5
 800a65e:	f7f5 ffcb 	bl	80005f8 <__aeabi_dmul>
 800a662:	4602      	mov	r2, r0
 800a664:	460b      	mov	r3, r1
 800a666:	2000      	movs	r0, #0
 800a668:	494d      	ldr	r1, [pc, #308]	; (800a7a0 <__ieee754_pow+0x3f8>)
 800a66a:	f7f5 fe0d 	bl	8000288 <__aeabi_dsub>
 800a66e:	4622      	mov	r2, r4
 800a670:	4680      	mov	r8, r0
 800a672:	4689      	mov	r9, r1
 800a674:	462b      	mov	r3, r5
 800a676:	4620      	mov	r0, r4
 800a678:	4629      	mov	r1, r5
 800a67a:	f7f5 ffbd 	bl	80005f8 <__aeabi_dmul>
 800a67e:	4602      	mov	r2, r0
 800a680:	460b      	mov	r3, r1
 800a682:	4640      	mov	r0, r8
 800a684:	4649      	mov	r1, r9
 800a686:	f7f5 ffb7 	bl	80005f8 <__aeabi_dmul>
 800a68a:	a33f      	add	r3, pc, #252	; (adr r3, 800a788 <__ieee754_pow+0x3e0>)
 800a68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a690:	f7f5 ffb2 	bl	80005f8 <__aeabi_dmul>
 800a694:	4602      	mov	r2, r0
 800a696:	460b      	mov	r3, r1
 800a698:	4650      	mov	r0, sl
 800a69a:	4659      	mov	r1, fp
 800a69c:	f7f5 fdf4 	bl	8000288 <__aeabi_dsub>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	4680      	mov	r8, r0
 800a6a6:	4689      	mov	r9, r1
 800a6a8:	4630      	mov	r0, r6
 800a6aa:	4639      	mov	r1, r7
 800a6ac:	f7f5 fdee 	bl	800028c <__adddf3>
 800a6b0:	2000      	movs	r0, #0
 800a6b2:	4632      	mov	r2, r6
 800a6b4:	463b      	mov	r3, r7
 800a6b6:	4604      	mov	r4, r0
 800a6b8:	460d      	mov	r5, r1
 800a6ba:	f7f5 fde5 	bl	8000288 <__aeabi_dsub>
 800a6be:	4602      	mov	r2, r0
 800a6c0:	460b      	mov	r3, r1
 800a6c2:	4640      	mov	r0, r8
 800a6c4:	4649      	mov	r1, r9
 800a6c6:	f7f5 fddf 	bl	8000288 <__aeabi_dsub>
 800a6ca:	9b04      	ldr	r3, [sp, #16]
 800a6cc:	9a06      	ldr	r2, [sp, #24]
 800a6ce:	3b01      	subs	r3, #1
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	4682      	mov	sl, r0
 800a6d4:	468b      	mov	fp, r1
 800a6d6:	f040 81e7 	bne.w	800aaa8 <__ieee754_pow+0x700>
 800a6da:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800a790 <__ieee754_pow+0x3e8>
 800a6de:	eeb0 8a47 	vmov.f32	s16, s14
 800a6e2:	eef0 8a67 	vmov.f32	s17, s15
 800a6e6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a6ea:	2600      	movs	r6, #0
 800a6ec:	4632      	mov	r2, r6
 800a6ee:	463b      	mov	r3, r7
 800a6f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6f4:	f7f5 fdc8 	bl	8000288 <__aeabi_dsub>
 800a6f8:	4622      	mov	r2, r4
 800a6fa:	462b      	mov	r3, r5
 800a6fc:	f7f5 ff7c 	bl	80005f8 <__aeabi_dmul>
 800a700:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a704:	4680      	mov	r8, r0
 800a706:	4689      	mov	r9, r1
 800a708:	4650      	mov	r0, sl
 800a70a:	4659      	mov	r1, fp
 800a70c:	f7f5 ff74 	bl	80005f8 <__aeabi_dmul>
 800a710:	4602      	mov	r2, r0
 800a712:	460b      	mov	r3, r1
 800a714:	4640      	mov	r0, r8
 800a716:	4649      	mov	r1, r9
 800a718:	f7f5 fdb8 	bl	800028c <__adddf3>
 800a71c:	4632      	mov	r2, r6
 800a71e:	463b      	mov	r3, r7
 800a720:	4680      	mov	r8, r0
 800a722:	4689      	mov	r9, r1
 800a724:	4620      	mov	r0, r4
 800a726:	4629      	mov	r1, r5
 800a728:	f7f5 ff66 	bl	80005f8 <__aeabi_dmul>
 800a72c:	460b      	mov	r3, r1
 800a72e:	4604      	mov	r4, r0
 800a730:	460d      	mov	r5, r1
 800a732:	4602      	mov	r2, r0
 800a734:	4649      	mov	r1, r9
 800a736:	4640      	mov	r0, r8
 800a738:	f7f5 fda8 	bl	800028c <__adddf3>
 800a73c:	4b19      	ldr	r3, [pc, #100]	; (800a7a4 <__ieee754_pow+0x3fc>)
 800a73e:	4299      	cmp	r1, r3
 800a740:	ec45 4b19 	vmov	d9, r4, r5
 800a744:	4606      	mov	r6, r0
 800a746:	460f      	mov	r7, r1
 800a748:	468b      	mov	fp, r1
 800a74a:	f340 82f0 	ble.w	800ad2e <__ieee754_pow+0x986>
 800a74e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a752:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a756:	4303      	orrs	r3, r0
 800a758:	f000 81e4 	beq.w	800ab24 <__ieee754_pow+0x77c>
 800a75c:	ec51 0b18 	vmov	r0, r1, d8
 800a760:	2200      	movs	r2, #0
 800a762:	2300      	movs	r3, #0
 800a764:	f7f6 f9ba 	bl	8000adc <__aeabi_dcmplt>
 800a768:	3800      	subs	r0, #0
 800a76a:	bf18      	it	ne
 800a76c:	2001      	movne	r0, #1
 800a76e:	e72b      	b.n	800a5c8 <__ieee754_pow+0x220>
 800a770:	60000000 	.word	0x60000000
 800a774:	3ff71547 	.word	0x3ff71547
 800a778:	f85ddf44 	.word	0xf85ddf44
 800a77c:	3e54ae0b 	.word	0x3e54ae0b
 800a780:	55555555 	.word	0x55555555
 800a784:	3fd55555 	.word	0x3fd55555
 800a788:	652b82fe 	.word	0x652b82fe
 800a78c:	3ff71547 	.word	0x3ff71547
 800a790:	00000000 	.word	0x00000000
 800a794:	bff00000 	.word	0xbff00000
 800a798:	3ff00000 	.word	0x3ff00000
 800a79c:	3fd00000 	.word	0x3fd00000
 800a7a0:	3fe00000 	.word	0x3fe00000
 800a7a4:	408fffff 	.word	0x408fffff
 800a7a8:	4bd5      	ldr	r3, [pc, #852]	; (800ab00 <__ieee754_pow+0x758>)
 800a7aa:	402b      	ands	r3, r5
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	b92b      	cbnz	r3, 800a7bc <__ieee754_pow+0x414>
 800a7b0:	4bd4      	ldr	r3, [pc, #848]	; (800ab04 <__ieee754_pow+0x75c>)
 800a7b2:	f7f5 ff21 	bl	80005f8 <__aeabi_dmul>
 800a7b6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a7ba:	460c      	mov	r4, r1
 800a7bc:	1523      	asrs	r3, r4, #20
 800a7be:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a7c2:	4413      	add	r3, r2
 800a7c4:	9305      	str	r3, [sp, #20]
 800a7c6:	4bd0      	ldr	r3, [pc, #832]	; (800ab08 <__ieee754_pow+0x760>)
 800a7c8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a7cc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a7d0:	429c      	cmp	r4, r3
 800a7d2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a7d6:	dd08      	ble.n	800a7ea <__ieee754_pow+0x442>
 800a7d8:	4bcc      	ldr	r3, [pc, #816]	; (800ab0c <__ieee754_pow+0x764>)
 800a7da:	429c      	cmp	r4, r3
 800a7dc:	f340 8162 	ble.w	800aaa4 <__ieee754_pow+0x6fc>
 800a7e0:	9b05      	ldr	r3, [sp, #20]
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	9305      	str	r3, [sp, #20]
 800a7e6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a7ea:	2400      	movs	r4, #0
 800a7ec:	00e3      	lsls	r3, r4, #3
 800a7ee:	9307      	str	r3, [sp, #28]
 800a7f0:	4bc7      	ldr	r3, [pc, #796]	; (800ab10 <__ieee754_pow+0x768>)
 800a7f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a7f6:	ed93 7b00 	vldr	d7, [r3]
 800a7fa:	4629      	mov	r1, r5
 800a7fc:	ec53 2b17 	vmov	r2, r3, d7
 800a800:	eeb0 9a47 	vmov.f32	s18, s14
 800a804:	eef0 9a67 	vmov.f32	s19, s15
 800a808:	4682      	mov	sl, r0
 800a80a:	f7f5 fd3d 	bl	8000288 <__aeabi_dsub>
 800a80e:	4652      	mov	r2, sl
 800a810:	4606      	mov	r6, r0
 800a812:	460f      	mov	r7, r1
 800a814:	462b      	mov	r3, r5
 800a816:	ec51 0b19 	vmov	r0, r1, d9
 800a81a:	f7f5 fd37 	bl	800028c <__adddf3>
 800a81e:	4602      	mov	r2, r0
 800a820:	460b      	mov	r3, r1
 800a822:	2000      	movs	r0, #0
 800a824:	49bb      	ldr	r1, [pc, #748]	; (800ab14 <__ieee754_pow+0x76c>)
 800a826:	f7f6 f811 	bl	800084c <__aeabi_ddiv>
 800a82a:	ec41 0b1a 	vmov	d10, r0, r1
 800a82e:	4602      	mov	r2, r0
 800a830:	460b      	mov	r3, r1
 800a832:	4630      	mov	r0, r6
 800a834:	4639      	mov	r1, r7
 800a836:	f7f5 fedf 	bl	80005f8 <__aeabi_dmul>
 800a83a:	2300      	movs	r3, #0
 800a83c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a840:	9302      	str	r3, [sp, #8]
 800a842:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a846:	46ab      	mov	fp, r5
 800a848:	106d      	asrs	r5, r5, #1
 800a84a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a84e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a852:	ec41 0b18 	vmov	d8, r0, r1
 800a856:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a85a:	2200      	movs	r2, #0
 800a85c:	4640      	mov	r0, r8
 800a85e:	4649      	mov	r1, r9
 800a860:	4614      	mov	r4, r2
 800a862:	461d      	mov	r5, r3
 800a864:	f7f5 fec8 	bl	80005f8 <__aeabi_dmul>
 800a868:	4602      	mov	r2, r0
 800a86a:	460b      	mov	r3, r1
 800a86c:	4630      	mov	r0, r6
 800a86e:	4639      	mov	r1, r7
 800a870:	f7f5 fd0a 	bl	8000288 <__aeabi_dsub>
 800a874:	ec53 2b19 	vmov	r2, r3, d9
 800a878:	4606      	mov	r6, r0
 800a87a:	460f      	mov	r7, r1
 800a87c:	4620      	mov	r0, r4
 800a87e:	4629      	mov	r1, r5
 800a880:	f7f5 fd02 	bl	8000288 <__aeabi_dsub>
 800a884:	4602      	mov	r2, r0
 800a886:	460b      	mov	r3, r1
 800a888:	4650      	mov	r0, sl
 800a88a:	4659      	mov	r1, fp
 800a88c:	f7f5 fcfc 	bl	8000288 <__aeabi_dsub>
 800a890:	4642      	mov	r2, r8
 800a892:	464b      	mov	r3, r9
 800a894:	f7f5 feb0 	bl	80005f8 <__aeabi_dmul>
 800a898:	4602      	mov	r2, r0
 800a89a:	460b      	mov	r3, r1
 800a89c:	4630      	mov	r0, r6
 800a89e:	4639      	mov	r1, r7
 800a8a0:	f7f5 fcf2 	bl	8000288 <__aeabi_dsub>
 800a8a4:	ec53 2b1a 	vmov	r2, r3, d10
 800a8a8:	f7f5 fea6 	bl	80005f8 <__aeabi_dmul>
 800a8ac:	ec53 2b18 	vmov	r2, r3, d8
 800a8b0:	ec41 0b19 	vmov	d9, r0, r1
 800a8b4:	ec51 0b18 	vmov	r0, r1, d8
 800a8b8:	f7f5 fe9e 	bl	80005f8 <__aeabi_dmul>
 800a8bc:	a37c      	add	r3, pc, #496	; (adr r3, 800aab0 <__ieee754_pow+0x708>)
 800a8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c2:	4604      	mov	r4, r0
 800a8c4:	460d      	mov	r5, r1
 800a8c6:	f7f5 fe97 	bl	80005f8 <__aeabi_dmul>
 800a8ca:	a37b      	add	r3, pc, #492	; (adr r3, 800aab8 <__ieee754_pow+0x710>)
 800a8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d0:	f7f5 fcdc 	bl	800028c <__adddf3>
 800a8d4:	4622      	mov	r2, r4
 800a8d6:	462b      	mov	r3, r5
 800a8d8:	f7f5 fe8e 	bl	80005f8 <__aeabi_dmul>
 800a8dc:	a378      	add	r3, pc, #480	; (adr r3, 800aac0 <__ieee754_pow+0x718>)
 800a8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e2:	f7f5 fcd3 	bl	800028c <__adddf3>
 800a8e6:	4622      	mov	r2, r4
 800a8e8:	462b      	mov	r3, r5
 800a8ea:	f7f5 fe85 	bl	80005f8 <__aeabi_dmul>
 800a8ee:	a376      	add	r3, pc, #472	; (adr r3, 800aac8 <__ieee754_pow+0x720>)
 800a8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f4:	f7f5 fcca 	bl	800028c <__adddf3>
 800a8f8:	4622      	mov	r2, r4
 800a8fa:	462b      	mov	r3, r5
 800a8fc:	f7f5 fe7c 	bl	80005f8 <__aeabi_dmul>
 800a900:	a373      	add	r3, pc, #460	; (adr r3, 800aad0 <__ieee754_pow+0x728>)
 800a902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a906:	f7f5 fcc1 	bl	800028c <__adddf3>
 800a90a:	4622      	mov	r2, r4
 800a90c:	462b      	mov	r3, r5
 800a90e:	f7f5 fe73 	bl	80005f8 <__aeabi_dmul>
 800a912:	a371      	add	r3, pc, #452	; (adr r3, 800aad8 <__ieee754_pow+0x730>)
 800a914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a918:	f7f5 fcb8 	bl	800028c <__adddf3>
 800a91c:	4622      	mov	r2, r4
 800a91e:	4606      	mov	r6, r0
 800a920:	460f      	mov	r7, r1
 800a922:	462b      	mov	r3, r5
 800a924:	4620      	mov	r0, r4
 800a926:	4629      	mov	r1, r5
 800a928:	f7f5 fe66 	bl	80005f8 <__aeabi_dmul>
 800a92c:	4602      	mov	r2, r0
 800a92e:	460b      	mov	r3, r1
 800a930:	4630      	mov	r0, r6
 800a932:	4639      	mov	r1, r7
 800a934:	f7f5 fe60 	bl	80005f8 <__aeabi_dmul>
 800a938:	4642      	mov	r2, r8
 800a93a:	4604      	mov	r4, r0
 800a93c:	460d      	mov	r5, r1
 800a93e:	464b      	mov	r3, r9
 800a940:	ec51 0b18 	vmov	r0, r1, d8
 800a944:	f7f5 fca2 	bl	800028c <__adddf3>
 800a948:	ec53 2b19 	vmov	r2, r3, d9
 800a94c:	f7f5 fe54 	bl	80005f8 <__aeabi_dmul>
 800a950:	4622      	mov	r2, r4
 800a952:	462b      	mov	r3, r5
 800a954:	f7f5 fc9a 	bl	800028c <__adddf3>
 800a958:	4642      	mov	r2, r8
 800a95a:	4682      	mov	sl, r0
 800a95c:	468b      	mov	fp, r1
 800a95e:	464b      	mov	r3, r9
 800a960:	4640      	mov	r0, r8
 800a962:	4649      	mov	r1, r9
 800a964:	f7f5 fe48 	bl	80005f8 <__aeabi_dmul>
 800a968:	4b6b      	ldr	r3, [pc, #428]	; (800ab18 <__ieee754_pow+0x770>)
 800a96a:	2200      	movs	r2, #0
 800a96c:	4606      	mov	r6, r0
 800a96e:	460f      	mov	r7, r1
 800a970:	f7f5 fc8c 	bl	800028c <__adddf3>
 800a974:	4652      	mov	r2, sl
 800a976:	465b      	mov	r3, fp
 800a978:	f7f5 fc88 	bl	800028c <__adddf3>
 800a97c:	2000      	movs	r0, #0
 800a97e:	4604      	mov	r4, r0
 800a980:	460d      	mov	r5, r1
 800a982:	4602      	mov	r2, r0
 800a984:	460b      	mov	r3, r1
 800a986:	4640      	mov	r0, r8
 800a988:	4649      	mov	r1, r9
 800a98a:	f7f5 fe35 	bl	80005f8 <__aeabi_dmul>
 800a98e:	4b62      	ldr	r3, [pc, #392]	; (800ab18 <__ieee754_pow+0x770>)
 800a990:	4680      	mov	r8, r0
 800a992:	4689      	mov	r9, r1
 800a994:	2200      	movs	r2, #0
 800a996:	4620      	mov	r0, r4
 800a998:	4629      	mov	r1, r5
 800a99a:	f7f5 fc75 	bl	8000288 <__aeabi_dsub>
 800a99e:	4632      	mov	r2, r6
 800a9a0:	463b      	mov	r3, r7
 800a9a2:	f7f5 fc71 	bl	8000288 <__aeabi_dsub>
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	460b      	mov	r3, r1
 800a9aa:	4650      	mov	r0, sl
 800a9ac:	4659      	mov	r1, fp
 800a9ae:	f7f5 fc6b 	bl	8000288 <__aeabi_dsub>
 800a9b2:	ec53 2b18 	vmov	r2, r3, d8
 800a9b6:	f7f5 fe1f 	bl	80005f8 <__aeabi_dmul>
 800a9ba:	4622      	mov	r2, r4
 800a9bc:	4606      	mov	r6, r0
 800a9be:	460f      	mov	r7, r1
 800a9c0:	462b      	mov	r3, r5
 800a9c2:	ec51 0b19 	vmov	r0, r1, d9
 800a9c6:	f7f5 fe17 	bl	80005f8 <__aeabi_dmul>
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	460b      	mov	r3, r1
 800a9ce:	4630      	mov	r0, r6
 800a9d0:	4639      	mov	r1, r7
 800a9d2:	f7f5 fc5b 	bl	800028c <__adddf3>
 800a9d6:	4606      	mov	r6, r0
 800a9d8:	460f      	mov	r7, r1
 800a9da:	4602      	mov	r2, r0
 800a9dc:	460b      	mov	r3, r1
 800a9de:	4640      	mov	r0, r8
 800a9e0:	4649      	mov	r1, r9
 800a9e2:	f7f5 fc53 	bl	800028c <__adddf3>
 800a9e6:	a33e      	add	r3, pc, #248	; (adr r3, 800aae0 <__ieee754_pow+0x738>)
 800a9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ec:	2000      	movs	r0, #0
 800a9ee:	4604      	mov	r4, r0
 800a9f0:	460d      	mov	r5, r1
 800a9f2:	f7f5 fe01 	bl	80005f8 <__aeabi_dmul>
 800a9f6:	4642      	mov	r2, r8
 800a9f8:	ec41 0b18 	vmov	d8, r0, r1
 800a9fc:	464b      	mov	r3, r9
 800a9fe:	4620      	mov	r0, r4
 800aa00:	4629      	mov	r1, r5
 800aa02:	f7f5 fc41 	bl	8000288 <__aeabi_dsub>
 800aa06:	4602      	mov	r2, r0
 800aa08:	460b      	mov	r3, r1
 800aa0a:	4630      	mov	r0, r6
 800aa0c:	4639      	mov	r1, r7
 800aa0e:	f7f5 fc3b 	bl	8000288 <__aeabi_dsub>
 800aa12:	a335      	add	r3, pc, #212	; (adr r3, 800aae8 <__ieee754_pow+0x740>)
 800aa14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa18:	f7f5 fdee 	bl	80005f8 <__aeabi_dmul>
 800aa1c:	a334      	add	r3, pc, #208	; (adr r3, 800aaf0 <__ieee754_pow+0x748>)
 800aa1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa22:	4606      	mov	r6, r0
 800aa24:	460f      	mov	r7, r1
 800aa26:	4620      	mov	r0, r4
 800aa28:	4629      	mov	r1, r5
 800aa2a:	f7f5 fde5 	bl	80005f8 <__aeabi_dmul>
 800aa2e:	4602      	mov	r2, r0
 800aa30:	460b      	mov	r3, r1
 800aa32:	4630      	mov	r0, r6
 800aa34:	4639      	mov	r1, r7
 800aa36:	f7f5 fc29 	bl	800028c <__adddf3>
 800aa3a:	9a07      	ldr	r2, [sp, #28]
 800aa3c:	4b37      	ldr	r3, [pc, #220]	; (800ab1c <__ieee754_pow+0x774>)
 800aa3e:	4413      	add	r3, r2
 800aa40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa44:	f7f5 fc22 	bl	800028c <__adddf3>
 800aa48:	4682      	mov	sl, r0
 800aa4a:	9805      	ldr	r0, [sp, #20]
 800aa4c:	468b      	mov	fp, r1
 800aa4e:	f7f5 fd69 	bl	8000524 <__aeabi_i2d>
 800aa52:	9a07      	ldr	r2, [sp, #28]
 800aa54:	4b32      	ldr	r3, [pc, #200]	; (800ab20 <__ieee754_pow+0x778>)
 800aa56:	4413      	add	r3, r2
 800aa58:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa5c:	4606      	mov	r6, r0
 800aa5e:	460f      	mov	r7, r1
 800aa60:	4652      	mov	r2, sl
 800aa62:	465b      	mov	r3, fp
 800aa64:	ec51 0b18 	vmov	r0, r1, d8
 800aa68:	f7f5 fc10 	bl	800028c <__adddf3>
 800aa6c:	4642      	mov	r2, r8
 800aa6e:	464b      	mov	r3, r9
 800aa70:	f7f5 fc0c 	bl	800028c <__adddf3>
 800aa74:	4632      	mov	r2, r6
 800aa76:	463b      	mov	r3, r7
 800aa78:	f7f5 fc08 	bl	800028c <__adddf3>
 800aa7c:	2000      	movs	r0, #0
 800aa7e:	4632      	mov	r2, r6
 800aa80:	463b      	mov	r3, r7
 800aa82:	4604      	mov	r4, r0
 800aa84:	460d      	mov	r5, r1
 800aa86:	f7f5 fbff 	bl	8000288 <__aeabi_dsub>
 800aa8a:	4642      	mov	r2, r8
 800aa8c:	464b      	mov	r3, r9
 800aa8e:	f7f5 fbfb 	bl	8000288 <__aeabi_dsub>
 800aa92:	ec53 2b18 	vmov	r2, r3, d8
 800aa96:	f7f5 fbf7 	bl	8000288 <__aeabi_dsub>
 800aa9a:	4602      	mov	r2, r0
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	4650      	mov	r0, sl
 800aaa0:	4659      	mov	r1, fp
 800aaa2:	e610      	b.n	800a6c6 <__ieee754_pow+0x31e>
 800aaa4:	2401      	movs	r4, #1
 800aaa6:	e6a1      	b.n	800a7ec <__ieee754_pow+0x444>
 800aaa8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800aaf8 <__ieee754_pow+0x750>
 800aaac:	e617      	b.n	800a6de <__ieee754_pow+0x336>
 800aaae:	bf00      	nop
 800aab0:	4a454eef 	.word	0x4a454eef
 800aab4:	3fca7e28 	.word	0x3fca7e28
 800aab8:	93c9db65 	.word	0x93c9db65
 800aabc:	3fcd864a 	.word	0x3fcd864a
 800aac0:	a91d4101 	.word	0xa91d4101
 800aac4:	3fd17460 	.word	0x3fd17460
 800aac8:	518f264d 	.word	0x518f264d
 800aacc:	3fd55555 	.word	0x3fd55555
 800aad0:	db6fabff 	.word	0xdb6fabff
 800aad4:	3fdb6db6 	.word	0x3fdb6db6
 800aad8:	33333303 	.word	0x33333303
 800aadc:	3fe33333 	.word	0x3fe33333
 800aae0:	e0000000 	.word	0xe0000000
 800aae4:	3feec709 	.word	0x3feec709
 800aae8:	dc3a03fd 	.word	0xdc3a03fd
 800aaec:	3feec709 	.word	0x3feec709
 800aaf0:	145b01f5 	.word	0x145b01f5
 800aaf4:	be3e2fe0 	.word	0xbe3e2fe0
 800aaf8:	00000000 	.word	0x00000000
 800aafc:	3ff00000 	.word	0x3ff00000
 800ab00:	7ff00000 	.word	0x7ff00000
 800ab04:	43400000 	.word	0x43400000
 800ab08:	0003988e 	.word	0x0003988e
 800ab0c:	000bb679 	.word	0x000bb679
 800ab10:	0800b240 	.word	0x0800b240
 800ab14:	3ff00000 	.word	0x3ff00000
 800ab18:	40080000 	.word	0x40080000
 800ab1c:	0800b260 	.word	0x0800b260
 800ab20:	0800b250 	.word	0x0800b250
 800ab24:	a3b3      	add	r3, pc, #716	; (adr r3, 800adf4 <__ieee754_pow+0xa4c>)
 800ab26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2a:	4640      	mov	r0, r8
 800ab2c:	4649      	mov	r1, r9
 800ab2e:	f7f5 fbad 	bl	800028c <__adddf3>
 800ab32:	4622      	mov	r2, r4
 800ab34:	ec41 0b1a 	vmov	d10, r0, r1
 800ab38:	462b      	mov	r3, r5
 800ab3a:	4630      	mov	r0, r6
 800ab3c:	4639      	mov	r1, r7
 800ab3e:	f7f5 fba3 	bl	8000288 <__aeabi_dsub>
 800ab42:	4602      	mov	r2, r0
 800ab44:	460b      	mov	r3, r1
 800ab46:	ec51 0b1a 	vmov	r0, r1, d10
 800ab4a:	f7f5 ffe5 	bl	8000b18 <__aeabi_dcmpgt>
 800ab4e:	2800      	cmp	r0, #0
 800ab50:	f47f ae04 	bne.w	800a75c <__ieee754_pow+0x3b4>
 800ab54:	4aa2      	ldr	r2, [pc, #648]	; (800ade0 <__ieee754_pow+0xa38>)
 800ab56:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	f340 8107 	ble.w	800ad6e <__ieee754_pow+0x9c6>
 800ab60:	151b      	asrs	r3, r3, #20
 800ab62:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ab66:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ab6a:	fa4a fa03 	asr.w	sl, sl, r3
 800ab6e:	44da      	add	sl, fp
 800ab70:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800ab74:	489b      	ldr	r0, [pc, #620]	; (800ade4 <__ieee754_pow+0xa3c>)
 800ab76:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800ab7a:	4108      	asrs	r0, r1
 800ab7c:	ea00 030a 	and.w	r3, r0, sl
 800ab80:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800ab84:	f1c1 0114 	rsb	r1, r1, #20
 800ab88:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ab8c:	fa4a fa01 	asr.w	sl, sl, r1
 800ab90:	f1bb 0f00 	cmp.w	fp, #0
 800ab94:	f04f 0200 	mov.w	r2, #0
 800ab98:	4620      	mov	r0, r4
 800ab9a:	4629      	mov	r1, r5
 800ab9c:	bfb8      	it	lt
 800ab9e:	f1ca 0a00 	rsblt	sl, sl, #0
 800aba2:	f7f5 fb71 	bl	8000288 <__aeabi_dsub>
 800aba6:	ec41 0b19 	vmov	d9, r0, r1
 800abaa:	4642      	mov	r2, r8
 800abac:	464b      	mov	r3, r9
 800abae:	ec51 0b19 	vmov	r0, r1, d9
 800abb2:	f7f5 fb6b 	bl	800028c <__adddf3>
 800abb6:	a37a      	add	r3, pc, #488	; (adr r3, 800ada0 <__ieee754_pow+0x9f8>)
 800abb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abbc:	2000      	movs	r0, #0
 800abbe:	4604      	mov	r4, r0
 800abc0:	460d      	mov	r5, r1
 800abc2:	f7f5 fd19 	bl	80005f8 <__aeabi_dmul>
 800abc6:	ec53 2b19 	vmov	r2, r3, d9
 800abca:	4606      	mov	r6, r0
 800abcc:	460f      	mov	r7, r1
 800abce:	4620      	mov	r0, r4
 800abd0:	4629      	mov	r1, r5
 800abd2:	f7f5 fb59 	bl	8000288 <__aeabi_dsub>
 800abd6:	4602      	mov	r2, r0
 800abd8:	460b      	mov	r3, r1
 800abda:	4640      	mov	r0, r8
 800abdc:	4649      	mov	r1, r9
 800abde:	f7f5 fb53 	bl	8000288 <__aeabi_dsub>
 800abe2:	a371      	add	r3, pc, #452	; (adr r3, 800ada8 <__ieee754_pow+0xa00>)
 800abe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe8:	f7f5 fd06 	bl	80005f8 <__aeabi_dmul>
 800abec:	a370      	add	r3, pc, #448	; (adr r3, 800adb0 <__ieee754_pow+0xa08>)
 800abee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf2:	4680      	mov	r8, r0
 800abf4:	4689      	mov	r9, r1
 800abf6:	4620      	mov	r0, r4
 800abf8:	4629      	mov	r1, r5
 800abfa:	f7f5 fcfd 	bl	80005f8 <__aeabi_dmul>
 800abfe:	4602      	mov	r2, r0
 800ac00:	460b      	mov	r3, r1
 800ac02:	4640      	mov	r0, r8
 800ac04:	4649      	mov	r1, r9
 800ac06:	f7f5 fb41 	bl	800028c <__adddf3>
 800ac0a:	4604      	mov	r4, r0
 800ac0c:	460d      	mov	r5, r1
 800ac0e:	4602      	mov	r2, r0
 800ac10:	460b      	mov	r3, r1
 800ac12:	4630      	mov	r0, r6
 800ac14:	4639      	mov	r1, r7
 800ac16:	f7f5 fb39 	bl	800028c <__adddf3>
 800ac1a:	4632      	mov	r2, r6
 800ac1c:	463b      	mov	r3, r7
 800ac1e:	4680      	mov	r8, r0
 800ac20:	4689      	mov	r9, r1
 800ac22:	f7f5 fb31 	bl	8000288 <__aeabi_dsub>
 800ac26:	4602      	mov	r2, r0
 800ac28:	460b      	mov	r3, r1
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	4629      	mov	r1, r5
 800ac2e:	f7f5 fb2b 	bl	8000288 <__aeabi_dsub>
 800ac32:	4642      	mov	r2, r8
 800ac34:	4606      	mov	r6, r0
 800ac36:	460f      	mov	r7, r1
 800ac38:	464b      	mov	r3, r9
 800ac3a:	4640      	mov	r0, r8
 800ac3c:	4649      	mov	r1, r9
 800ac3e:	f7f5 fcdb 	bl	80005f8 <__aeabi_dmul>
 800ac42:	a35d      	add	r3, pc, #372	; (adr r3, 800adb8 <__ieee754_pow+0xa10>)
 800ac44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac48:	4604      	mov	r4, r0
 800ac4a:	460d      	mov	r5, r1
 800ac4c:	f7f5 fcd4 	bl	80005f8 <__aeabi_dmul>
 800ac50:	a35b      	add	r3, pc, #364	; (adr r3, 800adc0 <__ieee754_pow+0xa18>)
 800ac52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac56:	f7f5 fb17 	bl	8000288 <__aeabi_dsub>
 800ac5a:	4622      	mov	r2, r4
 800ac5c:	462b      	mov	r3, r5
 800ac5e:	f7f5 fccb 	bl	80005f8 <__aeabi_dmul>
 800ac62:	a359      	add	r3, pc, #356	; (adr r3, 800adc8 <__ieee754_pow+0xa20>)
 800ac64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac68:	f7f5 fb10 	bl	800028c <__adddf3>
 800ac6c:	4622      	mov	r2, r4
 800ac6e:	462b      	mov	r3, r5
 800ac70:	f7f5 fcc2 	bl	80005f8 <__aeabi_dmul>
 800ac74:	a356      	add	r3, pc, #344	; (adr r3, 800add0 <__ieee754_pow+0xa28>)
 800ac76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7a:	f7f5 fb05 	bl	8000288 <__aeabi_dsub>
 800ac7e:	4622      	mov	r2, r4
 800ac80:	462b      	mov	r3, r5
 800ac82:	f7f5 fcb9 	bl	80005f8 <__aeabi_dmul>
 800ac86:	a354      	add	r3, pc, #336	; (adr r3, 800add8 <__ieee754_pow+0xa30>)
 800ac88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac8c:	f7f5 fafe 	bl	800028c <__adddf3>
 800ac90:	4622      	mov	r2, r4
 800ac92:	462b      	mov	r3, r5
 800ac94:	f7f5 fcb0 	bl	80005f8 <__aeabi_dmul>
 800ac98:	4602      	mov	r2, r0
 800ac9a:	460b      	mov	r3, r1
 800ac9c:	4640      	mov	r0, r8
 800ac9e:	4649      	mov	r1, r9
 800aca0:	f7f5 faf2 	bl	8000288 <__aeabi_dsub>
 800aca4:	4604      	mov	r4, r0
 800aca6:	460d      	mov	r5, r1
 800aca8:	4602      	mov	r2, r0
 800acaa:	460b      	mov	r3, r1
 800acac:	4640      	mov	r0, r8
 800acae:	4649      	mov	r1, r9
 800acb0:	f7f5 fca2 	bl	80005f8 <__aeabi_dmul>
 800acb4:	2200      	movs	r2, #0
 800acb6:	ec41 0b19 	vmov	d9, r0, r1
 800acba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800acbe:	4620      	mov	r0, r4
 800acc0:	4629      	mov	r1, r5
 800acc2:	f7f5 fae1 	bl	8000288 <__aeabi_dsub>
 800acc6:	4602      	mov	r2, r0
 800acc8:	460b      	mov	r3, r1
 800acca:	ec51 0b19 	vmov	r0, r1, d9
 800acce:	f7f5 fdbd 	bl	800084c <__aeabi_ddiv>
 800acd2:	4632      	mov	r2, r6
 800acd4:	4604      	mov	r4, r0
 800acd6:	460d      	mov	r5, r1
 800acd8:	463b      	mov	r3, r7
 800acda:	4640      	mov	r0, r8
 800acdc:	4649      	mov	r1, r9
 800acde:	f7f5 fc8b 	bl	80005f8 <__aeabi_dmul>
 800ace2:	4632      	mov	r2, r6
 800ace4:	463b      	mov	r3, r7
 800ace6:	f7f5 fad1 	bl	800028c <__adddf3>
 800acea:	4602      	mov	r2, r0
 800acec:	460b      	mov	r3, r1
 800acee:	4620      	mov	r0, r4
 800acf0:	4629      	mov	r1, r5
 800acf2:	f7f5 fac9 	bl	8000288 <__aeabi_dsub>
 800acf6:	4642      	mov	r2, r8
 800acf8:	464b      	mov	r3, r9
 800acfa:	f7f5 fac5 	bl	8000288 <__aeabi_dsub>
 800acfe:	460b      	mov	r3, r1
 800ad00:	4602      	mov	r2, r0
 800ad02:	4939      	ldr	r1, [pc, #228]	; (800ade8 <__ieee754_pow+0xa40>)
 800ad04:	2000      	movs	r0, #0
 800ad06:	f7f5 fabf 	bl	8000288 <__aeabi_dsub>
 800ad0a:	ec41 0b10 	vmov	d0, r0, r1
 800ad0e:	ee10 3a90 	vmov	r3, s1
 800ad12:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ad16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad1a:	da2b      	bge.n	800ad74 <__ieee754_pow+0x9cc>
 800ad1c:	4650      	mov	r0, sl
 800ad1e:	f000 f877 	bl	800ae10 <scalbn>
 800ad22:	ec51 0b10 	vmov	r0, r1, d0
 800ad26:	ec53 2b18 	vmov	r2, r3, d8
 800ad2a:	f7ff bbee 	b.w	800a50a <__ieee754_pow+0x162>
 800ad2e:	4b2f      	ldr	r3, [pc, #188]	; (800adec <__ieee754_pow+0xa44>)
 800ad30:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ad34:	429e      	cmp	r6, r3
 800ad36:	f77f af0d 	ble.w	800ab54 <__ieee754_pow+0x7ac>
 800ad3a:	4b2d      	ldr	r3, [pc, #180]	; (800adf0 <__ieee754_pow+0xa48>)
 800ad3c:	440b      	add	r3, r1
 800ad3e:	4303      	orrs	r3, r0
 800ad40:	d009      	beq.n	800ad56 <__ieee754_pow+0x9ae>
 800ad42:	ec51 0b18 	vmov	r0, r1, d8
 800ad46:	2200      	movs	r2, #0
 800ad48:	2300      	movs	r3, #0
 800ad4a:	f7f5 fec7 	bl	8000adc <__aeabi_dcmplt>
 800ad4e:	3800      	subs	r0, #0
 800ad50:	bf18      	it	ne
 800ad52:	2001      	movne	r0, #1
 800ad54:	e448      	b.n	800a5e8 <__ieee754_pow+0x240>
 800ad56:	4622      	mov	r2, r4
 800ad58:	462b      	mov	r3, r5
 800ad5a:	f7f5 fa95 	bl	8000288 <__aeabi_dsub>
 800ad5e:	4642      	mov	r2, r8
 800ad60:	464b      	mov	r3, r9
 800ad62:	f7f5 fecf 	bl	8000b04 <__aeabi_dcmpge>
 800ad66:	2800      	cmp	r0, #0
 800ad68:	f43f aef4 	beq.w	800ab54 <__ieee754_pow+0x7ac>
 800ad6c:	e7e9      	b.n	800ad42 <__ieee754_pow+0x99a>
 800ad6e:	f04f 0a00 	mov.w	sl, #0
 800ad72:	e71a      	b.n	800abaa <__ieee754_pow+0x802>
 800ad74:	ec51 0b10 	vmov	r0, r1, d0
 800ad78:	4619      	mov	r1, r3
 800ad7a:	e7d4      	b.n	800ad26 <__ieee754_pow+0x97e>
 800ad7c:	491a      	ldr	r1, [pc, #104]	; (800ade8 <__ieee754_pow+0xa40>)
 800ad7e:	2000      	movs	r0, #0
 800ad80:	f7ff bb31 	b.w	800a3e6 <__ieee754_pow+0x3e>
 800ad84:	2000      	movs	r0, #0
 800ad86:	2100      	movs	r1, #0
 800ad88:	f7ff bb2d 	b.w	800a3e6 <__ieee754_pow+0x3e>
 800ad8c:	4630      	mov	r0, r6
 800ad8e:	4639      	mov	r1, r7
 800ad90:	f7ff bb29 	b.w	800a3e6 <__ieee754_pow+0x3e>
 800ad94:	9204      	str	r2, [sp, #16]
 800ad96:	f7ff bb7b 	b.w	800a490 <__ieee754_pow+0xe8>
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	f7ff bb65 	b.w	800a46a <__ieee754_pow+0xc2>
 800ada0:	00000000 	.word	0x00000000
 800ada4:	3fe62e43 	.word	0x3fe62e43
 800ada8:	fefa39ef 	.word	0xfefa39ef
 800adac:	3fe62e42 	.word	0x3fe62e42
 800adb0:	0ca86c39 	.word	0x0ca86c39
 800adb4:	be205c61 	.word	0xbe205c61
 800adb8:	72bea4d0 	.word	0x72bea4d0
 800adbc:	3e663769 	.word	0x3e663769
 800adc0:	c5d26bf1 	.word	0xc5d26bf1
 800adc4:	3ebbbd41 	.word	0x3ebbbd41
 800adc8:	af25de2c 	.word	0xaf25de2c
 800adcc:	3f11566a 	.word	0x3f11566a
 800add0:	16bebd93 	.word	0x16bebd93
 800add4:	3f66c16c 	.word	0x3f66c16c
 800add8:	5555553e 	.word	0x5555553e
 800addc:	3fc55555 	.word	0x3fc55555
 800ade0:	3fe00000 	.word	0x3fe00000
 800ade4:	fff00000 	.word	0xfff00000
 800ade8:	3ff00000 	.word	0x3ff00000
 800adec:	4090cbff 	.word	0x4090cbff
 800adf0:	3f6f3400 	.word	0x3f6f3400
 800adf4:	652b82fe 	.word	0x652b82fe
 800adf8:	3c971547 	.word	0x3c971547

0800adfc <fabs>:
 800adfc:	ec51 0b10 	vmov	r0, r1, d0
 800ae00:	ee10 2a10 	vmov	r2, s0
 800ae04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ae08:	ec43 2b10 	vmov	d0, r2, r3
 800ae0c:	4770      	bx	lr
	...

0800ae10 <scalbn>:
 800ae10:	b570      	push	{r4, r5, r6, lr}
 800ae12:	ec55 4b10 	vmov	r4, r5, d0
 800ae16:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800ae1a:	4606      	mov	r6, r0
 800ae1c:	462b      	mov	r3, r5
 800ae1e:	b999      	cbnz	r1, 800ae48 <scalbn+0x38>
 800ae20:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ae24:	4323      	orrs	r3, r4
 800ae26:	d03f      	beq.n	800aea8 <scalbn+0x98>
 800ae28:	4b35      	ldr	r3, [pc, #212]	; (800af00 <scalbn+0xf0>)
 800ae2a:	4629      	mov	r1, r5
 800ae2c:	ee10 0a10 	vmov	r0, s0
 800ae30:	2200      	movs	r2, #0
 800ae32:	f7f5 fbe1 	bl	80005f8 <__aeabi_dmul>
 800ae36:	4b33      	ldr	r3, [pc, #204]	; (800af04 <scalbn+0xf4>)
 800ae38:	429e      	cmp	r6, r3
 800ae3a:	4604      	mov	r4, r0
 800ae3c:	460d      	mov	r5, r1
 800ae3e:	da10      	bge.n	800ae62 <scalbn+0x52>
 800ae40:	a327      	add	r3, pc, #156	; (adr r3, 800aee0 <scalbn+0xd0>)
 800ae42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae46:	e01f      	b.n	800ae88 <scalbn+0x78>
 800ae48:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ae4c:	4291      	cmp	r1, r2
 800ae4e:	d10c      	bne.n	800ae6a <scalbn+0x5a>
 800ae50:	ee10 2a10 	vmov	r2, s0
 800ae54:	4620      	mov	r0, r4
 800ae56:	4629      	mov	r1, r5
 800ae58:	f7f5 fa18 	bl	800028c <__adddf3>
 800ae5c:	4604      	mov	r4, r0
 800ae5e:	460d      	mov	r5, r1
 800ae60:	e022      	b.n	800aea8 <scalbn+0x98>
 800ae62:	460b      	mov	r3, r1
 800ae64:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ae68:	3936      	subs	r1, #54	; 0x36
 800ae6a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800ae6e:	4296      	cmp	r6, r2
 800ae70:	dd0d      	ble.n	800ae8e <scalbn+0x7e>
 800ae72:	2d00      	cmp	r5, #0
 800ae74:	a11c      	add	r1, pc, #112	; (adr r1, 800aee8 <scalbn+0xd8>)
 800ae76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae7a:	da02      	bge.n	800ae82 <scalbn+0x72>
 800ae7c:	a11c      	add	r1, pc, #112	; (adr r1, 800aef0 <scalbn+0xe0>)
 800ae7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae82:	a319      	add	r3, pc, #100	; (adr r3, 800aee8 <scalbn+0xd8>)
 800ae84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae88:	f7f5 fbb6 	bl	80005f8 <__aeabi_dmul>
 800ae8c:	e7e6      	b.n	800ae5c <scalbn+0x4c>
 800ae8e:	1872      	adds	r2, r6, r1
 800ae90:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ae94:	428a      	cmp	r2, r1
 800ae96:	dcec      	bgt.n	800ae72 <scalbn+0x62>
 800ae98:	2a00      	cmp	r2, #0
 800ae9a:	dd08      	ble.n	800aeae <scalbn+0x9e>
 800ae9c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aea0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aea4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aea8:	ec45 4b10 	vmov	d0, r4, r5
 800aeac:	bd70      	pop	{r4, r5, r6, pc}
 800aeae:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800aeb2:	da08      	bge.n	800aec6 <scalbn+0xb6>
 800aeb4:	2d00      	cmp	r5, #0
 800aeb6:	a10a      	add	r1, pc, #40	; (adr r1, 800aee0 <scalbn+0xd0>)
 800aeb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aebc:	dac0      	bge.n	800ae40 <scalbn+0x30>
 800aebe:	a10e      	add	r1, pc, #56	; (adr r1, 800aef8 <scalbn+0xe8>)
 800aec0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aec4:	e7bc      	b.n	800ae40 <scalbn+0x30>
 800aec6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aeca:	3236      	adds	r2, #54	; 0x36
 800aecc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aed0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800aed4:	4620      	mov	r0, r4
 800aed6:	4b0c      	ldr	r3, [pc, #48]	; (800af08 <scalbn+0xf8>)
 800aed8:	2200      	movs	r2, #0
 800aeda:	e7d5      	b.n	800ae88 <scalbn+0x78>
 800aedc:	f3af 8000 	nop.w
 800aee0:	c2f8f359 	.word	0xc2f8f359
 800aee4:	01a56e1f 	.word	0x01a56e1f
 800aee8:	8800759c 	.word	0x8800759c
 800aeec:	7e37e43c 	.word	0x7e37e43c
 800aef0:	8800759c 	.word	0x8800759c
 800aef4:	fe37e43c 	.word	0xfe37e43c
 800aef8:	c2f8f359 	.word	0xc2f8f359
 800aefc:	81a56e1f 	.word	0x81a56e1f
 800af00:	43500000 	.word	0x43500000
 800af04:	ffff3cb0 	.word	0xffff3cb0
 800af08:	3c900000 	.word	0x3c900000

0800af0c <with_errno>:
 800af0c:	b570      	push	{r4, r5, r6, lr}
 800af0e:	4604      	mov	r4, r0
 800af10:	460d      	mov	r5, r1
 800af12:	4616      	mov	r6, r2
 800af14:	f7fe fd16 	bl	8009944 <__errno>
 800af18:	4629      	mov	r1, r5
 800af1a:	6006      	str	r6, [r0, #0]
 800af1c:	4620      	mov	r0, r4
 800af1e:	bd70      	pop	{r4, r5, r6, pc}

0800af20 <xflow>:
 800af20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af22:	4614      	mov	r4, r2
 800af24:	461d      	mov	r5, r3
 800af26:	b108      	cbz	r0, 800af2c <xflow+0xc>
 800af28:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800af2c:	e9cd 2300 	strd	r2, r3, [sp]
 800af30:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af34:	4620      	mov	r0, r4
 800af36:	4629      	mov	r1, r5
 800af38:	f7f5 fb5e 	bl	80005f8 <__aeabi_dmul>
 800af3c:	2222      	movs	r2, #34	; 0x22
 800af3e:	b003      	add	sp, #12
 800af40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af44:	f7ff bfe2 	b.w	800af0c <with_errno>

0800af48 <__math_uflow>:
 800af48:	b508      	push	{r3, lr}
 800af4a:	2200      	movs	r2, #0
 800af4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800af50:	f7ff ffe6 	bl	800af20 <xflow>
 800af54:	ec41 0b10 	vmov	d0, r0, r1
 800af58:	bd08      	pop	{r3, pc}

0800af5a <__math_oflow>:
 800af5a:	b508      	push	{r3, lr}
 800af5c:	2200      	movs	r2, #0
 800af5e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800af62:	f7ff ffdd 	bl	800af20 <xflow>
 800af66:	ec41 0b10 	vmov	d0, r0, r1
 800af6a:	bd08      	pop	{r3, pc}

0800af6c <__ieee754_sqrt>:
 800af6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af70:	ec55 4b10 	vmov	r4, r5, d0
 800af74:	4e67      	ldr	r6, [pc, #412]	; (800b114 <__ieee754_sqrt+0x1a8>)
 800af76:	43ae      	bics	r6, r5
 800af78:	ee10 0a10 	vmov	r0, s0
 800af7c:	ee10 2a10 	vmov	r2, s0
 800af80:	4629      	mov	r1, r5
 800af82:	462b      	mov	r3, r5
 800af84:	d10d      	bne.n	800afa2 <__ieee754_sqrt+0x36>
 800af86:	f7f5 fb37 	bl	80005f8 <__aeabi_dmul>
 800af8a:	4602      	mov	r2, r0
 800af8c:	460b      	mov	r3, r1
 800af8e:	4620      	mov	r0, r4
 800af90:	4629      	mov	r1, r5
 800af92:	f7f5 f97b 	bl	800028c <__adddf3>
 800af96:	4604      	mov	r4, r0
 800af98:	460d      	mov	r5, r1
 800af9a:	ec45 4b10 	vmov	d0, r4, r5
 800af9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afa2:	2d00      	cmp	r5, #0
 800afa4:	dc0b      	bgt.n	800afbe <__ieee754_sqrt+0x52>
 800afa6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800afaa:	4326      	orrs	r6, r4
 800afac:	d0f5      	beq.n	800af9a <__ieee754_sqrt+0x2e>
 800afae:	b135      	cbz	r5, 800afbe <__ieee754_sqrt+0x52>
 800afb0:	f7f5 f96a 	bl	8000288 <__aeabi_dsub>
 800afb4:	4602      	mov	r2, r0
 800afb6:	460b      	mov	r3, r1
 800afb8:	f7f5 fc48 	bl	800084c <__aeabi_ddiv>
 800afbc:	e7eb      	b.n	800af96 <__ieee754_sqrt+0x2a>
 800afbe:	1509      	asrs	r1, r1, #20
 800afc0:	f000 808d 	beq.w	800b0de <__ieee754_sqrt+0x172>
 800afc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afc8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800afcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800afd0:	07c9      	lsls	r1, r1, #31
 800afd2:	bf5c      	itt	pl
 800afd4:	005b      	lslpl	r3, r3, #1
 800afd6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800afda:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800afde:	bf58      	it	pl
 800afe0:	0052      	lslpl	r2, r2, #1
 800afe2:	2500      	movs	r5, #0
 800afe4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800afe8:	1076      	asrs	r6, r6, #1
 800afea:	0052      	lsls	r2, r2, #1
 800afec:	f04f 0e16 	mov.w	lr, #22
 800aff0:	46ac      	mov	ip, r5
 800aff2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aff6:	eb0c 0001 	add.w	r0, ip, r1
 800affa:	4298      	cmp	r0, r3
 800affc:	bfde      	ittt	le
 800affe:	1a1b      	suble	r3, r3, r0
 800b000:	eb00 0c01 	addle.w	ip, r0, r1
 800b004:	186d      	addle	r5, r5, r1
 800b006:	005b      	lsls	r3, r3, #1
 800b008:	f1be 0e01 	subs.w	lr, lr, #1
 800b00c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b010:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b014:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b018:	d1ed      	bne.n	800aff6 <__ieee754_sqrt+0x8a>
 800b01a:	4674      	mov	r4, lr
 800b01c:	2720      	movs	r7, #32
 800b01e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800b022:	4563      	cmp	r3, ip
 800b024:	eb01 000e 	add.w	r0, r1, lr
 800b028:	dc02      	bgt.n	800b030 <__ieee754_sqrt+0xc4>
 800b02a:	d113      	bne.n	800b054 <__ieee754_sqrt+0xe8>
 800b02c:	4290      	cmp	r0, r2
 800b02e:	d811      	bhi.n	800b054 <__ieee754_sqrt+0xe8>
 800b030:	2800      	cmp	r0, #0
 800b032:	eb00 0e01 	add.w	lr, r0, r1
 800b036:	da57      	bge.n	800b0e8 <__ieee754_sqrt+0x17c>
 800b038:	f1be 0f00 	cmp.w	lr, #0
 800b03c:	db54      	blt.n	800b0e8 <__ieee754_sqrt+0x17c>
 800b03e:	f10c 0801 	add.w	r8, ip, #1
 800b042:	eba3 030c 	sub.w	r3, r3, ip
 800b046:	4290      	cmp	r0, r2
 800b048:	bf88      	it	hi
 800b04a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b04e:	1a12      	subs	r2, r2, r0
 800b050:	440c      	add	r4, r1
 800b052:	46c4      	mov	ip, r8
 800b054:	005b      	lsls	r3, r3, #1
 800b056:	3f01      	subs	r7, #1
 800b058:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b05c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b060:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b064:	d1dd      	bne.n	800b022 <__ieee754_sqrt+0xb6>
 800b066:	4313      	orrs	r3, r2
 800b068:	d01b      	beq.n	800b0a2 <__ieee754_sqrt+0x136>
 800b06a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800b118 <__ieee754_sqrt+0x1ac>
 800b06e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800b11c <__ieee754_sqrt+0x1b0>
 800b072:	e9da 0100 	ldrd	r0, r1, [sl]
 800b076:	e9db 2300 	ldrd	r2, r3, [fp]
 800b07a:	f7f5 f905 	bl	8000288 <__aeabi_dsub>
 800b07e:	e9da 8900 	ldrd	r8, r9, [sl]
 800b082:	4602      	mov	r2, r0
 800b084:	460b      	mov	r3, r1
 800b086:	4640      	mov	r0, r8
 800b088:	4649      	mov	r1, r9
 800b08a:	f7f5 fd31 	bl	8000af0 <__aeabi_dcmple>
 800b08e:	b140      	cbz	r0, 800b0a2 <__ieee754_sqrt+0x136>
 800b090:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b094:	e9da 0100 	ldrd	r0, r1, [sl]
 800b098:	e9db 2300 	ldrd	r2, r3, [fp]
 800b09c:	d126      	bne.n	800b0ec <__ieee754_sqrt+0x180>
 800b09e:	3501      	adds	r5, #1
 800b0a0:	463c      	mov	r4, r7
 800b0a2:	106a      	asrs	r2, r5, #1
 800b0a4:	0863      	lsrs	r3, r4, #1
 800b0a6:	07e9      	lsls	r1, r5, #31
 800b0a8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800b0ac:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800b0b0:	bf48      	it	mi
 800b0b2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800b0b6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800b0ba:	461c      	mov	r4, r3
 800b0bc:	e76d      	b.n	800af9a <__ieee754_sqrt+0x2e>
 800b0be:	0ad3      	lsrs	r3, r2, #11
 800b0c0:	3815      	subs	r0, #21
 800b0c2:	0552      	lsls	r2, r2, #21
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d0fa      	beq.n	800b0be <__ieee754_sqrt+0x152>
 800b0c8:	02dc      	lsls	r4, r3, #11
 800b0ca:	d50a      	bpl.n	800b0e2 <__ieee754_sqrt+0x176>
 800b0cc:	f1c1 0420 	rsb	r4, r1, #32
 800b0d0:	fa22 f404 	lsr.w	r4, r2, r4
 800b0d4:	1e4d      	subs	r5, r1, #1
 800b0d6:	408a      	lsls	r2, r1
 800b0d8:	4323      	orrs	r3, r4
 800b0da:	1b41      	subs	r1, r0, r5
 800b0dc:	e772      	b.n	800afc4 <__ieee754_sqrt+0x58>
 800b0de:	4608      	mov	r0, r1
 800b0e0:	e7f0      	b.n	800b0c4 <__ieee754_sqrt+0x158>
 800b0e2:	005b      	lsls	r3, r3, #1
 800b0e4:	3101      	adds	r1, #1
 800b0e6:	e7ef      	b.n	800b0c8 <__ieee754_sqrt+0x15c>
 800b0e8:	46e0      	mov	r8, ip
 800b0ea:	e7aa      	b.n	800b042 <__ieee754_sqrt+0xd6>
 800b0ec:	f7f5 f8ce 	bl	800028c <__adddf3>
 800b0f0:	e9da 8900 	ldrd	r8, r9, [sl]
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	460b      	mov	r3, r1
 800b0f8:	4640      	mov	r0, r8
 800b0fa:	4649      	mov	r1, r9
 800b0fc:	f7f5 fcee 	bl	8000adc <__aeabi_dcmplt>
 800b100:	b120      	cbz	r0, 800b10c <__ieee754_sqrt+0x1a0>
 800b102:	1ca0      	adds	r0, r4, #2
 800b104:	bf08      	it	eq
 800b106:	3501      	addeq	r5, #1
 800b108:	3402      	adds	r4, #2
 800b10a:	e7ca      	b.n	800b0a2 <__ieee754_sqrt+0x136>
 800b10c:	3401      	adds	r4, #1
 800b10e:	f024 0401 	bic.w	r4, r4, #1
 800b112:	e7c6      	b.n	800b0a2 <__ieee754_sqrt+0x136>
 800b114:	7ff00000 	.word	0x7ff00000
 800b118:	20000240 	.word	0x20000240
 800b11c:	20000248 	.word	0x20000248

0800b120 <_init>:
 800b120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b122:	bf00      	nop
 800b124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b126:	bc08      	pop	{r3}
 800b128:	469e      	mov	lr, r3
 800b12a:	4770      	bx	lr

0800b12c <_fini>:
 800b12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b12e:	bf00      	nop
 800b130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b132:	bc08      	pop	{r3}
 800b134:	469e      	mov	lr, r3
 800b136:	4770      	bx	lr
